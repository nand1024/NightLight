
NightLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007328  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800773c  0800773c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800773c  0800773c  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800773c  0800773c  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08007744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200000e0  08007824  000200e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  08007824  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ce1  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4c  00000000  00000000  00027de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00029a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a7b  00000000  00000000  0002ab38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009142  00000000  00000000  0003c5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d558  00000000  00000000  000456f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a2c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c98  00000000  00000000  000a2ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000e0 	.word	0x200000e0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080073c8 	.word	0x080073c8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000e4 	.word	0x200000e4
 80000fc:	080073c8 	.word	0x080073c8

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0010      	movs	r0, r2
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	0019      	movs	r1, r3
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 ff59 	bl	80012c8 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fea9 	bl	8001178 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 ff4b 	bl	80012c8 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ff41 	bl	80012c8 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fed1 	bl	80011fc <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fec7 	bl	80011fc <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_lmul>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	46ce      	mov	lr, r9
 8000480:	4647      	mov	r7, r8
 8000482:	b580      	push	{r7, lr}
 8000484:	0007      	movs	r7, r0
 8000486:	4699      	mov	r9, r3
 8000488:	0c3b      	lsrs	r3, r7, #16
 800048a:	469c      	mov	ip, r3
 800048c:	0413      	lsls	r3, r2, #16
 800048e:	0c1b      	lsrs	r3, r3, #16
 8000490:	001d      	movs	r5, r3
 8000492:	000e      	movs	r6, r1
 8000494:	4661      	mov	r1, ip
 8000496:	0400      	lsls	r0, r0, #16
 8000498:	0c14      	lsrs	r4, r2, #16
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	4345      	muls	r5, r0
 800049e:	434b      	muls	r3, r1
 80004a0:	4360      	muls	r0, r4
 80004a2:	4361      	muls	r1, r4
 80004a4:	18c0      	adds	r0, r0, r3
 80004a6:	0c2c      	lsrs	r4, r5, #16
 80004a8:	1820      	adds	r0, r4, r0
 80004aa:	468c      	mov	ip, r1
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d903      	bls.n	80004b8 <__aeabi_lmul+0x3c>
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	025b      	lsls	r3, r3, #9
 80004b4:	4698      	mov	r8, r3
 80004b6:	44c4      	add	ip, r8
 80004b8:	4649      	mov	r1, r9
 80004ba:	4379      	muls	r1, r7
 80004bc:	4372      	muls	r2, r6
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	4463      	add	r3, ip
 80004c2:	042d      	lsls	r5, r5, #16
 80004c4:	0c2d      	lsrs	r5, r5, #16
 80004c6:	18c9      	adds	r1, r1, r3
 80004c8:	0400      	lsls	r0, r0, #16
 80004ca:	1940      	adds	r0, r0, r5
 80004cc:	1889      	adds	r1, r1, r2
 80004ce:	bcc0      	pop	{r6, r7}
 80004d0:	46b9      	mov	r9, r7
 80004d2:	46b0      	mov	r8, r6
 80004d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_d2uiz>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	2200      	movs	r2, #0
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <__aeabi_d2uiz+0x38>)
 80004de:	0004      	movs	r4, r0
 80004e0:	000d      	movs	r5, r1
 80004e2:	f7ff ffc1 	bl	8000468 <__aeabi_dcmpge>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	d104      	bne.n	80004f4 <__aeabi_d2uiz+0x1c>
 80004ea:	0020      	movs	r0, r4
 80004ec:	0029      	movs	r1, r5
 80004ee:	f001 fd4d 	bl	8001f8c <__aeabi_d2iz>
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <__aeabi_d2uiz+0x38>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	0020      	movs	r0, r4
 80004fa:	0029      	movs	r1, r5
 80004fc:	f001 f9b4 	bl	8001868 <__aeabi_dsub>
 8000500:	f001 fd44 	bl	8001f8c <__aeabi_d2iz>
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	061b      	lsls	r3, r3, #24
 8000508:	469c      	mov	ip, r3
 800050a:	4460      	add	r0, ip
 800050c:	e7f1      	b.n	80004f2 <__aeabi_d2uiz+0x1a>
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	41e00000 	.word	0x41e00000

08000514 <__aeabi_dadd>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	464f      	mov	r7, r9
 8000518:	4646      	mov	r6, r8
 800051a:	46d6      	mov	lr, sl
 800051c:	000d      	movs	r5, r1
 800051e:	0004      	movs	r4, r0
 8000520:	b5c0      	push	{r6, r7, lr}
 8000522:	001f      	movs	r7, r3
 8000524:	0011      	movs	r1, r2
 8000526:	0328      	lsls	r0, r5, #12
 8000528:	0f62      	lsrs	r2, r4, #29
 800052a:	0a40      	lsrs	r0, r0, #9
 800052c:	4310      	orrs	r0, r2
 800052e:	007a      	lsls	r2, r7, #1
 8000530:	0d52      	lsrs	r2, r2, #21
 8000532:	00e3      	lsls	r3, r4, #3
 8000534:	033c      	lsls	r4, r7, #12
 8000536:	4691      	mov	r9, r2
 8000538:	0a64      	lsrs	r4, r4, #9
 800053a:	0ffa      	lsrs	r2, r7, #31
 800053c:	0f4f      	lsrs	r7, r1, #29
 800053e:	006e      	lsls	r6, r5, #1
 8000540:	4327      	orrs	r7, r4
 8000542:	4692      	mov	sl, r2
 8000544:	46b8      	mov	r8, r7
 8000546:	0d76      	lsrs	r6, r6, #21
 8000548:	0fed      	lsrs	r5, r5, #31
 800054a:	00c9      	lsls	r1, r1, #3
 800054c:	4295      	cmp	r5, r2
 800054e:	d100      	bne.n	8000552 <__aeabi_dadd+0x3e>
 8000550:	e099      	b.n	8000686 <__aeabi_dadd+0x172>
 8000552:	464c      	mov	r4, r9
 8000554:	1b34      	subs	r4, r6, r4
 8000556:	46a4      	mov	ip, r4
 8000558:	2c00      	cmp	r4, #0
 800055a:	dc00      	bgt.n	800055e <__aeabi_dadd+0x4a>
 800055c:	e07c      	b.n	8000658 <__aeabi_dadd+0x144>
 800055e:	464a      	mov	r2, r9
 8000560:	2a00      	cmp	r2, #0
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0x52>
 8000564:	e0b8      	b.n	80006d8 <__aeabi_dadd+0x1c4>
 8000566:	4ac5      	ldr	r2, [pc, #788]	; (800087c <__aeabi_dadd+0x368>)
 8000568:	4296      	cmp	r6, r2
 800056a:	d100      	bne.n	800056e <__aeabi_dadd+0x5a>
 800056c:	e11c      	b.n	80007a8 <__aeabi_dadd+0x294>
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	003c      	movs	r4, r7
 8000572:	0412      	lsls	r2, r2, #16
 8000574:	4314      	orrs	r4, r2
 8000576:	46a0      	mov	r8, r4
 8000578:	4662      	mov	r2, ip
 800057a:	2a38      	cmp	r2, #56	; 0x38
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0x6c>
 800057e:	e161      	b.n	8000844 <__aeabi_dadd+0x330>
 8000580:	2a1f      	cmp	r2, #31
 8000582:	dd00      	ble.n	8000586 <__aeabi_dadd+0x72>
 8000584:	e1cc      	b.n	8000920 <__aeabi_dadd+0x40c>
 8000586:	4664      	mov	r4, ip
 8000588:	2220      	movs	r2, #32
 800058a:	1b12      	subs	r2, r2, r4
 800058c:	4644      	mov	r4, r8
 800058e:	4094      	lsls	r4, r2
 8000590:	000f      	movs	r7, r1
 8000592:	46a1      	mov	r9, r4
 8000594:	4664      	mov	r4, ip
 8000596:	4091      	lsls	r1, r2
 8000598:	40e7      	lsrs	r7, r4
 800059a:	464c      	mov	r4, r9
 800059c:	1e4a      	subs	r2, r1, #1
 800059e:	4191      	sbcs	r1, r2
 80005a0:	433c      	orrs	r4, r7
 80005a2:	4642      	mov	r2, r8
 80005a4:	4321      	orrs	r1, r4
 80005a6:	4664      	mov	r4, ip
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	1a80      	subs	r0, r0, r2
 80005ac:	1a5c      	subs	r4, r3, r1
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	419b      	sbcs	r3, r3
 80005b2:	425f      	negs	r7, r3
 80005b4:	1bc7      	subs	r7, r0, r7
 80005b6:	023b      	lsls	r3, r7, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0xa8>
 80005ba:	e0d0      	b.n	800075e <__aeabi_dadd+0x24a>
 80005bc:	027f      	lsls	r7, r7, #9
 80005be:	0a7f      	lsrs	r7, r7, #9
 80005c0:	2f00      	cmp	r7, #0
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0xb2>
 80005c4:	e0ff      	b.n	80007c6 <__aeabi_dadd+0x2b2>
 80005c6:	0038      	movs	r0, r7
 80005c8:	f001 fe3c 	bl	8002244 <__clzsi2>
 80005cc:	0001      	movs	r1, r0
 80005ce:	3908      	subs	r1, #8
 80005d0:	2320      	movs	r3, #32
 80005d2:	0022      	movs	r2, r4
 80005d4:	1a5b      	subs	r3, r3, r1
 80005d6:	408f      	lsls	r7, r1
 80005d8:	40da      	lsrs	r2, r3
 80005da:	408c      	lsls	r4, r1
 80005dc:	4317      	orrs	r7, r2
 80005de:	42b1      	cmp	r1, r6
 80005e0:	da00      	bge.n	80005e4 <__aeabi_dadd+0xd0>
 80005e2:	e0ff      	b.n	80007e4 <__aeabi_dadd+0x2d0>
 80005e4:	1b89      	subs	r1, r1, r6
 80005e6:	1c4b      	adds	r3, r1, #1
 80005e8:	2b1f      	cmp	r3, #31
 80005ea:	dd00      	ble.n	80005ee <__aeabi_dadd+0xda>
 80005ec:	e0a8      	b.n	8000740 <__aeabi_dadd+0x22c>
 80005ee:	2220      	movs	r2, #32
 80005f0:	0039      	movs	r1, r7
 80005f2:	1ad2      	subs	r2, r2, r3
 80005f4:	0020      	movs	r0, r4
 80005f6:	4094      	lsls	r4, r2
 80005f8:	4091      	lsls	r1, r2
 80005fa:	40d8      	lsrs	r0, r3
 80005fc:	1e62      	subs	r2, r4, #1
 80005fe:	4194      	sbcs	r4, r2
 8000600:	40df      	lsrs	r7, r3
 8000602:	2600      	movs	r6, #0
 8000604:	4301      	orrs	r1, r0
 8000606:	430c      	orrs	r4, r1
 8000608:	0763      	lsls	r3, r4, #29
 800060a:	d009      	beq.n	8000620 <__aeabi_dadd+0x10c>
 800060c:	230f      	movs	r3, #15
 800060e:	4023      	ands	r3, r4
 8000610:	2b04      	cmp	r3, #4
 8000612:	d005      	beq.n	8000620 <__aeabi_dadd+0x10c>
 8000614:	1d23      	adds	r3, r4, #4
 8000616:	42a3      	cmp	r3, r4
 8000618:	41a4      	sbcs	r4, r4
 800061a:	4264      	negs	r4, r4
 800061c:	193f      	adds	r7, r7, r4
 800061e:	001c      	movs	r4, r3
 8000620:	023b      	lsls	r3, r7, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0x112>
 8000624:	e09e      	b.n	8000764 <__aeabi_dadd+0x250>
 8000626:	4b95      	ldr	r3, [pc, #596]	; (800087c <__aeabi_dadd+0x368>)
 8000628:	3601      	adds	r6, #1
 800062a:	429e      	cmp	r6, r3
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x11c>
 800062e:	e0b7      	b.n	80007a0 <__aeabi_dadd+0x28c>
 8000630:	4a93      	ldr	r2, [pc, #588]	; (8000880 <__aeabi_dadd+0x36c>)
 8000632:	08e4      	lsrs	r4, r4, #3
 8000634:	4017      	ands	r7, r2
 8000636:	077b      	lsls	r3, r7, #29
 8000638:	0571      	lsls	r1, r6, #21
 800063a:	027f      	lsls	r7, r7, #9
 800063c:	4323      	orrs	r3, r4
 800063e:	0b3f      	lsrs	r7, r7, #12
 8000640:	0d4a      	lsrs	r2, r1, #21
 8000642:	0512      	lsls	r2, r2, #20
 8000644:	433a      	orrs	r2, r7
 8000646:	07ed      	lsls	r5, r5, #31
 8000648:	432a      	orrs	r2, r5
 800064a:	0018      	movs	r0, r3
 800064c:	0011      	movs	r1, r2
 800064e:	bce0      	pop	{r5, r6, r7}
 8000650:	46ba      	mov	sl, r7
 8000652:	46b1      	mov	r9, r6
 8000654:	46a8      	mov	r8, r5
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	2c00      	cmp	r4, #0
 800065a:	d04b      	beq.n	80006f4 <__aeabi_dadd+0x1e0>
 800065c:	464c      	mov	r4, r9
 800065e:	1ba4      	subs	r4, r4, r6
 8000660:	46a4      	mov	ip, r4
 8000662:	2e00      	cmp	r6, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_dadd+0x154>
 8000666:	e123      	b.n	80008b0 <__aeabi_dadd+0x39c>
 8000668:	0004      	movs	r4, r0
 800066a:	431c      	orrs	r4, r3
 800066c:	d100      	bne.n	8000670 <__aeabi_dadd+0x15c>
 800066e:	e1af      	b.n	80009d0 <__aeabi_dadd+0x4bc>
 8000670:	4662      	mov	r2, ip
 8000672:	1e54      	subs	r4, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x166>
 8000678:	e215      	b.n	8000aa6 <__aeabi_dadd+0x592>
 800067a:	4d80      	ldr	r5, [pc, #512]	; (800087c <__aeabi_dadd+0x368>)
 800067c:	45ac      	cmp	ip, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x16e>
 8000680:	e1c8      	b.n	8000a14 <__aeabi_dadd+0x500>
 8000682:	46a4      	mov	ip, r4
 8000684:	e11b      	b.n	80008be <__aeabi_dadd+0x3aa>
 8000686:	464a      	mov	r2, r9
 8000688:	1ab2      	subs	r2, r6, r2
 800068a:	4694      	mov	ip, r2
 800068c:	2a00      	cmp	r2, #0
 800068e:	dc00      	bgt.n	8000692 <__aeabi_dadd+0x17e>
 8000690:	e0ac      	b.n	80007ec <__aeabi_dadd+0x2d8>
 8000692:	464a      	mov	r2, r9
 8000694:	2a00      	cmp	r2, #0
 8000696:	d043      	beq.n	8000720 <__aeabi_dadd+0x20c>
 8000698:	4a78      	ldr	r2, [pc, #480]	; (800087c <__aeabi_dadd+0x368>)
 800069a:	4296      	cmp	r6, r2
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x18c>
 800069e:	e1af      	b.n	8000a00 <__aeabi_dadd+0x4ec>
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	003c      	movs	r4, r7
 80006a4:	0412      	lsls	r2, r2, #16
 80006a6:	4314      	orrs	r4, r2
 80006a8:	46a0      	mov	r8, r4
 80006aa:	4662      	mov	r2, ip
 80006ac:	2a38      	cmp	r2, #56	; 0x38
 80006ae:	dc67      	bgt.n	8000780 <__aeabi_dadd+0x26c>
 80006b0:	2a1f      	cmp	r2, #31
 80006b2:	dc00      	bgt.n	80006b6 <__aeabi_dadd+0x1a2>
 80006b4:	e15f      	b.n	8000976 <__aeabi_dadd+0x462>
 80006b6:	4647      	mov	r7, r8
 80006b8:	3a20      	subs	r2, #32
 80006ba:	40d7      	lsrs	r7, r2
 80006bc:	4662      	mov	r2, ip
 80006be:	2a20      	cmp	r2, #32
 80006c0:	d005      	beq.n	80006ce <__aeabi_dadd+0x1ba>
 80006c2:	4664      	mov	r4, ip
 80006c4:	2240      	movs	r2, #64	; 0x40
 80006c6:	1b12      	subs	r2, r2, r4
 80006c8:	4644      	mov	r4, r8
 80006ca:	4094      	lsls	r4, r2
 80006cc:	4321      	orrs	r1, r4
 80006ce:	1e4a      	subs	r2, r1, #1
 80006d0:	4191      	sbcs	r1, r2
 80006d2:	000c      	movs	r4, r1
 80006d4:	433c      	orrs	r4, r7
 80006d6:	e057      	b.n	8000788 <__aeabi_dadd+0x274>
 80006d8:	003a      	movs	r2, r7
 80006da:	430a      	orrs	r2, r1
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dadd+0x1cc>
 80006de:	e105      	b.n	80008ec <__aeabi_dadd+0x3d8>
 80006e0:	0022      	movs	r2, r4
 80006e2:	3a01      	subs	r2, #1
 80006e4:	2c01      	cmp	r4, #1
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x1d6>
 80006e8:	e182      	b.n	80009f0 <__aeabi_dadd+0x4dc>
 80006ea:	4c64      	ldr	r4, [pc, #400]	; (800087c <__aeabi_dadd+0x368>)
 80006ec:	45a4      	cmp	ip, r4
 80006ee:	d05b      	beq.n	80007a8 <__aeabi_dadd+0x294>
 80006f0:	4694      	mov	ip, r2
 80006f2:	e741      	b.n	8000578 <__aeabi_dadd+0x64>
 80006f4:	4c63      	ldr	r4, [pc, #396]	; (8000884 <__aeabi_dadd+0x370>)
 80006f6:	1c77      	adds	r7, r6, #1
 80006f8:	4227      	tst	r7, r4
 80006fa:	d000      	beq.n	80006fe <__aeabi_dadd+0x1ea>
 80006fc:	e0c4      	b.n	8000888 <__aeabi_dadd+0x374>
 80006fe:	0004      	movs	r4, r0
 8000700:	431c      	orrs	r4, r3
 8000702:	2e00      	cmp	r6, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_dadd+0x1f4>
 8000706:	e169      	b.n	80009dc <__aeabi_dadd+0x4c8>
 8000708:	2c00      	cmp	r4, #0
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x1fa>
 800070c:	e1bf      	b.n	8000a8e <__aeabi_dadd+0x57a>
 800070e:	4644      	mov	r4, r8
 8000710:	430c      	orrs	r4, r1
 8000712:	d000      	beq.n	8000716 <__aeabi_dadd+0x202>
 8000714:	e1d0      	b.n	8000ab8 <__aeabi_dadd+0x5a4>
 8000716:	0742      	lsls	r2, r0, #29
 8000718:	08db      	lsrs	r3, r3, #3
 800071a:	4313      	orrs	r3, r2
 800071c:	08c0      	lsrs	r0, r0, #3
 800071e:	e029      	b.n	8000774 <__aeabi_dadd+0x260>
 8000720:	003a      	movs	r2, r7
 8000722:	430a      	orrs	r2, r1
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x214>
 8000726:	e170      	b.n	8000a0a <__aeabi_dadd+0x4f6>
 8000728:	4662      	mov	r2, ip
 800072a:	4664      	mov	r4, ip
 800072c:	3a01      	subs	r2, #1
 800072e:	2c01      	cmp	r4, #1
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x220>
 8000732:	e0e0      	b.n	80008f6 <__aeabi_dadd+0x3e2>
 8000734:	4c51      	ldr	r4, [pc, #324]	; (800087c <__aeabi_dadd+0x368>)
 8000736:	45a4      	cmp	ip, r4
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x228>
 800073a:	e161      	b.n	8000a00 <__aeabi_dadd+0x4ec>
 800073c:	4694      	mov	ip, r2
 800073e:	e7b4      	b.n	80006aa <__aeabi_dadd+0x196>
 8000740:	003a      	movs	r2, r7
 8000742:	391f      	subs	r1, #31
 8000744:	40ca      	lsrs	r2, r1
 8000746:	0011      	movs	r1, r2
 8000748:	2b20      	cmp	r3, #32
 800074a:	d003      	beq.n	8000754 <__aeabi_dadd+0x240>
 800074c:	2240      	movs	r2, #64	; 0x40
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	409f      	lsls	r7, r3
 8000752:	433c      	orrs	r4, r7
 8000754:	1e63      	subs	r3, r4, #1
 8000756:	419c      	sbcs	r4, r3
 8000758:	2700      	movs	r7, #0
 800075a:	2600      	movs	r6, #0
 800075c:	430c      	orrs	r4, r1
 800075e:	0763      	lsls	r3, r4, #29
 8000760:	d000      	beq.n	8000764 <__aeabi_dadd+0x250>
 8000762:	e753      	b.n	800060c <__aeabi_dadd+0xf8>
 8000764:	46b4      	mov	ip, r6
 8000766:	08e4      	lsrs	r4, r4, #3
 8000768:	077b      	lsls	r3, r7, #29
 800076a:	4323      	orrs	r3, r4
 800076c:	08f8      	lsrs	r0, r7, #3
 800076e:	4a43      	ldr	r2, [pc, #268]	; (800087c <__aeabi_dadd+0x368>)
 8000770:	4594      	cmp	ip, r2
 8000772:	d01d      	beq.n	80007b0 <__aeabi_dadd+0x29c>
 8000774:	4662      	mov	r2, ip
 8000776:	0307      	lsls	r7, r0, #12
 8000778:	0552      	lsls	r2, r2, #21
 800077a:	0b3f      	lsrs	r7, r7, #12
 800077c:	0d52      	lsrs	r2, r2, #21
 800077e:	e760      	b.n	8000642 <__aeabi_dadd+0x12e>
 8000780:	4644      	mov	r4, r8
 8000782:	430c      	orrs	r4, r1
 8000784:	1e62      	subs	r2, r4, #1
 8000786:	4194      	sbcs	r4, r2
 8000788:	18e4      	adds	r4, r4, r3
 800078a:	429c      	cmp	r4, r3
 800078c:	419b      	sbcs	r3, r3
 800078e:	425f      	negs	r7, r3
 8000790:	183f      	adds	r7, r7, r0
 8000792:	023b      	lsls	r3, r7, #8
 8000794:	d5e3      	bpl.n	800075e <__aeabi_dadd+0x24a>
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <__aeabi_dadd+0x368>)
 8000798:	3601      	adds	r6, #1
 800079a:	429e      	cmp	r6, r3
 800079c:	d000      	beq.n	80007a0 <__aeabi_dadd+0x28c>
 800079e:	e0b5      	b.n	800090c <__aeabi_dadd+0x3f8>
 80007a0:	0032      	movs	r2, r6
 80007a2:	2700      	movs	r7, #0
 80007a4:	2300      	movs	r3, #0
 80007a6:	e74c      	b.n	8000642 <__aeabi_dadd+0x12e>
 80007a8:	0742      	lsls	r2, r0, #29
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	08c0      	lsrs	r0, r0, #3
 80007b0:	001a      	movs	r2, r3
 80007b2:	4302      	orrs	r2, r0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_dadd+0x2a4>
 80007b6:	e1e1      	b.n	8000b7c <__aeabi_dadd+0x668>
 80007b8:	2780      	movs	r7, #128	; 0x80
 80007ba:	033f      	lsls	r7, r7, #12
 80007bc:	4307      	orrs	r7, r0
 80007be:	033f      	lsls	r7, r7, #12
 80007c0:	4a2e      	ldr	r2, [pc, #184]	; (800087c <__aeabi_dadd+0x368>)
 80007c2:	0b3f      	lsrs	r7, r7, #12
 80007c4:	e73d      	b.n	8000642 <__aeabi_dadd+0x12e>
 80007c6:	0020      	movs	r0, r4
 80007c8:	f001 fd3c 	bl	8002244 <__clzsi2>
 80007cc:	0001      	movs	r1, r0
 80007ce:	3118      	adds	r1, #24
 80007d0:	291f      	cmp	r1, #31
 80007d2:	dc00      	bgt.n	80007d6 <__aeabi_dadd+0x2c2>
 80007d4:	e6fc      	b.n	80005d0 <__aeabi_dadd+0xbc>
 80007d6:	3808      	subs	r0, #8
 80007d8:	4084      	lsls	r4, r0
 80007da:	0027      	movs	r7, r4
 80007dc:	2400      	movs	r4, #0
 80007de:	42b1      	cmp	r1, r6
 80007e0:	db00      	blt.n	80007e4 <__aeabi_dadd+0x2d0>
 80007e2:	e6ff      	b.n	80005e4 <__aeabi_dadd+0xd0>
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <__aeabi_dadd+0x36c>)
 80007e6:	1a76      	subs	r6, r6, r1
 80007e8:	4017      	ands	r7, r2
 80007ea:	e70d      	b.n	8000608 <__aeabi_dadd+0xf4>
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d02f      	beq.n	8000850 <__aeabi_dadd+0x33c>
 80007f0:	464a      	mov	r2, r9
 80007f2:	1b92      	subs	r2, r2, r6
 80007f4:	4694      	mov	ip, r2
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_dadd+0x2e8>
 80007fa:	e0ad      	b.n	8000958 <__aeabi_dadd+0x444>
 80007fc:	4a1f      	ldr	r2, [pc, #124]	; (800087c <__aeabi_dadd+0x368>)
 80007fe:	4591      	cmp	r9, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x2f0>
 8000802:	e10f      	b.n	8000a24 <__aeabi_dadd+0x510>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	0412      	lsls	r2, r2, #16
 8000808:	4310      	orrs	r0, r2
 800080a:	4662      	mov	r2, ip
 800080c:	2a38      	cmp	r2, #56	; 0x38
 800080e:	dd00      	ble.n	8000812 <__aeabi_dadd+0x2fe>
 8000810:	e10f      	b.n	8000a32 <__aeabi_dadd+0x51e>
 8000812:	2a1f      	cmp	r2, #31
 8000814:	dd00      	ble.n	8000818 <__aeabi_dadd+0x304>
 8000816:	e180      	b.n	8000b1a <__aeabi_dadd+0x606>
 8000818:	4664      	mov	r4, ip
 800081a:	2220      	movs	r2, #32
 800081c:	001e      	movs	r6, r3
 800081e:	1b12      	subs	r2, r2, r4
 8000820:	4667      	mov	r7, ip
 8000822:	0004      	movs	r4, r0
 8000824:	4093      	lsls	r3, r2
 8000826:	4094      	lsls	r4, r2
 8000828:	40fe      	lsrs	r6, r7
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	4193      	sbcs	r3, r2
 800082e:	40f8      	lsrs	r0, r7
 8000830:	4334      	orrs	r4, r6
 8000832:	431c      	orrs	r4, r3
 8000834:	4480      	add	r8, r0
 8000836:	1864      	adds	r4, r4, r1
 8000838:	428c      	cmp	r4, r1
 800083a:	41bf      	sbcs	r7, r7
 800083c:	427f      	negs	r7, r7
 800083e:	464e      	mov	r6, r9
 8000840:	4447      	add	r7, r8
 8000842:	e7a6      	b.n	8000792 <__aeabi_dadd+0x27e>
 8000844:	4642      	mov	r2, r8
 8000846:	430a      	orrs	r2, r1
 8000848:	0011      	movs	r1, r2
 800084a:	1e4a      	subs	r2, r1, #1
 800084c:	4191      	sbcs	r1, r2
 800084e:	e6ad      	b.n	80005ac <__aeabi_dadd+0x98>
 8000850:	4c0c      	ldr	r4, [pc, #48]	; (8000884 <__aeabi_dadd+0x370>)
 8000852:	1c72      	adds	r2, r6, #1
 8000854:	4222      	tst	r2, r4
 8000856:	d000      	beq.n	800085a <__aeabi_dadd+0x346>
 8000858:	e0a1      	b.n	800099e <__aeabi_dadd+0x48a>
 800085a:	0002      	movs	r2, r0
 800085c:	431a      	orrs	r2, r3
 800085e:	2e00      	cmp	r6, #0
 8000860:	d000      	beq.n	8000864 <__aeabi_dadd+0x350>
 8000862:	e0fa      	b.n	8000a5a <__aeabi_dadd+0x546>
 8000864:	2a00      	cmp	r2, #0
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x356>
 8000868:	e145      	b.n	8000af6 <__aeabi_dadd+0x5e2>
 800086a:	003a      	movs	r2, r7
 800086c:	430a      	orrs	r2, r1
 800086e:	d000      	beq.n	8000872 <__aeabi_dadd+0x35e>
 8000870:	e146      	b.n	8000b00 <__aeabi_dadd+0x5ec>
 8000872:	0742      	lsls	r2, r0, #29
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	4313      	orrs	r3, r2
 8000878:	08c0      	lsrs	r0, r0, #3
 800087a:	e77b      	b.n	8000774 <__aeabi_dadd+0x260>
 800087c:	000007ff 	.word	0x000007ff
 8000880:	ff7fffff 	.word	0xff7fffff
 8000884:	000007fe 	.word	0x000007fe
 8000888:	4647      	mov	r7, r8
 800088a:	1a5c      	subs	r4, r3, r1
 800088c:	1bc2      	subs	r2, r0, r7
 800088e:	42a3      	cmp	r3, r4
 8000890:	41bf      	sbcs	r7, r7
 8000892:	427f      	negs	r7, r7
 8000894:	46b9      	mov	r9, r7
 8000896:	0017      	movs	r7, r2
 8000898:	464a      	mov	r2, r9
 800089a:	1abf      	subs	r7, r7, r2
 800089c:	023a      	lsls	r2, r7, #8
 800089e:	d500      	bpl.n	80008a2 <__aeabi_dadd+0x38e>
 80008a0:	e08d      	b.n	80009be <__aeabi_dadd+0x4aa>
 80008a2:	0023      	movs	r3, r4
 80008a4:	433b      	orrs	r3, r7
 80008a6:	d000      	beq.n	80008aa <__aeabi_dadd+0x396>
 80008a8:	e68a      	b.n	80005c0 <__aeabi_dadd+0xac>
 80008aa:	2000      	movs	r0, #0
 80008ac:	2500      	movs	r5, #0
 80008ae:	e761      	b.n	8000774 <__aeabi_dadd+0x260>
 80008b0:	4cb4      	ldr	r4, [pc, #720]	; (8000b84 <__aeabi_dadd+0x670>)
 80008b2:	45a1      	cmp	r9, r4
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x3a4>
 80008b6:	e0ad      	b.n	8000a14 <__aeabi_dadd+0x500>
 80008b8:	2480      	movs	r4, #128	; 0x80
 80008ba:	0424      	lsls	r4, r4, #16
 80008bc:	4320      	orrs	r0, r4
 80008be:	4664      	mov	r4, ip
 80008c0:	2c38      	cmp	r4, #56	; 0x38
 80008c2:	dc3d      	bgt.n	8000940 <__aeabi_dadd+0x42c>
 80008c4:	4662      	mov	r2, ip
 80008c6:	2c1f      	cmp	r4, #31
 80008c8:	dd00      	ble.n	80008cc <__aeabi_dadd+0x3b8>
 80008ca:	e0b7      	b.n	8000a3c <__aeabi_dadd+0x528>
 80008cc:	2520      	movs	r5, #32
 80008ce:	001e      	movs	r6, r3
 80008d0:	1b2d      	subs	r5, r5, r4
 80008d2:	0004      	movs	r4, r0
 80008d4:	40ab      	lsls	r3, r5
 80008d6:	40ac      	lsls	r4, r5
 80008d8:	40d6      	lsrs	r6, r2
 80008da:	40d0      	lsrs	r0, r2
 80008dc:	4642      	mov	r2, r8
 80008de:	1e5d      	subs	r5, r3, #1
 80008e0:	41ab      	sbcs	r3, r5
 80008e2:	4334      	orrs	r4, r6
 80008e4:	1a12      	subs	r2, r2, r0
 80008e6:	4690      	mov	r8, r2
 80008e8:	4323      	orrs	r3, r4
 80008ea:	e02c      	b.n	8000946 <__aeabi_dadd+0x432>
 80008ec:	0742      	lsls	r2, r0, #29
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	08c0      	lsrs	r0, r0, #3
 80008f4:	e73b      	b.n	800076e <__aeabi_dadd+0x25a>
 80008f6:	185c      	adds	r4, r3, r1
 80008f8:	429c      	cmp	r4, r3
 80008fa:	419b      	sbcs	r3, r3
 80008fc:	4440      	add	r0, r8
 80008fe:	425b      	negs	r3, r3
 8000900:	18c7      	adds	r7, r0, r3
 8000902:	2601      	movs	r6, #1
 8000904:	023b      	lsls	r3, r7, #8
 8000906:	d400      	bmi.n	800090a <__aeabi_dadd+0x3f6>
 8000908:	e729      	b.n	800075e <__aeabi_dadd+0x24a>
 800090a:	2602      	movs	r6, #2
 800090c:	4a9e      	ldr	r2, [pc, #632]	; (8000b88 <__aeabi_dadd+0x674>)
 800090e:	0863      	lsrs	r3, r4, #1
 8000910:	4017      	ands	r7, r2
 8000912:	2201      	movs	r2, #1
 8000914:	4014      	ands	r4, r2
 8000916:	431c      	orrs	r4, r3
 8000918:	07fb      	lsls	r3, r7, #31
 800091a:	431c      	orrs	r4, r3
 800091c:	087f      	lsrs	r7, r7, #1
 800091e:	e673      	b.n	8000608 <__aeabi_dadd+0xf4>
 8000920:	4644      	mov	r4, r8
 8000922:	3a20      	subs	r2, #32
 8000924:	40d4      	lsrs	r4, r2
 8000926:	4662      	mov	r2, ip
 8000928:	2a20      	cmp	r2, #32
 800092a:	d005      	beq.n	8000938 <__aeabi_dadd+0x424>
 800092c:	4667      	mov	r7, ip
 800092e:	2240      	movs	r2, #64	; 0x40
 8000930:	1bd2      	subs	r2, r2, r7
 8000932:	4647      	mov	r7, r8
 8000934:	4097      	lsls	r7, r2
 8000936:	4339      	orrs	r1, r7
 8000938:	1e4a      	subs	r2, r1, #1
 800093a:	4191      	sbcs	r1, r2
 800093c:	4321      	orrs	r1, r4
 800093e:	e635      	b.n	80005ac <__aeabi_dadd+0x98>
 8000940:	4303      	orrs	r3, r0
 8000942:	1e58      	subs	r0, r3, #1
 8000944:	4183      	sbcs	r3, r0
 8000946:	1acc      	subs	r4, r1, r3
 8000948:	42a1      	cmp	r1, r4
 800094a:	41bf      	sbcs	r7, r7
 800094c:	4643      	mov	r3, r8
 800094e:	427f      	negs	r7, r7
 8000950:	4655      	mov	r5, sl
 8000952:	464e      	mov	r6, r9
 8000954:	1bdf      	subs	r7, r3, r7
 8000956:	e62e      	b.n	80005b6 <__aeabi_dadd+0xa2>
 8000958:	0002      	movs	r2, r0
 800095a:	431a      	orrs	r2, r3
 800095c:	d100      	bne.n	8000960 <__aeabi_dadd+0x44c>
 800095e:	e0bd      	b.n	8000adc <__aeabi_dadd+0x5c8>
 8000960:	4662      	mov	r2, ip
 8000962:	4664      	mov	r4, ip
 8000964:	3a01      	subs	r2, #1
 8000966:	2c01      	cmp	r4, #1
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x458>
 800096a:	e0e5      	b.n	8000b38 <__aeabi_dadd+0x624>
 800096c:	4c85      	ldr	r4, [pc, #532]	; (8000b84 <__aeabi_dadd+0x670>)
 800096e:	45a4      	cmp	ip, r4
 8000970:	d058      	beq.n	8000a24 <__aeabi_dadd+0x510>
 8000972:	4694      	mov	ip, r2
 8000974:	e749      	b.n	800080a <__aeabi_dadd+0x2f6>
 8000976:	4664      	mov	r4, ip
 8000978:	2220      	movs	r2, #32
 800097a:	1b12      	subs	r2, r2, r4
 800097c:	4644      	mov	r4, r8
 800097e:	4094      	lsls	r4, r2
 8000980:	000f      	movs	r7, r1
 8000982:	46a1      	mov	r9, r4
 8000984:	4664      	mov	r4, ip
 8000986:	4091      	lsls	r1, r2
 8000988:	40e7      	lsrs	r7, r4
 800098a:	464c      	mov	r4, r9
 800098c:	1e4a      	subs	r2, r1, #1
 800098e:	4191      	sbcs	r1, r2
 8000990:	433c      	orrs	r4, r7
 8000992:	4642      	mov	r2, r8
 8000994:	430c      	orrs	r4, r1
 8000996:	4661      	mov	r1, ip
 8000998:	40ca      	lsrs	r2, r1
 800099a:	1880      	adds	r0, r0, r2
 800099c:	e6f4      	b.n	8000788 <__aeabi_dadd+0x274>
 800099e:	4c79      	ldr	r4, [pc, #484]	; (8000b84 <__aeabi_dadd+0x670>)
 80009a0:	42a2      	cmp	r2, r4
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0x492>
 80009a4:	e6fd      	b.n	80007a2 <__aeabi_dadd+0x28e>
 80009a6:	1859      	adds	r1, r3, r1
 80009a8:	4299      	cmp	r1, r3
 80009aa:	419b      	sbcs	r3, r3
 80009ac:	4440      	add	r0, r8
 80009ae:	425f      	negs	r7, r3
 80009b0:	19c7      	adds	r7, r0, r7
 80009b2:	07fc      	lsls	r4, r7, #31
 80009b4:	0849      	lsrs	r1, r1, #1
 80009b6:	0016      	movs	r6, r2
 80009b8:	430c      	orrs	r4, r1
 80009ba:	087f      	lsrs	r7, r7, #1
 80009bc:	e6cf      	b.n	800075e <__aeabi_dadd+0x24a>
 80009be:	1acc      	subs	r4, r1, r3
 80009c0:	42a1      	cmp	r1, r4
 80009c2:	41bf      	sbcs	r7, r7
 80009c4:	4643      	mov	r3, r8
 80009c6:	427f      	negs	r7, r7
 80009c8:	1a18      	subs	r0, r3, r0
 80009ca:	4655      	mov	r5, sl
 80009cc:	1bc7      	subs	r7, r0, r7
 80009ce:	e5f7      	b.n	80005c0 <__aeabi_dadd+0xac>
 80009d0:	08c9      	lsrs	r1, r1, #3
 80009d2:	077b      	lsls	r3, r7, #29
 80009d4:	4655      	mov	r5, sl
 80009d6:	430b      	orrs	r3, r1
 80009d8:	08f8      	lsrs	r0, r7, #3
 80009da:	e6c8      	b.n	800076e <__aeabi_dadd+0x25a>
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x4ce>
 80009e0:	e081      	b.n	8000ae6 <__aeabi_dadd+0x5d2>
 80009e2:	4643      	mov	r3, r8
 80009e4:	430b      	orrs	r3, r1
 80009e6:	d115      	bne.n	8000a14 <__aeabi_dadd+0x500>
 80009e8:	2080      	movs	r0, #128	; 0x80
 80009ea:	2500      	movs	r5, #0
 80009ec:	0300      	lsls	r0, r0, #12
 80009ee:	e6e3      	b.n	80007b8 <__aeabi_dadd+0x2a4>
 80009f0:	1a5c      	subs	r4, r3, r1
 80009f2:	42a3      	cmp	r3, r4
 80009f4:	419b      	sbcs	r3, r3
 80009f6:	1bc7      	subs	r7, r0, r7
 80009f8:	425b      	negs	r3, r3
 80009fa:	2601      	movs	r6, #1
 80009fc:	1aff      	subs	r7, r7, r3
 80009fe:	e5da      	b.n	80005b6 <__aeabi_dadd+0xa2>
 8000a00:	0742      	lsls	r2, r0, #29
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	08c0      	lsrs	r0, r0, #3
 8000a08:	e6d2      	b.n	80007b0 <__aeabi_dadd+0x29c>
 8000a0a:	0742      	lsls	r2, r0, #29
 8000a0c:	08db      	lsrs	r3, r3, #3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	08c0      	lsrs	r0, r0, #3
 8000a12:	e6ac      	b.n	800076e <__aeabi_dadd+0x25a>
 8000a14:	4643      	mov	r3, r8
 8000a16:	4642      	mov	r2, r8
 8000a18:	08c9      	lsrs	r1, r1, #3
 8000a1a:	075b      	lsls	r3, r3, #29
 8000a1c:	4655      	mov	r5, sl
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	08d0      	lsrs	r0, r2, #3
 8000a22:	e6c5      	b.n	80007b0 <__aeabi_dadd+0x29c>
 8000a24:	4643      	mov	r3, r8
 8000a26:	4642      	mov	r2, r8
 8000a28:	075b      	lsls	r3, r3, #29
 8000a2a:	08c9      	lsrs	r1, r1, #3
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	08d0      	lsrs	r0, r2, #3
 8000a30:	e6be      	b.n	80007b0 <__aeabi_dadd+0x29c>
 8000a32:	4303      	orrs	r3, r0
 8000a34:	001c      	movs	r4, r3
 8000a36:	1e63      	subs	r3, r4, #1
 8000a38:	419c      	sbcs	r4, r3
 8000a3a:	e6fc      	b.n	8000836 <__aeabi_dadd+0x322>
 8000a3c:	0002      	movs	r2, r0
 8000a3e:	3c20      	subs	r4, #32
 8000a40:	40e2      	lsrs	r2, r4
 8000a42:	0014      	movs	r4, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	2a20      	cmp	r2, #32
 8000a48:	d003      	beq.n	8000a52 <__aeabi_dadd+0x53e>
 8000a4a:	2540      	movs	r5, #64	; 0x40
 8000a4c:	1aad      	subs	r5, r5, r2
 8000a4e:	40a8      	lsls	r0, r5
 8000a50:	4303      	orrs	r3, r0
 8000a52:	1e58      	subs	r0, r3, #1
 8000a54:	4183      	sbcs	r3, r0
 8000a56:	4323      	orrs	r3, r4
 8000a58:	e775      	b.n	8000946 <__aeabi_dadd+0x432>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d0e2      	beq.n	8000a24 <__aeabi_dadd+0x510>
 8000a5e:	003a      	movs	r2, r7
 8000a60:	430a      	orrs	r2, r1
 8000a62:	d0cd      	beq.n	8000a00 <__aeabi_dadd+0x4ec>
 8000a64:	0742      	lsls	r2, r0, #29
 8000a66:	08db      	lsrs	r3, r3, #3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0312      	lsls	r2, r2, #12
 8000a70:	4210      	tst	r0, r2
 8000a72:	d006      	beq.n	8000a82 <__aeabi_dadd+0x56e>
 8000a74:	08fc      	lsrs	r4, r7, #3
 8000a76:	4214      	tst	r4, r2
 8000a78:	d103      	bne.n	8000a82 <__aeabi_dadd+0x56e>
 8000a7a:	0020      	movs	r0, r4
 8000a7c:	08cb      	lsrs	r3, r1, #3
 8000a7e:	077a      	lsls	r2, r7, #29
 8000a80:	4313      	orrs	r3, r2
 8000a82:	0f5a      	lsrs	r2, r3, #29
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	0752      	lsls	r2, r2, #29
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	e690      	b.n	80007b0 <__aeabi_dadd+0x29c>
 8000a8e:	4643      	mov	r3, r8
 8000a90:	430b      	orrs	r3, r1
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dadd+0x582>
 8000a94:	e709      	b.n	80008aa <__aeabi_dadd+0x396>
 8000a96:	4643      	mov	r3, r8
 8000a98:	4642      	mov	r2, r8
 8000a9a:	08c9      	lsrs	r1, r1, #3
 8000a9c:	075b      	lsls	r3, r3, #29
 8000a9e:	4655      	mov	r5, sl
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	08d0      	lsrs	r0, r2, #3
 8000aa4:	e666      	b.n	8000774 <__aeabi_dadd+0x260>
 8000aa6:	1acc      	subs	r4, r1, r3
 8000aa8:	42a1      	cmp	r1, r4
 8000aaa:	4189      	sbcs	r1, r1
 8000aac:	1a3f      	subs	r7, r7, r0
 8000aae:	4249      	negs	r1, r1
 8000ab0:	4655      	mov	r5, sl
 8000ab2:	2601      	movs	r6, #1
 8000ab4:	1a7f      	subs	r7, r7, r1
 8000ab6:	e57e      	b.n	80005b6 <__aeabi_dadd+0xa2>
 8000ab8:	4642      	mov	r2, r8
 8000aba:	1a5c      	subs	r4, r3, r1
 8000abc:	1a87      	subs	r7, r0, r2
 8000abe:	42a3      	cmp	r3, r4
 8000ac0:	4192      	sbcs	r2, r2
 8000ac2:	4252      	negs	r2, r2
 8000ac4:	1abf      	subs	r7, r7, r2
 8000ac6:	023a      	lsls	r2, r7, #8
 8000ac8:	d53d      	bpl.n	8000b46 <__aeabi_dadd+0x632>
 8000aca:	1acc      	subs	r4, r1, r3
 8000acc:	42a1      	cmp	r1, r4
 8000ace:	4189      	sbcs	r1, r1
 8000ad0:	4643      	mov	r3, r8
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	1a1f      	subs	r7, r3, r0
 8000ad6:	4655      	mov	r5, sl
 8000ad8:	1a7f      	subs	r7, r7, r1
 8000ada:	e595      	b.n	8000608 <__aeabi_dadd+0xf4>
 8000adc:	077b      	lsls	r3, r7, #29
 8000ade:	08c9      	lsrs	r1, r1, #3
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	08f8      	lsrs	r0, r7, #3
 8000ae4:	e643      	b.n	800076e <__aeabi_dadd+0x25a>
 8000ae6:	4644      	mov	r4, r8
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	430c      	orrs	r4, r1
 8000aec:	d130      	bne.n	8000b50 <__aeabi_dadd+0x63c>
 8000aee:	0742      	lsls	r2, r0, #29
 8000af0:	4313      	orrs	r3, r2
 8000af2:	08c0      	lsrs	r0, r0, #3
 8000af4:	e65c      	b.n	80007b0 <__aeabi_dadd+0x29c>
 8000af6:	077b      	lsls	r3, r7, #29
 8000af8:	08c9      	lsrs	r1, r1, #3
 8000afa:	430b      	orrs	r3, r1
 8000afc:	08f8      	lsrs	r0, r7, #3
 8000afe:	e639      	b.n	8000774 <__aeabi_dadd+0x260>
 8000b00:	185c      	adds	r4, r3, r1
 8000b02:	429c      	cmp	r4, r3
 8000b04:	419b      	sbcs	r3, r3
 8000b06:	4440      	add	r0, r8
 8000b08:	425b      	negs	r3, r3
 8000b0a:	18c7      	adds	r7, r0, r3
 8000b0c:	023b      	lsls	r3, r7, #8
 8000b0e:	d400      	bmi.n	8000b12 <__aeabi_dadd+0x5fe>
 8000b10:	e625      	b.n	800075e <__aeabi_dadd+0x24a>
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <__aeabi_dadd+0x674>)
 8000b14:	2601      	movs	r6, #1
 8000b16:	401f      	ands	r7, r3
 8000b18:	e621      	b.n	800075e <__aeabi_dadd+0x24a>
 8000b1a:	0004      	movs	r4, r0
 8000b1c:	3a20      	subs	r2, #32
 8000b1e:	40d4      	lsrs	r4, r2
 8000b20:	4662      	mov	r2, ip
 8000b22:	2a20      	cmp	r2, #32
 8000b24:	d004      	beq.n	8000b30 <__aeabi_dadd+0x61c>
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	4666      	mov	r6, ip
 8000b2a:	1b92      	subs	r2, r2, r6
 8000b2c:	4090      	lsls	r0, r2
 8000b2e:	4303      	orrs	r3, r0
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	4193      	sbcs	r3, r2
 8000b34:	431c      	orrs	r4, r3
 8000b36:	e67e      	b.n	8000836 <__aeabi_dadd+0x322>
 8000b38:	185c      	adds	r4, r3, r1
 8000b3a:	428c      	cmp	r4, r1
 8000b3c:	4189      	sbcs	r1, r1
 8000b3e:	4440      	add	r0, r8
 8000b40:	4249      	negs	r1, r1
 8000b42:	1847      	adds	r7, r0, r1
 8000b44:	e6dd      	b.n	8000902 <__aeabi_dadd+0x3ee>
 8000b46:	0023      	movs	r3, r4
 8000b48:	433b      	orrs	r3, r7
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x63a>
 8000b4c:	e6ad      	b.n	80008aa <__aeabi_dadd+0x396>
 8000b4e:	e606      	b.n	800075e <__aeabi_dadd+0x24a>
 8000b50:	0744      	lsls	r4, r0, #29
 8000b52:	4323      	orrs	r3, r4
 8000b54:	2480      	movs	r4, #128	; 0x80
 8000b56:	08c0      	lsrs	r0, r0, #3
 8000b58:	0324      	lsls	r4, r4, #12
 8000b5a:	4220      	tst	r0, r4
 8000b5c:	d008      	beq.n	8000b70 <__aeabi_dadd+0x65c>
 8000b5e:	4642      	mov	r2, r8
 8000b60:	08d6      	lsrs	r6, r2, #3
 8000b62:	4226      	tst	r6, r4
 8000b64:	d104      	bne.n	8000b70 <__aeabi_dadd+0x65c>
 8000b66:	4655      	mov	r5, sl
 8000b68:	0030      	movs	r0, r6
 8000b6a:	08cb      	lsrs	r3, r1, #3
 8000b6c:	0751      	lsls	r1, r2, #29
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	0f5a      	lsrs	r2, r3, #29
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	0752      	lsls	r2, r2, #29
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	e619      	b.n	80007b0 <__aeabi_dadd+0x29c>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4a01      	ldr	r2, [pc, #4]	; (8000b84 <__aeabi_dadd+0x670>)
 8000b80:	001f      	movs	r7, r3
 8000b82:	e55e      	b.n	8000642 <__aeabi_dadd+0x12e>
 8000b84:	000007ff 	.word	0x000007ff
 8000b88:	ff7fffff 	.word	0xff7fffff

08000b8c <__aeabi_ddiv>:
 8000b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8e:	4657      	mov	r7, sl
 8000b90:	464e      	mov	r6, r9
 8000b92:	4645      	mov	r5, r8
 8000b94:	46de      	mov	lr, fp
 8000b96:	b5e0      	push	{r5, r6, r7, lr}
 8000b98:	4681      	mov	r9, r0
 8000b9a:	0005      	movs	r5, r0
 8000b9c:	030c      	lsls	r4, r1, #12
 8000b9e:	0048      	lsls	r0, r1, #1
 8000ba0:	4692      	mov	sl, r2
 8000ba2:	001f      	movs	r7, r3
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	0b24      	lsrs	r4, r4, #12
 8000ba8:	0d40      	lsrs	r0, r0, #21
 8000baa:	0fce      	lsrs	r6, r1, #31
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_ddiv+0x26>
 8000bb0:	e156      	b.n	8000e60 <__aeabi_ddiv+0x2d4>
 8000bb2:	4bd4      	ldr	r3, [pc, #848]	; (8000f04 <__aeabi_ddiv+0x378>)
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	d100      	bne.n	8000bba <__aeabi_ddiv+0x2e>
 8000bb8:	e172      	b.n	8000ea0 <__aeabi_ddiv+0x314>
 8000bba:	0f6b      	lsrs	r3, r5, #29
 8000bbc:	00e4      	lsls	r4, r4, #3
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	041b      	lsls	r3, r3, #16
 8000bc4:	4323      	orrs	r3, r4
 8000bc6:	4698      	mov	r8, r3
 8000bc8:	4bcf      	ldr	r3, [pc, #828]	; (8000f08 <__aeabi_ddiv+0x37c>)
 8000bca:	00ed      	lsls	r5, r5, #3
 8000bcc:	469b      	mov	fp, r3
 8000bce:	2300      	movs	r3, #0
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	4483      	add	fp, r0
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	033c      	lsls	r4, r7, #12
 8000bd8:	007b      	lsls	r3, r7, #1
 8000bda:	4650      	mov	r0, sl
 8000bdc:	0b24      	lsrs	r4, r4, #12
 8000bde:	0d5b      	lsrs	r3, r3, #21
 8000be0:	0fff      	lsrs	r7, r7, #31
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_ddiv+0x5c>
 8000be6:	e11f      	b.n	8000e28 <__aeabi_ddiv+0x29c>
 8000be8:	4ac6      	ldr	r2, [pc, #792]	; (8000f04 <__aeabi_ddiv+0x378>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_ddiv+0x64>
 8000bee:	e162      	b.n	8000eb6 <__aeabi_ddiv+0x32a>
 8000bf0:	49c5      	ldr	r1, [pc, #788]	; (8000f08 <__aeabi_ddiv+0x37c>)
 8000bf2:	0f42      	lsrs	r2, r0, #29
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	00e4      	lsls	r4, r4, #3
 8000bf8:	4659      	mov	r1, fp
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	4463      	add	r3, ip
 8000c00:	0412      	lsls	r2, r2, #16
 8000c02:	1acb      	subs	r3, r1, r3
 8000c04:	4314      	orrs	r4, r2
 8000c06:	469b      	mov	fp, r3
 8000c08:	00c2      	lsls	r2, r0, #3
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	0033      	movs	r3, r6
 8000c0e:	407b      	eors	r3, r7
 8000c10:	469a      	mov	sl, r3
 8000c12:	464b      	mov	r3, r9
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d827      	bhi.n	8000c68 <__aeabi_ddiv+0xdc>
 8000c18:	49bc      	ldr	r1, [pc, #752]	; (8000f0c <__aeabi_ddiv+0x380>)
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	58cb      	ldr	r3, [r1, r3]
 8000c1e:	469f      	mov	pc, r3
 8000c20:	46b2      	mov	sl, r6
 8000c22:	9b00      	ldr	r3, [sp, #0]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d016      	beq.n	8000c56 <__aeabi_ddiv+0xca>
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0xa2>
 8000c2c:	e28e      	b.n	800114c <__aeabi_ddiv+0x5c0>
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d000      	beq.n	8000c34 <__aeabi_ddiv+0xa8>
 8000c32:	e0d9      	b.n	8000de8 <__aeabi_ddiv+0x25c>
 8000c34:	2300      	movs	r3, #0
 8000c36:	2400      	movs	r4, #0
 8000c38:	2500      	movs	r5, #0
 8000c3a:	4652      	mov	r2, sl
 8000c3c:	051b      	lsls	r3, r3, #20
 8000c3e:	4323      	orrs	r3, r4
 8000c40:	07d2      	lsls	r2, r2, #31
 8000c42:	4313      	orrs	r3, r2
 8000c44:	0028      	movs	r0, r5
 8000c46:	0019      	movs	r1, r3
 8000c48:	b005      	add	sp, #20
 8000c4a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c4c:	46bb      	mov	fp, r7
 8000c4e:	46b2      	mov	sl, r6
 8000c50:	46a9      	mov	r9, r5
 8000c52:	46a0      	mov	r8, r4
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c56:	2400      	movs	r4, #0
 8000c58:	2500      	movs	r5, #0
 8000c5a:	4baa      	ldr	r3, [pc, #680]	; (8000f04 <__aeabi_ddiv+0x378>)
 8000c5c:	e7ed      	b.n	8000c3a <__aeabi_ddiv+0xae>
 8000c5e:	46ba      	mov	sl, r7
 8000c60:	46a0      	mov	r8, r4
 8000c62:	0015      	movs	r5, r2
 8000c64:	9000      	str	r0, [sp, #0]
 8000c66:	e7dc      	b.n	8000c22 <__aeabi_ddiv+0x96>
 8000c68:	4544      	cmp	r4, r8
 8000c6a:	d200      	bcs.n	8000c6e <__aeabi_ddiv+0xe2>
 8000c6c:	e1c7      	b.n	8000ffe <__aeabi_ddiv+0x472>
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_ddiv+0xe6>
 8000c70:	e1c2      	b.n	8000ff8 <__aeabi_ddiv+0x46c>
 8000c72:	2301      	movs	r3, #1
 8000c74:	425b      	negs	r3, r3
 8000c76:	469c      	mov	ip, r3
 8000c78:	002e      	movs	r6, r5
 8000c7a:	4640      	mov	r0, r8
 8000c7c:	2500      	movs	r5, #0
 8000c7e:	44e3      	add	fp, ip
 8000c80:	0223      	lsls	r3, r4, #8
 8000c82:	0e14      	lsrs	r4, r2, #24
 8000c84:	431c      	orrs	r4, r3
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	4699      	mov	r9, r3
 8000c8a:	0423      	lsls	r3, r4, #16
 8000c8c:	0c1f      	lsrs	r7, r3, #16
 8000c8e:	0212      	lsls	r2, r2, #8
 8000c90:	4649      	mov	r1, r9
 8000c92:	9200      	str	r2, [sp, #0]
 8000c94:	9701      	str	r7, [sp, #4]
 8000c96:	f7ff fac3 	bl	8000220 <__aeabi_uidivmod>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	437a      	muls	r2, r7
 8000c9e:	040b      	lsls	r3, r1, #16
 8000ca0:	0c31      	lsrs	r1, r6, #16
 8000ca2:	4680      	mov	r8, r0
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	d907      	bls.n	8000cba <__aeabi_ddiv+0x12e>
 8000caa:	2301      	movs	r3, #1
 8000cac:	425b      	negs	r3, r3
 8000cae:	469c      	mov	ip, r3
 8000cb0:	1909      	adds	r1, r1, r4
 8000cb2:	44e0      	add	r8, ip
 8000cb4:	428c      	cmp	r4, r1
 8000cb6:	d800      	bhi.n	8000cba <__aeabi_ddiv+0x12e>
 8000cb8:	e207      	b.n	80010ca <__aeabi_ddiv+0x53e>
 8000cba:	1a88      	subs	r0, r1, r2
 8000cbc:	4649      	mov	r1, r9
 8000cbe:	f7ff faaf 	bl	8000220 <__aeabi_uidivmod>
 8000cc2:	0409      	lsls	r1, r1, #16
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	0431      	lsls	r1, r6, #16
 8000cc8:	4666      	mov	r6, ip
 8000cca:	9a01      	ldr	r2, [sp, #4]
 8000ccc:	0c09      	lsrs	r1, r1, #16
 8000cce:	4342      	muls	r2, r0
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	4331      	orrs	r1, r6
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	d904      	bls.n	8000ce2 <__aeabi_ddiv+0x156>
 8000cd8:	1909      	adds	r1, r1, r4
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	428c      	cmp	r4, r1
 8000cde:	d800      	bhi.n	8000ce2 <__aeabi_ddiv+0x156>
 8000ce0:	e1ed      	b.n	80010be <__aeabi_ddiv+0x532>
 8000ce2:	1a88      	subs	r0, r1, r2
 8000ce4:	4642      	mov	r2, r8
 8000ce6:	0412      	lsls	r2, r2, #16
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4690      	mov	r8, r2
 8000cec:	4641      	mov	r1, r8
 8000cee:	9b00      	ldr	r3, [sp, #0]
 8000cf0:	040e      	lsls	r6, r1, #16
 8000cf2:	0c1b      	lsrs	r3, r3, #16
 8000cf4:	001f      	movs	r7, r3
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	9b00      	ldr	r3, [sp, #0]
 8000cfa:	0c36      	lsrs	r6, r6, #16
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	0c19      	lsrs	r1, r3, #16
 8000d00:	000b      	movs	r3, r1
 8000d02:	4373      	muls	r3, r6
 8000d04:	0c12      	lsrs	r2, r2, #16
 8000d06:	437e      	muls	r6, r7
 8000d08:	9103      	str	r1, [sp, #12]
 8000d0a:	4351      	muls	r1, r2
 8000d0c:	437a      	muls	r2, r7
 8000d0e:	0c1f      	lsrs	r7, r3, #16
 8000d10:	46bc      	mov	ip, r7
 8000d12:	1876      	adds	r6, r6, r1
 8000d14:	4466      	add	r6, ip
 8000d16:	42b1      	cmp	r1, r6
 8000d18:	d903      	bls.n	8000d22 <__aeabi_ddiv+0x196>
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	0249      	lsls	r1, r1, #9
 8000d1e:	468c      	mov	ip, r1
 8000d20:	4462      	add	r2, ip
 8000d22:	0c31      	lsrs	r1, r6, #16
 8000d24:	188a      	adds	r2, r1, r2
 8000d26:	0431      	lsls	r1, r6, #16
 8000d28:	041e      	lsls	r6, r3, #16
 8000d2a:	0c36      	lsrs	r6, r6, #16
 8000d2c:	198e      	adds	r6, r1, r6
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	d302      	bcc.n	8000d38 <__aeabi_ddiv+0x1ac>
 8000d32:	d112      	bne.n	8000d5a <__aeabi_ddiv+0x1ce>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d210      	bcs.n	8000d5a <__aeabi_ddiv+0x1ce>
 8000d38:	4643      	mov	r3, r8
 8000d3a:	1e59      	subs	r1, r3, #1
 8000d3c:	9b00      	ldr	r3, [sp, #0]
 8000d3e:	469c      	mov	ip, r3
 8000d40:	4465      	add	r5, ip
 8000d42:	001f      	movs	r7, r3
 8000d44:	429d      	cmp	r5, r3
 8000d46:	419b      	sbcs	r3, r3
 8000d48:	425b      	negs	r3, r3
 8000d4a:	191b      	adds	r3, r3, r4
 8000d4c:	18c0      	adds	r0, r0, r3
 8000d4e:	4284      	cmp	r4, r0
 8000d50:	d200      	bcs.n	8000d54 <__aeabi_ddiv+0x1c8>
 8000d52:	e1a0      	b.n	8001096 <__aeabi_ddiv+0x50a>
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0x1cc>
 8000d56:	e19b      	b.n	8001090 <__aeabi_ddiv+0x504>
 8000d58:	4688      	mov	r8, r1
 8000d5a:	1bae      	subs	r6, r5, r6
 8000d5c:	42b5      	cmp	r5, r6
 8000d5e:	41ad      	sbcs	r5, r5
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	426d      	negs	r5, r5
 8000d64:	1b40      	subs	r0, r0, r5
 8000d66:	4284      	cmp	r4, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1e0>
 8000d6a:	e1d5      	b.n	8001118 <__aeabi_ddiv+0x58c>
 8000d6c:	4649      	mov	r1, r9
 8000d6e:	f7ff fa57 	bl	8000220 <__aeabi_uidivmod>
 8000d72:	9a01      	ldr	r2, [sp, #4]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c31      	lsrs	r1, r6, #16
 8000d7a:	0005      	movs	r5, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x1f8>
 8000d82:	e16c      	b.n	800105e <__aeabi_ddiv+0x4d2>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	4649      	mov	r1, r9
 8000d88:	f7ff fa4a 	bl	8000220 <__aeabi_uidivmod>
 8000d8c:	9a01      	ldr	r2, [sp, #4]
 8000d8e:	0436      	lsls	r6, r6, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c36      	lsrs	r6, r6, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430e      	orrs	r6, r1
 8000d9a:	42b2      	cmp	r2, r6
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x214>
 8000d9e:	e153      	b.n	8001048 <__aeabi_ddiv+0x4bc>
 8000da0:	9803      	ldr	r0, [sp, #12]
 8000da2:	1ab6      	subs	r6, r6, r2
 8000da4:	0002      	movs	r2, r0
 8000da6:	042d      	lsls	r5, r5, #16
 8000da8:	431d      	orrs	r5, r3
 8000daa:	9f02      	ldr	r7, [sp, #8]
 8000dac:	042b      	lsls	r3, r5, #16
 8000dae:	0c1b      	lsrs	r3, r3, #16
 8000db0:	435a      	muls	r2, r3
 8000db2:	437b      	muls	r3, r7
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c29      	lsrs	r1, r5, #16
 8000db8:	4348      	muls	r0, r1
 8000dba:	0c13      	lsrs	r3, r2, #16
 8000dbc:	4484      	add	ip, r0
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4379      	muls	r1, r7
 8000dc2:	4298      	cmp	r0, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x242>
 8000dc6:	2080      	movs	r0, #128	; 0x80
 8000dc8:	0240      	lsls	r0, r0, #9
 8000dca:	4684      	mov	ip, r0
 8000dcc:	4461      	add	r1, ip
 8000dce:	0c18      	lsrs	r0, r3, #16
 8000dd0:	0412      	lsls	r2, r2, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c12      	lsrs	r2, r2, #16
 8000dd6:	1841      	adds	r1, r0, r1
 8000dd8:	189b      	adds	r3, r3, r2
 8000dda:	428e      	cmp	r6, r1
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x254>
 8000dde:	e0ff      	b.n	8000fe0 <__aeabi_ddiv+0x454>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x258>
 8000de2:	e0fa      	b.n	8000fda <__aeabi_ddiv+0x44e>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431d      	orrs	r5, r3
 8000de8:	4a49      	ldr	r2, [pc, #292]	; (8000f10 <__aeabi_ddiv+0x384>)
 8000dea:	445a      	add	r2, fp
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x266>
 8000df0:	e0aa      	b.n	8000f48 <__aeabi_ddiv+0x3bc>
 8000df2:	076b      	lsls	r3, r5, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x26c>
 8000df6:	e13d      	b.n	8001074 <__aeabi_ddiv+0x4e8>
 8000df8:	08ed      	lsrs	r5, r5, #3
 8000dfa:	4643      	mov	r3, r8
 8000dfc:	01db      	lsls	r3, r3, #7
 8000dfe:	d506      	bpl.n	8000e0e <__aeabi_ddiv+0x282>
 8000e00:	4642      	mov	r2, r8
 8000e02:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <__aeabi_ddiv+0x388>)
 8000e04:	401a      	ands	r2, r3
 8000e06:	4690      	mov	r8, r2
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	00d2      	lsls	r2, r2, #3
 8000e0c:	445a      	add	r2, fp
 8000e0e:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <__aeabi_ddiv+0x38c>)
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dd00      	ble.n	8000e16 <__aeabi_ddiv+0x28a>
 8000e14:	e71f      	b.n	8000c56 <__aeabi_ddiv+0xca>
 8000e16:	4643      	mov	r3, r8
 8000e18:	075b      	lsls	r3, r3, #29
 8000e1a:	431d      	orrs	r5, r3
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	0552      	lsls	r2, r2, #21
 8000e20:	025c      	lsls	r4, r3, #9
 8000e22:	0b24      	lsrs	r4, r4, #12
 8000e24:	0d53      	lsrs	r3, r2, #21
 8000e26:	e708      	b.n	8000c3a <__aeabi_ddiv+0xae>
 8000e28:	4652      	mov	r2, sl
 8000e2a:	4322      	orrs	r2, r4
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x2a4>
 8000e2e:	e07b      	b.n	8000f28 <__aeabi_ddiv+0x39c>
 8000e30:	2c00      	cmp	r4, #0
 8000e32:	d100      	bne.n	8000e36 <__aeabi_ddiv+0x2aa>
 8000e34:	e0fa      	b.n	800102c <__aeabi_ddiv+0x4a0>
 8000e36:	0020      	movs	r0, r4
 8000e38:	f001 fa04 	bl	8002244 <__clzsi2>
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	3a0b      	subs	r2, #11
 8000e40:	231d      	movs	r3, #29
 8000e42:	0001      	movs	r1, r0
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	4652      	mov	r2, sl
 8000e48:	3908      	subs	r1, #8
 8000e4a:	40da      	lsrs	r2, r3
 8000e4c:	408c      	lsls	r4, r1
 8000e4e:	4314      	orrs	r4, r2
 8000e50:	4652      	mov	r2, sl
 8000e52:	408a      	lsls	r2, r1
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <__aeabi_ddiv+0x390>)
 8000e56:	4458      	add	r0, fp
 8000e58:	469b      	mov	fp, r3
 8000e5a:	4483      	add	fp, r0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	e6d5      	b.n	8000c0c <__aeabi_ddiv+0x80>
 8000e60:	464b      	mov	r3, r9
 8000e62:	4323      	orrs	r3, r4
 8000e64:	4698      	mov	r8, r3
 8000e66:	d044      	beq.n	8000ef2 <__aeabi_ddiv+0x366>
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_ddiv+0x2e2>
 8000e6c:	e0ce      	b.n	800100c <__aeabi_ddiv+0x480>
 8000e6e:	0020      	movs	r0, r4
 8000e70:	f001 f9e8 	bl	8002244 <__clzsi2>
 8000e74:	0001      	movs	r1, r0
 8000e76:	0002      	movs	r2, r0
 8000e78:	390b      	subs	r1, #11
 8000e7a:	231d      	movs	r3, #29
 8000e7c:	1a5b      	subs	r3, r3, r1
 8000e7e:	4649      	mov	r1, r9
 8000e80:	0010      	movs	r0, r2
 8000e82:	40d9      	lsrs	r1, r3
 8000e84:	3808      	subs	r0, #8
 8000e86:	4084      	lsls	r4, r0
 8000e88:	000b      	movs	r3, r1
 8000e8a:	464d      	mov	r5, r9
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	4698      	mov	r8, r3
 8000e90:	4085      	lsls	r5, r0
 8000e92:	4823      	ldr	r0, [pc, #140]	; (8000f20 <__aeabi_ddiv+0x394>)
 8000e94:	1a83      	subs	r3, r0, r2
 8000e96:	469b      	mov	fp, r3
 8000e98:	2300      	movs	r3, #0
 8000e9a:	4699      	mov	r9, r3
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	e69a      	b.n	8000bd6 <__aeabi_ddiv+0x4a>
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	4323      	orrs	r3, r4
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	d11d      	bne.n	8000ee4 <__aeabi_ddiv+0x358>
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	4699      	mov	r9, r3
 8000eac:	3b06      	subs	r3, #6
 8000eae:	2500      	movs	r5, #0
 8000eb0:	4683      	mov	fp, r0
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	e68f      	b.n	8000bd6 <__aeabi_ddiv+0x4a>
 8000eb6:	4652      	mov	r2, sl
 8000eb8:	4322      	orrs	r2, r4
 8000eba:	d109      	bne.n	8000ed0 <__aeabi_ddiv+0x344>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	4319      	orrs	r1, r3
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <__aeabi_ddiv+0x398>)
 8000ec4:	4689      	mov	r9, r1
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	2400      	movs	r4, #0
 8000eca:	2002      	movs	r0, #2
 8000ecc:	44e3      	add	fp, ip
 8000ece:	e69d      	b.n	8000c0c <__aeabi_ddiv+0x80>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	464a      	mov	r2, r9
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <__aeabi_ddiv+0x398>)
 8000ed8:	4691      	mov	r9, r2
 8000eda:	469c      	mov	ip, r3
 8000edc:	4652      	mov	r2, sl
 8000ede:	2003      	movs	r0, #3
 8000ee0:	44e3      	add	fp, ip
 8000ee2:	e693      	b.n	8000c0c <__aeabi_ddiv+0x80>
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	4699      	mov	r9, r3
 8000ee8:	3b09      	subs	r3, #9
 8000eea:	46a0      	mov	r8, r4
 8000eec:	4683      	mov	fp, r0
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	e671      	b.n	8000bd6 <__aeabi_ddiv+0x4a>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	4699      	mov	r9, r3
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	469b      	mov	fp, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	2500      	movs	r5, #0
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	e669      	b.n	8000bd6 <__aeabi_ddiv+0x4a>
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	000007ff 	.word	0x000007ff
 8000f08:	fffffc01 	.word	0xfffffc01
 8000f0c:	08007430 	.word	0x08007430
 8000f10:	000003ff 	.word	0x000003ff
 8000f14:	feffffff 	.word	0xfeffffff
 8000f18:	000007fe 	.word	0x000007fe
 8000f1c:	000003f3 	.word	0x000003f3
 8000f20:	fffffc0d 	.word	0xfffffc0d
 8000f24:	fffff801 	.word	0xfffff801
 8000f28:	4649      	mov	r1, r9
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	4319      	orrs	r1, r3
 8000f2e:	4689      	mov	r9, r1
 8000f30:	2400      	movs	r4, #0
 8000f32:	2001      	movs	r0, #1
 8000f34:	e66a      	b.n	8000c0c <__aeabi_ddiv+0x80>
 8000f36:	2300      	movs	r3, #0
 8000f38:	2480      	movs	r4, #128	; 0x80
 8000f3a:	469a      	mov	sl, r3
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	4b8a      	ldr	r3, [pc, #552]	; (8001168 <__aeabi_ddiv+0x5dc>)
 8000f40:	0324      	lsls	r4, r4, #12
 8000f42:	e67a      	b.n	8000c3a <__aeabi_ddiv+0xae>
 8000f44:	2501      	movs	r5, #1
 8000f46:	426d      	negs	r5, r5
 8000f48:	2301      	movs	r3, #1
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	2b38      	cmp	r3, #56	; 0x38
 8000f4e:	dd00      	ble.n	8000f52 <__aeabi_ddiv+0x3c6>
 8000f50:	e670      	b.n	8000c34 <__aeabi_ddiv+0xa8>
 8000f52:	2b1f      	cmp	r3, #31
 8000f54:	dc00      	bgt.n	8000f58 <__aeabi_ddiv+0x3cc>
 8000f56:	e0bf      	b.n	80010d8 <__aeabi_ddiv+0x54c>
 8000f58:	211f      	movs	r1, #31
 8000f5a:	4249      	negs	r1, r1
 8000f5c:	1a8a      	subs	r2, r1, r2
 8000f5e:	4641      	mov	r1, r8
 8000f60:	40d1      	lsrs	r1, r2
 8000f62:	000a      	movs	r2, r1
 8000f64:	2b20      	cmp	r3, #32
 8000f66:	d004      	beq.n	8000f72 <__aeabi_ddiv+0x3e6>
 8000f68:	4641      	mov	r1, r8
 8000f6a:	4b80      	ldr	r3, [pc, #512]	; (800116c <__aeabi_ddiv+0x5e0>)
 8000f6c:	445b      	add	r3, fp
 8000f6e:	4099      	lsls	r1, r3
 8000f70:	430d      	orrs	r5, r1
 8000f72:	1e6b      	subs	r3, r5, #1
 8000f74:	419d      	sbcs	r5, r3
 8000f76:	2307      	movs	r3, #7
 8000f78:	432a      	orrs	r2, r5
 8000f7a:	001d      	movs	r5, r3
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	4015      	ands	r5, r2
 8000f80:	4213      	tst	r3, r2
 8000f82:	d100      	bne.n	8000f86 <__aeabi_ddiv+0x3fa>
 8000f84:	e0d4      	b.n	8001130 <__aeabi_ddiv+0x5a4>
 8000f86:	210f      	movs	r1, #15
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4011      	ands	r1, r2
 8000f8c:	2904      	cmp	r1, #4
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_ddiv+0x406>
 8000f90:	e0cb      	b.n	800112a <__aeabi_ddiv+0x59e>
 8000f92:	1d11      	adds	r1, r2, #4
 8000f94:	4291      	cmp	r1, r2
 8000f96:	4192      	sbcs	r2, r2
 8000f98:	4252      	negs	r2, r2
 8000f9a:	189b      	adds	r3, r3, r2
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	0219      	lsls	r1, r3, #8
 8000fa0:	d400      	bmi.n	8000fa4 <__aeabi_ddiv+0x418>
 8000fa2:	e0c2      	b.n	800112a <__aeabi_ddiv+0x59e>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	2500      	movs	r5, #0
 8000faa:	e646      	b.n	8000c3a <__aeabi_ddiv+0xae>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	4641      	mov	r1, r8
 8000fb0:	031b      	lsls	r3, r3, #12
 8000fb2:	4219      	tst	r1, r3
 8000fb4:	d008      	beq.n	8000fc8 <__aeabi_ddiv+0x43c>
 8000fb6:	421c      	tst	r4, r3
 8000fb8:	d106      	bne.n	8000fc8 <__aeabi_ddiv+0x43c>
 8000fba:	431c      	orrs	r4, r3
 8000fbc:	0324      	lsls	r4, r4, #12
 8000fbe:	46ba      	mov	sl, r7
 8000fc0:	0015      	movs	r5, r2
 8000fc2:	4b69      	ldr	r3, [pc, #420]	; (8001168 <__aeabi_ddiv+0x5dc>)
 8000fc4:	0b24      	lsrs	r4, r4, #12
 8000fc6:	e638      	b.n	8000c3a <__aeabi_ddiv+0xae>
 8000fc8:	2480      	movs	r4, #128	; 0x80
 8000fca:	4643      	mov	r3, r8
 8000fcc:	0324      	lsls	r4, r4, #12
 8000fce:	431c      	orrs	r4, r3
 8000fd0:	0324      	lsls	r4, r4, #12
 8000fd2:	46b2      	mov	sl, r6
 8000fd4:	4b64      	ldr	r3, [pc, #400]	; (8001168 <__aeabi_ddiv+0x5dc>)
 8000fd6:	0b24      	lsrs	r4, r4, #12
 8000fd8:	e62f      	b.n	8000c3a <__aeabi_ddiv+0xae>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x454>
 8000fde:	e703      	b.n	8000de8 <__aeabi_ddiv+0x25c>
 8000fe0:	19a6      	adds	r6, r4, r6
 8000fe2:	1e68      	subs	r0, r5, #1
 8000fe4:	42a6      	cmp	r6, r4
 8000fe6:	d200      	bcs.n	8000fea <__aeabi_ddiv+0x45e>
 8000fe8:	e08d      	b.n	8001106 <__aeabi_ddiv+0x57a>
 8000fea:	428e      	cmp	r6, r1
 8000fec:	d200      	bcs.n	8000ff0 <__aeabi_ddiv+0x464>
 8000fee:	e0a3      	b.n	8001138 <__aeabi_ddiv+0x5ac>
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0x468>
 8000ff2:	e0b3      	b.n	800115c <__aeabi_ddiv+0x5d0>
 8000ff4:	0005      	movs	r5, r0
 8000ff6:	e6f5      	b.n	8000de4 <__aeabi_ddiv+0x258>
 8000ff8:	42aa      	cmp	r2, r5
 8000ffa:	d900      	bls.n	8000ffe <__aeabi_ddiv+0x472>
 8000ffc:	e639      	b.n	8000c72 <__aeabi_ddiv+0xe6>
 8000ffe:	4643      	mov	r3, r8
 8001000:	07de      	lsls	r6, r3, #31
 8001002:	0858      	lsrs	r0, r3, #1
 8001004:	086b      	lsrs	r3, r5, #1
 8001006:	431e      	orrs	r6, r3
 8001008:	07ed      	lsls	r5, r5, #31
 800100a:	e639      	b.n	8000c80 <__aeabi_ddiv+0xf4>
 800100c:	4648      	mov	r0, r9
 800100e:	f001 f919 	bl	8002244 <__clzsi2>
 8001012:	0001      	movs	r1, r0
 8001014:	0002      	movs	r2, r0
 8001016:	3115      	adds	r1, #21
 8001018:	3220      	adds	r2, #32
 800101a:	291c      	cmp	r1, #28
 800101c:	dc00      	bgt.n	8001020 <__aeabi_ddiv+0x494>
 800101e:	e72c      	b.n	8000e7a <__aeabi_ddiv+0x2ee>
 8001020:	464b      	mov	r3, r9
 8001022:	3808      	subs	r0, #8
 8001024:	4083      	lsls	r3, r0
 8001026:	2500      	movs	r5, #0
 8001028:	4698      	mov	r8, r3
 800102a:	e732      	b.n	8000e92 <__aeabi_ddiv+0x306>
 800102c:	f001 f90a 	bl	8002244 <__clzsi2>
 8001030:	0003      	movs	r3, r0
 8001032:	001a      	movs	r2, r3
 8001034:	3215      	adds	r2, #21
 8001036:	3020      	adds	r0, #32
 8001038:	2a1c      	cmp	r2, #28
 800103a:	dc00      	bgt.n	800103e <__aeabi_ddiv+0x4b2>
 800103c:	e700      	b.n	8000e40 <__aeabi_ddiv+0x2b4>
 800103e:	4654      	mov	r4, sl
 8001040:	3b08      	subs	r3, #8
 8001042:	2200      	movs	r2, #0
 8001044:	409c      	lsls	r4, r3
 8001046:	e705      	b.n	8000e54 <__aeabi_ddiv+0x2c8>
 8001048:	1936      	adds	r6, r6, r4
 800104a:	3b01      	subs	r3, #1
 800104c:	42b4      	cmp	r4, r6
 800104e:	d900      	bls.n	8001052 <__aeabi_ddiv+0x4c6>
 8001050:	e6a6      	b.n	8000da0 <__aeabi_ddiv+0x214>
 8001052:	42b2      	cmp	r2, r6
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x4cc>
 8001056:	e6a3      	b.n	8000da0 <__aeabi_ddiv+0x214>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	1936      	adds	r6, r6, r4
 800105c:	e6a0      	b.n	8000da0 <__aeabi_ddiv+0x214>
 800105e:	1909      	adds	r1, r1, r4
 8001060:	3d01      	subs	r5, #1
 8001062:	428c      	cmp	r4, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x4dc>
 8001066:	e68d      	b.n	8000d84 <__aeabi_ddiv+0x1f8>
 8001068:	428a      	cmp	r2, r1
 800106a:	d800      	bhi.n	800106e <__aeabi_ddiv+0x4e2>
 800106c:	e68a      	b.n	8000d84 <__aeabi_ddiv+0x1f8>
 800106e:	1e85      	subs	r5, r0, #2
 8001070:	1909      	adds	r1, r1, r4
 8001072:	e687      	b.n	8000d84 <__aeabi_ddiv+0x1f8>
 8001074:	230f      	movs	r3, #15
 8001076:	402b      	ands	r3, r5
 8001078:	2b04      	cmp	r3, #4
 800107a:	d100      	bne.n	800107e <__aeabi_ddiv+0x4f2>
 800107c:	e6bc      	b.n	8000df8 <__aeabi_ddiv+0x26c>
 800107e:	2305      	movs	r3, #5
 8001080:	425b      	negs	r3, r3
 8001082:	42ab      	cmp	r3, r5
 8001084:	419b      	sbcs	r3, r3
 8001086:	3504      	adds	r5, #4
 8001088:	425b      	negs	r3, r3
 800108a:	08ed      	lsrs	r5, r5, #3
 800108c:	4498      	add	r8, r3
 800108e:	e6b4      	b.n	8000dfa <__aeabi_ddiv+0x26e>
 8001090:	42af      	cmp	r7, r5
 8001092:	d900      	bls.n	8001096 <__aeabi_ddiv+0x50a>
 8001094:	e660      	b.n	8000d58 <__aeabi_ddiv+0x1cc>
 8001096:	4282      	cmp	r2, r0
 8001098:	d804      	bhi.n	80010a4 <__aeabi_ddiv+0x518>
 800109a:	d000      	beq.n	800109e <__aeabi_ddiv+0x512>
 800109c:	e65c      	b.n	8000d58 <__aeabi_ddiv+0x1cc>
 800109e:	42ae      	cmp	r6, r5
 80010a0:	d800      	bhi.n	80010a4 <__aeabi_ddiv+0x518>
 80010a2:	e659      	b.n	8000d58 <__aeabi_ddiv+0x1cc>
 80010a4:	2302      	movs	r3, #2
 80010a6:	425b      	negs	r3, r3
 80010a8:	469c      	mov	ip, r3
 80010aa:	9b00      	ldr	r3, [sp, #0]
 80010ac:	44e0      	add	r8, ip
 80010ae:	469c      	mov	ip, r3
 80010b0:	4465      	add	r5, ip
 80010b2:	429d      	cmp	r5, r3
 80010b4:	419b      	sbcs	r3, r3
 80010b6:	425b      	negs	r3, r3
 80010b8:	191b      	adds	r3, r3, r4
 80010ba:	18c0      	adds	r0, r0, r3
 80010bc:	e64d      	b.n	8000d5a <__aeabi_ddiv+0x1ce>
 80010be:	428a      	cmp	r2, r1
 80010c0:	d800      	bhi.n	80010c4 <__aeabi_ddiv+0x538>
 80010c2:	e60e      	b.n	8000ce2 <__aeabi_ddiv+0x156>
 80010c4:	1e83      	subs	r3, r0, #2
 80010c6:	1909      	adds	r1, r1, r4
 80010c8:	e60b      	b.n	8000ce2 <__aeabi_ddiv+0x156>
 80010ca:	428a      	cmp	r2, r1
 80010cc:	d800      	bhi.n	80010d0 <__aeabi_ddiv+0x544>
 80010ce:	e5f4      	b.n	8000cba <__aeabi_ddiv+0x12e>
 80010d0:	1e83      	subs	r3, r0, #2
 80010d2:	4698      	mov	r8, r3
 80010d4:	1909      	adds	r1, r1, r4
 80010d6:	e5f0      	b.n	8000cba <__aeabi_ddiv+0x12e>
 80010d8:	4925      	ldr	r1, [pc, #148]	; (8001170 <__aeabi_ddiv+0x5e4>)
 80010da:	0028      	movs	r0, r5
 80010dc:	4459      	add	r1, fp
 80010de:	408d      	lsls	r5, r1
 80010e0:	4642      	mov	r2, r8
 80010e2:	408a      	lsls	r2, r1
 80010e4:	1e69      	subs	r1, r5, #1
 80010e6:	418d      	sbcs	r5, r1
 80010e8:	4641      	mov	r1, r8
 80010ea:	40d8      	lsrs	r0, r3
 80010ec:	40d9      	lsrs	r1, r3
 80010ee:	4302      	orrs	r2, r0
 80010f0:	432a      	orrs	r2, r5
 80010f2:	000b      	movs	r3, r1
 80010f4:	0751      	lsls	r1, r2, #29
 80010f6:	d100      	bne.n	80010fa <__aeabi_ddiv+0x56e>
 80010f8:	e751      	b.n	8000f9e <__aeabi_ddiv+0x412>
 80010fa:	210f      	movs	r1, #15
 80010fc:	4011      	ands	r1, r2
 80010fe:	2904      	cmp	r1, #4
 8001100:	d000      	beq.n	8001104 <__aeabi_ddiv+0x578>
 8001102:	e746      	b.n	8000f92 <__aeabi_ddiv+0x406>
 8001104:	e74b      	b.n	8000f9e <__aeabi_ddiv+0x412>
 8001106:	0005      	movs	r5, r0
 8001108:	428e      	cmp	r6, r1
 800110a:	d000      	beq.n	800110e <__aeabi_ddiv+0x582>
 800110c:	e66a      	b.n	8000de4 <__aeabi_ddiv+0x258>
 800110e:	9a00      	ldr	r2, [sp, #0]
 8001110:	4293      	cmp	r3, r2
 8001112:	d000      	beq.n	8001116 <__aeabi_ddiv+0x58a>
 8001114:	e666      	b.n	8000de4 <__aeabi_ddiv+0x258>
 8001116:	e667      	b.n	8000de8 <__aeabi_ddiv+0x25c>
 8001118:	4a16      	ldr	r2, [pc, #88]	; (8001174 <__aeabi_ddiv+0x5e8>)
 800111a:	445a      	add	r2, fp
 800111c:	2a00      	cmp	r2, #0
 800111e:	dc00      	bgt.n	8001122 <__aeabi_ddiv+0x596>
 8001120:	e710      	b.n	8000f44 <__aeabi_ddiv+0x3b8>
 8001122:	2301      	movs	r3, #1
 8001124:	2500      	movs	r5, #0
 8001126:	4498      	add	r8, r3
 8001128:	e667      	b.n	8000dfa <__aeabi_ddiv+0x26e>
 800112a:	075d      	lsls	r5, r3, #29
 800112c:	025b      	lsls	r3, r3, #9
 800112e:	0b1c      	lsrs	r4, r3, #12
 8001130:	08d2      	lsrs	r2, r2, #3
 8001132:	2300      	movs	r3, #0
 8001134:	4315      	orrs	r5, r2
 8001136:	e580      	b.n	8000c3a <__aeabi_ddiv+0xae>
 8001138:	9800      	ldr	r0, [sp, #0]
 800113a:	3d02      	subs	r5, #2
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	4282      	cmp	r2, r0
 8001140:	41bf      	sbcs	r7, r7
 8001142:	427f      	negs	r7, r7
 8001144:	193c      	adds	r4, r7, r4
 8001146:	1936      	adds	r6, r6, r4
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	e7dd      	b.n	8001108 <__aeabi_ddiv+0x57c>
 800114c:	2480      	movs	r4, #128	; 0x80
 800114e:	4643      	mov	r3, r8
 8001150:	0324      	lsls	r4, r4, #12
 8001152:	431c      	orrs	r4, r3
 8001154:	0324      	lsls	r4, r4, #12
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__aeabi_ddiv+0x5dc>)
 8001158:	0b24      	lsrs	r4, r4, #12
 800115a:	e56e      	b.n	8000c3a <__aeabi_ddiv+0xae>
 800115c:	9a00      	ldr	r2, [sp, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d3ea      	bcc.n	8001138 <__aeabi_ddiv+0x5ac>
 8001162:	0005      	movs	r5, r0
 8001164:	e7d3      	b.n	800110e <__aeabi_ddiv+0x582>
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	000007ff 	.word	0x000007ff
 800116c:	0000043e 	.word	0x0000043e
 8001170:	0000041e 	.word	0x0000041e
 8001174:	000003ff 	.word	0x000003ff

08001178 <__eqdf2>:
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	464e      	mov	r6, r9
 800117c:	4645      	mov	r5, r8
 800117e:	46de      	mov	lr, fp
 8001180:	4657      	mov	r7, sl
 8001182:	4690      	mov	r8, r2
 8001184:	b5e0      	push	{r5, r6, r7, lr}
 8001186:	0017      	movs	r7, r2
 8001188:	031a      	lsls	r2, r3, #12
 800118a:	0b12      	lsrs	r2, r2, #12
 800118c:	0005      	movs	r5, r0
 800118e:	4684      	mov	ip, r0
 8001190:	4819      	ldr	r0, [pc, #100]	; (80011f8 <__eqdf2+0x80>)
 8001192:	030e      	lsls	r6, r1, #12
 8001194:	004c      	lsls	r4, r1, #1
 8001196:	4691      	mov	r9, r2
 8001198:	005a      	lsls	r2, r3, #1
 800119a:	0fdb      	lsrs	r3, r3, #31
 800119c:	469b      	mov	fp, r3
 800119e:	0b36      	lsrs	r6, r6, #12
 80011a0:	0d64      	lsrs	r4, r4, #21
 80011a2:	0fc9      	lsrs	r1, r1, #31
 80011a4:	0d52      	lsrs	r2, r2, #21
 80011a6:	4284      	cmp	r4, r0
 80011a8:	d019      	beq.n	80011de <__eqdf2+0x66>
 80011aa:	4282      	cmp	r2, r0
 80011ac:	d010      	beq.n	80011d0 <__eqdf2+0x58>
 80011ae:	2001      	movs	r0, #1
 80011b0:	4294      	cmp	r4, r2
 80011b2:	d10e      	bne.n	80011d2 <__eqdf2+0x5a>
 80011b4:	454e      	cmp	r6, r9
 80011b6:	d10c      	bne.n	80011d2 <__eqdf2+0x5a>
 80011b8:	2001      	movs	r0, #1
 80011ba:	45c4      	cmp	ip, r8
 80011bc:	d109      	bne.n	80011d2 <__eqdf2+0x5a>
 80011be:	4559      	cmp	r1, fp
 80011c0:	d017      	beq.n	80011f2 <__eqdf2+0x7a>
 80011c2:	2c00      	cmp	r4, #0
 80011c4:	d105      	bne.n	80011d2 <__eqdf2+0x5a>
 80011c6:	0030      	movs	r0, r6
 80011c8:	4328      	orrs	r0, r5
 80011ca:	1e43      	subs	r3, r0, #1
 80011cc:	4198      	sbcs	r0, r3
 80011ce:	e000      	b.n	80011d2 <__eqdf2+0x5a>
 80011d0:	2001      	movs	r0, #1
 80011d2:	bcf0      	pop	{r4, r5, r6, r7}
 80011d4:	46bb      	mov	fp, r7
 80011d6:	46b2      	mov	sl, r6
 80011d8:	46a9      	mov	r9, r5
 80011da:	46a0      	mov	r8, r4
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	0033      	movs	r3, r6
 80011e0:	2001      	movs	r0, #1
 80011e2:	432b      	orrs	r3, r5
 80011e4:	d1f5      	bne.n	80011d2 <__eqdf2+0x5a>
 80011e6:	42a2      	cmp	r2, r4
 80011e8:	d1f3      	bne.n	80011d2 <__eqdf2+0x5a>
 80011ea:	464b      	mov	r3, r9
 80011ec:	433b      	orrs	r3, r7
 80011ee:	d1f0      	bne.n	80011d2 <__eqdf2+0x5a>
 80011f0:	e7e2      	b.n	80011b8 <__eqdf2+0x40>
 80011f2:	2000      	movs	r0, #0
 80011f4:	e7ed      	b.n	80011d2 <__eqdf2+0x5a>
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	000007ff 	.word	0x000007ff

080011fc <__gedf2>:
 80011fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fe:	4647      	mov	r7, r8
 8001200:	46ce      	mov	lr, r9
 8001202:	0004      	movs	r4, r0
 8001204:	0018      	movs	r0, r3
 8001206:	0016      	movs	r6, r2
 8001208:	031b      	lsls	r3, r3, #12
 800120a:	0b1b      	lsrs	r3, r3, #12
 800120c:	4d2d      	ldr	r5, [pc, #180]	; (80012c4 <__gedf2+0xc8>)
 800120e:	004a      	lsls	r2, r1, #1
 8001210:	4699      	mov	r9, r3
 8001212:	b580      	push	{r7, lr}
 8001214:	0043      	lsls	r3, r0, #1
 8001216:	030f      	lsls	r7, r1, #12
 8001218:	46a4      	mov	ip, r4
 800121a:	46b0      	mov	r8, r6
 800121c:	0b3f      	lsrs	r7, r7, #12
 800121e:	0d52      	lsrs	r2, r2, #21
 8001220:	0fc9      	lsrs	r1, r1, #31
 8001222:	0d5b      	lsrs	r3, r3, #21
 8001224:	0fc0      	lsrs	r0, r0, #31
 8001226:	42aa      	cmp	r2, r5
 8001228:	d021      	beq.n	800126e <__gedf2+0x72>
 800122a:	42ab      	cmp	r3, r5
 800122c:	d013      	beq.n	8001256 <__gedf2+0x5a>
 800122e:	2a00      	cmp	r2, #0
 8001230:	d122      	bne.n	8001278 <__gedf2+0x7c>
 8001232:	433c      	orrs	r4, r7
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <__gedf2+0x42>
 8001238:	464d      	mov	r5, r9
 800123a:	432e      	orrs	r6, r5
 800123c:	d022      	beq.n	8001284 <__gedf2+0x88>
 800123e:	2c00      	cmp	r4, #0
 8001240:	d010      	beq.n	8001264 <__gedf2+0x68>
 8001242:	4281      	cmp	r1, r0
 8001244:	d022      	beq.n	800128c <__gedf2+0x90>
 8001246:	2002      	movs	r0, #2
 8001248:	3901      	subs	r1, #1
 800124a:	4008      	ands	r0, r1
 800124c:	3801      	subs	r0, #1
 800124e:	bcc0      	pop	{r6, r7}
 8001250:	46b9      	mov	r9, r7
 8001252:	46b0      	mov	r8, r6
 8001254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001256:	464d      	mov	r5, r9
 8001258:	432e      	orrs	r6, r5
 800125a:	d129      	bne.n	80012b0 <__gedf2+0xb4>
 800125c:	2a00      	cmp	r2, #0
 800125e:	d1f0      	bne.n	8001242 <__gedf2+0x46>
 8001260:	433c      	orrs	r4, r7
 8001262:	d1ee      	bne.n	8001242 <__gedf2+0x46>
 8001264:	2800      	cmp	r0, #0
 8001266:	d1f2      	bne.n	800124e <__gedf2+0x52>
 8001268:	2001      	movs	r0, #1
 800126a:	4240      	negs	r0, r0
 800126c:	e7ef      	b.n	800124e <__gedf2+0x52>
 800126e:	003d      	movs	r5, r7
 8001270:	4325      	orrs	r5, r4
 8001272:	d11d      	bne.n	80012b0 <__gedf2+0xb4>
 8001274:	4293      	cmp	r3, r2
 8001276:	d0ee      	beq.n	8001256 <__gedf2+0x5a>
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e2      	bne.n	8001242 <__gedf2+0x46>
 800127c:	464c      	mov	r4, r9
 800127e:	4326      	orrs	r6, r4
 8001280:	d1df      	bne.n	8001242 <__gedf2+0x46>
 8001282:	e7e0      	b.n	8001246 <__gedf2+0x4a>
 8001284:	2000      	movs	r0, #0
 8001286:	2c00      	cmp	r4, #0
 8001288:	d0e1      	beq.n	800124e <__gedf2+0x52>
 800128a:	e7dc      	b.n	8001246 <__gedf2+0x4a>
 800128c:	429a      	cmp	r2, r3
 800128e:	dc0a      	bgt.n	80012a6 <__gedf2+0xaa>
 8001290:	dbe8      	blt.n	8001264 <__gedf2+0x68>
 8001292:	454f      	cmp	r7, r9
 8001294:	d8d7      	bhi.n	8001246 <__gedf2+0x4a>
 8001296:	d00e      	beq.n	80012b6 <__gedf2+0xba>
 8001298:	2000      	movs	r0, #0
 800129a:	454f      	cmp	r7, r9
 800129c:	d2d7      	bcs.n	800124e <__gedf2+0x52>
 800129e:	2900      	cmp	r1, #0
 80012a0:	d0e2      	beq.n	8001268 <__gedf2+0x6c>
 80012a2:	0008      	movs	r0, r1
 80012a4:	e7d3      	b.n	800124e <__gedf2+0x52>
 80012a6:	4243      	negs	r3, r0
 80012a8:	4158      	adcs	r0, r3
 80012aa:	0040      	lsls	r0, r0, #1
 80012ac:	3801      	subs	r0, #1
 80012ae:	e7ce      	b.n	800124e <__gedf2+0x52>
 80012b0:	2002      	movs	r0, #2
 80012b2:	4240      	negs	r0, r0
 80012b4:	e7cb      	b.n	800124e <__gedf2+0x52>
 80012b6:	45c4      	cmp	ip, r8
 80012b8:	d8c5      	bhi.n	8001246 <__gedf2+0x4a>
 80012ba:	2000      	movs	r0, #0
 80012bc:	45c4      	cmp	ip, r8
 80012be:	d2c6      	bcs.n	800124e <__gedf2+0x52>
 80012c0:	e7ed      	b.n	800129e <__gedf2+0xa2>
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	000007ff 	.word	0x000007ff

080012c8 <__ledf2>:
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	4647      	mov	r7, r8
 80012cc:	46ce      	mov	lr, r9
 80012ce:	0004      	movs	r4, r0
 80012d0:	0018      	movs	r0, r3
 80012d2:	0016      	movs	r6, r2
 80012d4:	031b      	lsls	r3, r3, #12
 80012d6:	0b1b      	lsrs	r3, r3, #12
 80012d8:	4d2c      	ldr	r5, [pc, #176]	; (800138c <__ledf2+0xc4>)
 80012da:	004a      	lsls	r2, r1, #1
 80012dc:	4699      	mov	r9, r3
 80012de:	b580      	push	{r7, lr}
 80012e0:	0043      	lsls	r3, r0, #1
 80012e2:	030f      	lsls	r7, r1, #12
 80012e4:	46a4      	mov	ip, r4
 80012e6:	46b0      	mov	r8, r6
 80012e8:	0b3f      	lsrs	r7, r7, #12
 80012ea:	0d52      	lsrs	r2, r2, #21
 80012ec:	0fc9      	lsrs	r1, r1, #31
 80012ee:	0d5b      	lsrs	r3, r3, #21
 80012f0:	0fc0      	lsrs	r0, r0, #31
 80012f2:	42aa      	cmp	r2, r5
 80012f4:	d00d      	beq.n	8001312 <__ledf2+0x4a>
 80012f6:	42ab      	cmp	r3, r5
 80012f8:	d010      	beq.n	800131c <__ledf2+0x54>
 80012fa:	2a00      	cmp	r2, #0
 80012fc:	d127      	bne.n	800134e <__ledf2+0x86>
 80012fe:	433c      	orrs	r4, r7
 8001300:	2b00      	cmp	r3, #0
 8001302:	d111      	bne.n	8001328 <__ledf2+0x60>
 8001304:	464d      	mov	r5, r9
 8001306:	432e      	orrs	r6, r5
 8001308:	d10e      	bne.n	8001328 <__ledf2+0x60>
 800130a:	2000      	movs	r0, #0
 800130c:	2c00      	cmp	r4, #0
 800130e:	d015      	beq.n	800133c <__ledf2+0x74>
 8001310:	e00e      	b.n	8001330 <__ledf2+0x68>
 8001312:	003d      	movs	r5, r7
 8001314:	4325      	orrs	r5, r4
 8001316:	d110      	bne.n	800133a <__ledf2+0x72>
 8001318:	4293      	cmp	r3, r2
 800131a:	d118      	bne.n	800134e <__ledf2+0x86>
 800131c:	464d      	mov	r5, r9
 800131e:	432e      	orrs	r6, r5
 8001320:	d10b      	bne.n	800133a <__ledf2+0x72>
 8001322:	2a00      	cmp	r2, #0
 8001324:	d102      	bne.n	800132c <__ledf2+0x64>
 8001326:	433c      	orrs	r4, r7
 8001328:	2c00      	cmp	r4, #0
 800132a:	d00b      	beq.n	8001344 <__ledf2+0x7c>
 800132c:	4281      	cmp	r1, r0
 800132e:	d014      	beq.n	800135a <__ledf2+0x92>
 8001330:	2002      	movs	r0, #2
 8001332:	3901      	subs	r1, #1
 8001334:	4008      	ands	r0, r1
 8001336:	3801      	subs	r0, #1
 8001338:	e000      	b.n	800133c <__ledf2+0x74>
 800133a:	2002      	movs	r0, #2
 800133c:	bcc0      	pop	{r6, r7}
 800133e:	46b9      	mov	r9, r7
 8001340:	46b0      	mov	r8, r6
 8001342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001344:	2800      	cmp	r0, #0
 8001346:	d1f9      	bne.n	800133c <__ledf2+0x74>
 8001348:	2001      	movs	r0, #1
 800134a:	4240      	negs	r0, r0
 800134c:	e7f6      	b.n	800133c <__ledf2+0x74>
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ec      	bne.n	800132c <__ledf2+0x64>
 8001352:	464c      	mov	r4, r9
 8001354:	4326      	orrs	r6, r4
 8001356:	d1e9      	bne.n	800132c <__ledf2+0x64>
 8001358:	e7ea      	b.n	8001330 <__ledf2+0x68>
 800135a:	429a      	cmp	r2, r3
 800135c:	dd04      	ble.n	8001368 <__ledf2+0xa0>
 800135e:	4243      	negs	r3, r0
 8001360:	4158      	adcs	r0, r3
 8001362:	0040      	lsls	r0, r0, #1
 8001364:	3801      	subs	r0, #1
 8001366:	e7e9      	b.n	800133c <__ledf2+0x74>
 8001368:	429a      	cmp	r2, r3
 800136a:	dbeb      	blt.n	8001344 <__ledf2+0x7c>
 800136c:	454f      	cmp	r7, r9
 800136e:	d8df      	bhi.n	8001330 <__ledf2+0x68>
 8001370:	d006      	beq.n	8001380 <__ledf2+0xb8>
 8001372:	2000      	movs	r0, #0
 8001374:	454f      	cmp	r7, r9
 8001376:	d2e1      	bcs.n	800133c <__ledf2+0x74>
 8001378:	2900      	cmp	r1, #0
 800137a:	d0e5      	beq.n	8001348 <__ledf2+0x80>
 800137c:	0008      	movs	r0, r1
 800137e:	e7dd      	b.n	800133c <__ledf2+0x74>
 8001380:	45c4      	cmp	ip, r8
 8001382:	d8d5      	bhi.n	8001330 <__ledf2+0x68>
 8001384:	2000      	movs	r0, #0
 8001386:	45c4      	cmp	ip, r8
 8001388:	d2d8      	bcs.n	800133c <__ledf2+0x74>
 800138a:	e7f5      	b.n	8001378 <__ledf2+0xb0>
 800138c:	000007ff 	.word	0x000007ff

08001390 <__aeabi_dmul>:
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	4657      	mov	r7, sl
 8001394:	464e      	mov	r6, r9
 8001396:	4645      	mov	r5, r8
 8001398:	46de      	mov	lr, fp
 800139a:	b5e0      	push	{r5, r6, r7, lr}
 800139c:	4698      	mov	r8, r3
 800139e:	030c      	lsls	r4, r1, #12
 80013a0:	004b      	lsls	r3, r1, #1
 80013a2:	0006      	movs	r6, r0
 80013a4:	4692      	mov	sl, r2
 80013a6:	b087      	sub	sp, #28
 80013a8:	0b24      	lsrs	r4, r4, #12
 80013aa:	0d5b      	lsrs	r3, r3, #21
 80013ac:	0fcf      	lsrs	r7, r1, #31
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dmul+0x24>
 80013b2:	e15c      	b.n	800166e <__aeabi_dmul+0x2de>
 80013b4:	4ad9      	ldr	r2, [pc, #868]	; (800171c <__aeabi_dmul+0x38c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d100      	bne.n	80013bc <__aeabi_dmul+0x2c>
 80013ba:	e175      	b.n	80016a8 <__aeabi_dmul+0x318>
 80013bc:	0f42      	lsrs	r2, r0, #29
 80013be:	00e4      	lsls	r4, r4, #3
 80013c0:	4314      	orrs	r4, r2
 80013c2:	2280      	movs	r2, #128	; 0x80
 80013c4:	0412      	lsls	r2, r2, #16
 80013c6:	4314      	orrs	r4, r2
 80013c8:	4ad5      	ldr	r2, [pc, #852]	; (8001720 <__aeabi_dmul+0x390>)
 80013ca:	00c5      	lsls	r5, r0, #3
 80013cc:	4694      	mov	ip, r2
 80013ce:	4463      	add	r3, ip
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	4699      	mov	r9, r3
 80013d6:	469b      	mov	fp, r3
 80013d8:	4643      	mov	r3, r8
 80013da:	4642      	mov	r2, r8
 80013dc:	031e      	lsls	r6, r3, #12
 80013de:	0fd2      	lsrs	r2, r2, #31
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4650      	mov	r0, sl
 80013e4:	4690      	mov	r8, r2
 80013e6:	0b36      	lsrs	r6, r6, #12
 80013e8:	0d5b      	lsrs	r3, r3, #21
 80013ea:	d100      	bne.n	80013ee <__aeabi_dmul+0x5e>
 80013ec:	e120      	b.n	8001630 <__aeabi_dmul+0x2a0>
 80013ee:	4acb      	ldr	r2, [pc, #812]	; (800171c <__aeabi_dmul+0x38c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x66>
 80013f4:	e162      	b.n	80016bc <__aeabi_dmul+0x32c>
 80013f6:	49ca      	ldr	r1, [pc, #808]	; (8001720 <__aeabi_dmul+0x390>)
 80013f8:	0f42      	lsrs	r2, r0, #29
 80013fa:	468c      	mov	ip, r1
 80013fc:	9900      	ldr	r1, [sp, #0]
 80013fe:	4463      	add	r3, ip
 8001400:	00f6      	lsls	r6, r6, #3
 8001402:	468c      	mov	ip, r1
 8001404:	4316      	orrs	r6, r2
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	449c      	add	ip, r3
 800140a:	0412      	lsls	r2, r2, #16
 800140c:	4663      	mov	r3, ip
 800140e:	4316      	orrs	r6, r2
 8001410:	00c2      	lsls	r2, r0, #3
 8001412:	2000      	movs	r0, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	4643      	mov	r3, r8
 800141a:	3101      	adds	r1, #1
 800141c:	468c      	mov	ip, r1
 800141e:	4649      	mov	r1, r9
 8001420:	407b      	eors	r3, r7
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	290f      	cmp	r1, #15
 8001426:	d826      	bhi.n	8001476 <__aeabi_dmul+0xe6>
 8001428:	4bbe      	ldr	r3, [pc, #760]	; (8001724 <__aeabi_dmul+0x394>)
 800142a:	0089      	lsls	r1, r1, #2
 800142c:	5859      	ldr	r1, [r3, r1]
 800142e:	468f      	mov	pc, r1
 8001430:	4643      	mov	r3, r8
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	0034      	movs	r4, r6
 8001436:	0015      	movs	r5, r2
 8001438:	4683      	mov	fp, r0
 800143a:	465b      	mov	r3, fp
 800143c:	2b02      	cmp	r3, #2
 800143e:	d016      	beq.n	800146e <__aeabi_dmul+0xde>
 8001440:	2b03      	cmp	r3, #3
 8001442:	d100      	bne.n	8001446 <__aeabi_dmul+0xb6>
 8001444:	e203      	b.n	800184e <__aeabi_dmul+0x4be>
 8001446:	2b01      	cmp	r3, #1
 8001448:	d000      	beq.n	800144c <__aeabi_dmul+0xbc>
 800144a:	e0cd      	b.n	80015e8 <__aeabi_dmul+0x258>
 800144c:	2200      	movs	r2, #0
 800144e:	2400      	movs	r4, #0
 8001450:	2500      	movs	r5, #0
 8001452:	9b01      	ldr	r3, [sp, #4]
 8001454:	0512      	lsls	r2, r2, #20
 8001456:	4322      	orrs	r2, r4
 8001458:	07db      	lsls	r3, r3, #31
 800145a:	431a      	orrs	r2, r3
 800145c:	0028      	movs	r0, r5
 800145e:	0011      	movs	r1, r2
 8001460:	b007      	add	sp, #28
 8001462:	bcf0      	pop	{r4, r5, r6, r7}
 8001464:	46bb      	mov	fp, r7
 8001466:	46b2      	mov	sl, r6
 8001468:	46a9      	mov	r9, r5
 800146a:	46a0      	mov	r8, r4
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146e:	2400      	movs	r4, #0
 8001470:	2500      	movs	r5, #0
 8001472:	4aaa      	ldr	r2, [pc, #680]	; (800171c <__aeabi_dmul+0x38c>)
 8001474:	e7ed      	b.n	8001452 <__aeabi_dmul+0xc2>
 8001476:	0c28      	lsrs	r0, r5, #16
 8001478:	042d      	lsls	r5, r5, #16
 800147a:	0c2d      	lsrs	r5, r5, #16
 800147c:	002b      	movs	r3, r5
 800147e:	0c11      	lsrs	r1, r2, #16
 8001480:	0412      	lsls	r2, r2, #16
 8001482:	0c12      	lsrs	r2, r2, #16
 8001484:	4353      	muls	r3, r2
 8001486:	4698      	mov	r8, r3
 8001488:	0013      	movs	r3, r2
 800148a:	002f      	movs	r7, r5
 800148c:	4343      	muls	r3, r0
 800148e:	4699      	mov	r9, r3
 8001490:	434f      	muls	r7, r1
 8001492:	444f      	add	r7, r9
 8001494:	46bb      	mov	fp, r7
 8001496:	4647      	mov	r7, r8
 8001498:	000b      	movs	r3, r1
 800149a:	0c3f      	lsrs	r7, r7, #16
 800149c:	46ba      	mov	sl, r7
 800149e:	4343      	muls	r3, r0
 80014a0:	44da      	add	sl, fp
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	45d1      	cmp	r9, sl
 80014a6:	d904      	bls.n	80014b2 <__aeabi_dmul+0x122>
 80014a8:	2780      	movs	r7, #128	; 0x80
 80014aa:	027f      	lsls	r7, r7, #9
 80014ac:	46b9      	mov	r9, r7
 80014ae:	444b      	add	r3, r9
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	4653      	mov	r3, sl
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	469b      	mov	fp, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	041f      	lsls	r7, r3, #16
 80014bc:	4643      	mov	r3, r8
 80014be:	041b      	lsls	r3, r3, #16
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	4698      	mov	r8, r3
 80014c4:	003b      	movs	r3, r7
 80014c6:	4443      	add	r3, r8
 80014c8:	9304      	str	r3, [sp, #16]
 80014ca:	0c33      	lsrs	r3, r6, #16
 80014cc:	0436      	lsls	r6, r6, #16
 80014ce:	0c36      	lsrs	r6, r6, #16
 80014d0:	4698      	mov	r8, r3
 80014d2:	0033      	movs	r3, r6
 80014d4:	4343      	muls	r3, r0
 80014d6:	4699      	mov	r9, r3
 80014d8:	4643      	mov	r3, r8
 80014da:	4343      	muls	r3, r0
 80014dc:	002f      	movs	r7, r5
 80014de:	469a      	mov	sl, r3
 80014e0:	4643      	mov	r3, r8
 80014e2:	4377      	muls	r7, r6
 80014e4:	435d      	muls	r5, r3
 80014e6:	0c38      	lsrs	r0, r7, #16
 80014e8:	444d      	add	r5, r9
 80014ea:	1945      	adds	r5, r0, r5
 80014ec:	45a9      	cmp	r9, r5
 80014ee:	d903      	bls.n	80014f8 <__aeabi_dmul+0x168>
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	4699      	mov	r9, r3
 80014f6:	44ca      	add	sl, r9
 80014f8:	043f      	lsls	r7, r7, #16
 80014fa:	0c28      	lsrs	r0, r5, #16
 80014fc:	0c3f      	lsrs	r7, r7, #16
 80014fe:	042d      	lsls	r5, r5, #16
 8001500:	19ed      	adds	r5, r5, r7
 8001502:	0c27      	lsrs	r7, r4, #16
 8001504:	0424      	lsls	r4, r4, #16
 8001506:	0c24      	lsrs	r4, r4, #16
 8001508:	0003      	movs	r3, r0
 800150a:	0020      	movs	r0, r4
 800150c:	4350      	muls	r0, r2
 800150e:	437a      	muls	r2, r7
 8001510:	4691      	mov	r9, r2
 8001512:	003a      	movs	r2, r7
 8001514:	4453      	add	r3, sl
 8001516:	9305      	str	r3, [sp, #20]
 8001518:	0c03      	lsrs	r3, r0, #16
 800151a:	469a      	mov	sl, r3
 800151c:	434a      	muls	r2, r1
 800151e:	4361      	muls	r1, r4
 8001520:	4449      	add	r1, r9
 8001522:	4451      	add	r1, sl
 8001524:	44ab      	add	fp, r5
 8001526:	4589      	cmp	r9, r1
 8001528:	d903      	bls.n	8001532 <__aeabi_dmul+0x1a2>
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	025b      	lsls	r3, r3, #9
 800152e:	4699      	mov	r9, r3
 8001530:	444a      	add	r2, r9
 8001532:	0400      	lsls	r0, r0, #16
 8001534:	0c0b      	lsrs	r3, r1, #16
 8001536:	0c00      	lsrs	r0, r0, #16
 8001538:	0409      	lsls	r1, r1, #16
 800153a:	1809      	adds	r1, r1, r0
 800153c:	0020      	movs	r0, r4
 800153e:	4699      	mov	r9, r3
 8001540:	4643      	mov	r3, r8
 8001542:	4370      	muls	r0, r6
 8001544:	435c      	muls	r4, r3
 8001546:	437e      	muls	r6, r7
 8001548:	435f      	muls	r7, r3
 800154a:	0c03      	lsrs	r3, r0, #16
 800154c:	4698      	mov	r8, r3
 800154e:	19a4      	adds	r4, r4, r6
 8001550:	4444      	add	r4, r8
 8001552:	444a      	add	r2, r9
 8001554:	9703      	str	r7, [sp, #12]
 8001556:	42a6      	cmp	r6, r4
 8001558:	d904      	bls.n	8001564 <__aeabi_dmul+0x1d4>
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	4698      	mov	r8, r3
 8001560:	4447      	add	r7, r8
 8001562:	9703      	str	r7, [sp, #12]
 8001564:	0423      	lsls	r3, r4, #16
 8001566:	9e02      	ldr	r6, [sp, #8]
 8001568:	469a      	mov	sl, r3
 800156a:	9b05      	ldr	r3, [sp, #20]
 800156c:	445e      	add	r6, fp
 800156e:	4698      	mov	r8, r3
 8001570:	42ae      	cmp	r6, r5
 8001572:	41ad      	sbcs	r5, r5
 8001574:	1876      	adds	r6, r6, r1
 8001576:	428e      	cmp	r6, r1
 8001578:	4189      	sbcs	r1, r1
 800157a:	0400      	lsls	r0, r0, #16
 800157c:	0c00      	lsrs	r0, r0, #16
 800157e:	4450      	add	r0, sl
 8001580:	4440      	add	r0, r8
 8001582:	426d      	negs	r5, r5
 8001584:	1947      	adds	r7, r0, r5
 8001586:	46b8      	mov	r8, r7
 8001588:	4693      	mov	fp, r2
 800158a:	4249      	negs	r1, r1
 800158c:	4689      	mov	r9, r1
 800158e:	44c3      	add	fp, r8
 8001590:	44d9      	add	r9, fp
 8001592:	4298      	cmp	r0, r3
 8001594:	4180      	sbcs	r0, r0
 8001596:	45a8      	cmp	r8, r5
 8001598:	41ad      	sbcs	r5, r5
 800159a:	4593      	cmp	fp, r2
 800159c:	4192      	sbcs	r2, r2
 800159e:	4589      	cmp	r9, r1
 80015a0:	4189      	sbcs	r1, r1
 80015a2:	426d      	negs	r5, r5
 80015a4:	4240      	negs	r0, r0
 80015a6:	4328      	orrs	r0, r5
 80015a8:	0c24      	lsrs	r4, r4, #16
 80015aa:	4252      	negs	r2, r2
 80015ac:	4249      	negs	r1, r1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	9b03      	ldr	r3, [sp, #12]
 80015b2:	1900      	adds	r0, r0, r4
 80015b4:	1880      	adds	r0, r0, r2
 80015b6:	18c7      	adds	r7, r0, r3
 80015b8:	464b      	mov	r3, r9
 80015ba:	0ddc      	lsrs	r4, r3, #23
 80015bc:	9b04      	ldr	r3, [sp, #16]
 80015be:	0275      	lsls	r5, r6, #9
 80015c0:	431d      	orrs	r5, r3
 80015c2:	1e6a      	subs	r2, r5, #1
 80015c4:	4195      	sbcs	r5, r2
 80015c6:	464b      	mov	r3, r9
 80015c8:	0df6      	lsrs	r6, r6, #23
 80015ca:	027f      	lsls	r7, r7, #9
 80015cc:	4335      	orrs	r5, r6
 80015ce:	025a      	lsls	r2, r3, #9
 80015d0:	433c      	orrs	r4, r7
 80015d2:	4315      	orrs	r5, r2
 80015d4:	01fb      	lsls	r3, r7, #7
 80015d6:	d400      	bmi.n	80015da <__aeabi_dmul+0x24a>
 80015d8:	e11c      	b.n	8001814 <__aeabi_dmul+0x484>
 80015da:	2101      	movs	r1, #1
 80015dc:	086a      	lsrs	r2, r5, #1
 80015de:	400d      	ands	r5, r1
 80015e0:	4315      	orrs	r5, r2
 80015e2:	07e2      	lsls	r2, r4, #31
 80015e4:	4315      	orrs	r5, r2
 80015e6:	0864      	lsrs	r4, r4, #1
 80015e8:	494f      	ldr	r1, [pc, #316]	; (8001728 <__aeabi_dmul+0x398>)
 80015ea:	4461      	add	r1, ip
 80015ec:	2900      	cmp	r1, #0
 80015ee:	dc00      	bgt.n	80015f2 <__aeabi_dmul+0x262>
 80015f0:	e0b0      	b.n	8001754 <__aeabi_dmul+0x3c4>
 80015f2:	076b      	lsls	r3, r5, #29
 80015f4:	d009      	beq.n	800160a <__aeabi_dmul+0x27a>
 80015f6:	220f      	movs	r2, #15
 80015f8:	402a      	ands	r2, r5
 80015fa:	2a04      	cmp	r2, #4
 80015fc:	d005      	beq.n	800160a <__aeabi_dmul+0x27a>
 80015fe:	1d2a      	adds	r2, r5, #4
 8001600:	42aa      	cmp	r2, r5
 8001602:	41ad      	sbcs	r5, r5
 8001604:	426d      	negs	r5, r5
 8001606:	1964      	adds	r4, r4, r5
 8001608:	0015      	movs	r5, r2
 800160a:	01e3      	lsls	r3, r4, #7
 800160c:	d504      	bpl.n	8001618 <__aeabi_dmul+0x288>
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	4a46      	ldr	r2, [pc, #280]	; (800172c <__aeabi_dmul+0x39c>)
 8001612:	00c9      	lsls	r1, r1, #3
 8001614:	4014      	ands	r4, r2
 8001616:	4461      	add	r1, ip
 8001618:	4a45      	ldr	r2, [pc, #276]	; (8001730 <__aeabi_dmul+0x3a0>)
 800161a:	4291      	cmp	r1, r2
 800161c:	dd00      	ble.n	8001620 <__aeabi_dmul+0x290>
 800161e:	e726      	b.n	800146e <__aeabi_dmul+0xde>
 8001620:	0762      	lsls	r2, r4, #29
 8001622:	08ed      	lsrs	r5, r5, #3
 8001624:	0264      	lsls	r4, r4, #9
 8001626:	0549      	lsls	r1, r1, #21
 8001628:	4315      	orrs	r5, r2
 800162a:	0b24      	lsrs	r4, r4, #12
 800162c:	0d4a      	lsrs	r2, r1, #21
 800162e:	e710      	b.n	8001452 <__aeabi_dmul+0xc2>
 8001630:	4652      	mov	r2, sl
 8001632:	4332      	orrs	r2, r6
 8001634:	d100      	bne.n	8001638 <__aeabi_dmul+0x2a8>
 8001636:	e07f      	b.n	8001738 <__aeabi_dmul+0x3a8>
 8001638:	2e00      	cmp	r6, #0
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2ae>
 800163c:	e0dc      	b.n	80017f8 <__aeabi_dmul+0x468>
 800163e:	0030      	movs	r0, r6
 8001640:	f000 fe00 	bl	8002244 <__clzsi2>
 8001644:	0002      	movs	r2, r0
 8001646:	3a0b      	subs	r2, #11
 8001648:	231d      	movs	r3, #29
 800164a:	0001      	movs	r1, r0
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	4652      	mov	r2, sl
 8001650:	3908      	subs	r1, #8
 8001652:	40da      	lsrs	r2, r3
 8001654:	408e      	lsls	r6, r1
 8001656:	4316      	orrs	r6, r2
 8001658:	4652      	mov	r2, sl
 800165a:	408a      	lsls	r2, r1
 800165c:	9b00      	ldr	r3, [sp, #0]
 800165e:	4935      	ldr	r1, [pc, #212]	; (8001734 <__aeabi_dmul+0x3a4>)
 8001660:	1a18      	subs	r0, r3, r0
 8001662:	0003      	movs	r3, r0
 8001664:	468c      	mov	ip, r1
 8001666:	4463      	add	r3, ip
 8001668:	2000      	movs	r0, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	e6d3      	b.n	8001416 <__aeabi_dmul+0x86>
 800166e:	0025      	movs	r5, r4
 8001670:	4305      	orrs	r5, r0
 8001672:	d04a      	beq.n	800170a <__aeabi_dmul+0x37a>
 8001674:	2c00      	cmp	r4, #0
 8001676:	d100      	bne.n	800167a <__aeabi_dmul+0x2ea>
 8001678:	e0b0      	b.n	80017dc <__aeabi_dmul+0x44c>
 800167a:	0020      	movs	r0, r4
 800167c:	f000 fde2 	bl	8002244 <__clzsi2>
 8001680:	0001      	movs	r1, r0
 8001682:	0002      	movs	r2, r0
 8001684:	390b      	subs	r1, #11
 8001686:	231d      	movs	r3, #29
 8001688:	0010      	movs	r0, r2
 800168a:	1a5b      	subs	r3, r3, r1
 800168c:	0031      	movs	r1, r6
 800168e:	0035      	movs	r5, r6
 8001690:	3808      	subs	r0, #8
 8001692:	4084      	lsls	r4, r0
 8001694:	40d9      	lsrs	r1, r3
 8001696:	4085      	lsls	r5, r0
 8001698:	430c      	orrs	r4, r1
 800169a:	4826      	ldr	r0, [pc, #152]	; (8001734 <__aeabi_dmul+0x3a4>)
 800169c:	1a83      	subs	r3, r0, r2
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	4699      	mov	r9, r3
 80016a4:	469b      	mov	fp, r3
 80016a6:	e697      	b.n	80013d8 <__aeabi_dmul+0x48>
 80016a8:	0005      	movs	r5, r0
 80016aa:	4325      	orrs	r5, r4
 80016ac:	d126      	bne.n	80016fc <__aeabi_dmul+0x36c>
 80016ae:	2208      	movs	r2, #8
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2302      	movs	r3, #2
 80016b4:	2400      	movs	r4, #0
 80016b6:	4691      	mov	r9, r2
 80016b8:	469b      	mov	fp, r3
 80016ba:	e68d      	b.n	80013d8 <__aeabi_dmul+0x48>
 80016bc:	4652      	mov	r2, sl
 80016be:	9b00      	ldr	r3, [sp, #0]
 80016c0:	4332      	orrs	r2, r6
 80016c2:	d110      	bne.n	80016e6 <__aeabi_dmul+0x356>
 80016c4:	4915      	ldr	r1, [pc, #84]	; (800171c <__aeabi_dmul+0x38c>)
 80016c6:	2600      	movs	r6, #0
 80016c8:	468c      	mov	ip, r1
 80016ca:	4463      	add	r3, ip
 80016cc:	4649      	mov	r1, r9
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2302      	movs	r3, #2
 80016d2:	4319      	orrs	r1, r3
 80016d4:	4689      	mov	r9, r1
 80016d6:	2002      	movs	r0, #2
 80016d8:	e69d      	b.n	8001416 <__aeabi_dmul+0x86>
 80016da:	465b      	mov	r3, fp
 80016dc:	9701      	str	r7, [sp, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dmul+0x354>
 80016e2:	e6ad      	b.n	8001440 <__aeabi_dmul+0xb0>
 80016e4:	e6c3      	b.n	800146e <__aeabi_dmul+0xde>
 80016e6:	4a0d      	ldr	r2, [pc, #52]	; (800171c <__aeabi_dmul+0x38c>)
 80016e8:	2003      	movs	r0, #3
 80016ea:	4694      	mov	ip, r2
 80016ec:	4463      	add	r3, ip
 80016ee:	464a      	mov	r2, r9
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2303      	movs	r3, #3
 80016f4:	431a      	orrs	r2, r3
 80016f6:	4691      	mov	r9, r2
 80016f8:	4652      	mov	r2, sl
 80016fa:	e68c      	b.n	8001416 <__aeabi_dmul+0x86>
 80016fc:	220c      	movs	r2, #12
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2303      	movs	r3, #3
 8001702:	0005      	movs	r5, r0
 8001704:	4691      	mov	r9, r2
 8001706:	469b      	mov	fp, r3
 8001708:	e666      	b.n	80013d8 <__aeabi_dmul+0x48>
 800170a:	2304      	movs	r3, #4
 800170c:	4699      	mov	r9, r3
 800170e:	2300      	movs	r3, #0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	2400      	movs	r4, #0
 8001716:	469b      	mov	fp, r3
 8001718:	e65e      	b.n	80013d8 <__aeabi_dmul+0x48>
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	000007ff 	.word	0x000007ff
 8001720:	fffffc01 	.word	0xfffffc01
 8001724:	08007470 	.word	0x08007470
 8001728:	000003ff 	.word	0x000003ff
 800172c:	feffffff 	.word	0xfeffffff
 8001730:	000007fe 	.word	0x000007fe
 8001734:	fffffc0d 	.word	0xfffffc0d
 8001738:	4649      	mov	r1, r9
 800173a:	2301      	movs	r3, #1
 800173c:	4319      	orrs	r1, r3
 800173e:	4689      	mov	r9, r1
 8001740:	2600      	movs	r6, #0
 8001742:	2001      	movs	r0, #1
 8001744:	e667      	b.n	8001416 <__aeabi_dmul+0x86>
 8001746:	2300      	movs	r3, #0
 8001748:	2480      	movs	r4, #128	; 0x80
 800174a:	2500      	movs	r5, #0
 800174c:	4a43      	ldr	r2, [pc, #268]	; (800185c <__aeabi_dmul+0x4cc>)
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	0324      	lsls	r4, r4, #12
 8001752:	e67e      	b.n	8001452 <__aeabi_dmul+0xc2>
 8001754:	2001      	movs	r0, #1
 8001756:	1a40      	subs	r0, r0, r1
 8001758:	2838      	cmp	r0, #56	; 0x38
 800175a:	dd00      	ble.n	800175e <__aeabi_dmul+0x3ce>
 800175c:	e676      	b.n	800144c <__aeabi_dmul+0xbc>
 800175e:	281f      	cmp	r0, #31
 8001760:	dd5b      	ble.n	800181a <__aeabi_dmul+0x48a>
 8001762:	221f      	movs	r2, #31
 8001764:	0023      	movs	r3, r4
 8001766:	4252      	negs	r2, r2
 8001768:	1a51      	subs	r1, r2, r1
 800176a:	40cb      	lsrs	r3, r1
 800176c:	0019      	movs	r1, r3
 800176e:	2820      	cmp	r0, #32
 8001770:	d003      	beq.n	800177a <__aeabi_dmul+0x3ea>
 8001772:	4a3b      	ldr	r2, [pc, #236]	; (8001860 <__aeabi_dmul+0x4d0>)
 8001774:	4462      	add	r2, ip
 8001776:	4094      	lsls	r4, r2
 8001778:	4325      	orrs	r5, r4
 800177a:	1e6a      	subs	r2, r5, #1
 800177c:	4195      	sbcs	r5, r2
 800177e:	002a      	movs	r2, r5
 8001780:	430a      	orrs	r2, r1
 8001782:	2107      	movs	r1, #7
 8001784:	000d      	movs	r5, r1
 8001786:	2400      	movs	r4, #0
 8001788:	4015      	ands	r5, r2
 800178a:	4211      	tst	r1, r2
 800178c:	d05b      	beq.n	8001846 <__aeabi_dmul+0x4b6>
 800178e:	210f      	movs	r1, #15
 8001790:	2400      	movs	r4, #0
 8001792:	4011      	ands	r1, r2
 8001794:	2904      	cmp	r1, #4
 8001796:	d053      	beq.n	8001840 <__aeabi_dmul+0x4b0>
 8001798:	1d11      	adds	r1, r2, #4
 800179a:	4291      	cmp	r1, r2
 800179c:	4192      	sbcs	r2, r2
 800179e:	4252      	negs	r2, r2
 80017a0:	18a4      	adds	r4, r4, r2
 80017a2:	000a      	movs	r2, r1
 80017a4:	0223      	lsls	r3, r4, #8
 80017a6:	d54b      	bpl.n	8001840 <__aeabi_dmul+0x4b0>
 80017a8:	2201      	movs	r2, #1
 80017aa:	2400      	movs	r4, #0
 80017ac:	2500      	movs	r5, #0
 80017ae:	e650      	b.n	8001452 <__aeabi_dmul+0xc2>
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	031b      	lsls	r3, r3, #12
 80017b4:	421c      	tst	r4, r3
 80017b6:	d009      	beq.n	80017cc <__aeabi_dmul+0x43c>
 80017b8:	421e      	tst	r6, r3
 80017ba:	d107      	bne.n	80017cc <__aeabi_dmul+0x43c>
 80017bc:	4333      	orrs	r3, r6
 80017be:	031c      	lsls	r4, r3, #12
 80017c0:	4643      	mov	r3, r8
 80017c2:	0015      	movs	r5, r2
 80017c4:	0b24      	lsrs	r4, r4, #12
 80017c6:	4a25      	ldr	r2, [pc, #148]	; (800185c <__aeabi_dmul+0x4cc>)
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	e642      	b.n	8001452 <__aeabi_dmul+0xc2>
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	0312      	lsls	r2, r2, #12
 80017d0:	4314      	orrs	r4, r2
 80017d2:	0324      	lsls	r4, r4, #12
 80017d4:	4a21      	ldr	r2, [pc, #132]	; (800185c <__aeabi_dmul+0x4cc>)
 80017d6:	0b24      	lsrs	r4, r4, #12
 80017d8:	9701      	str	r7, [sp, #4]
 80017da:	e63a      	b.n	8001452 <__aeabi_dmul+0xc2>
 80017dc:	f000 fd32 	bl	8002244 <__clzsi2>
 80017e0:	0001      	movs	r1, r0
 80017e2:	0002      	movs	r2, r0
 80017e4:	3115      	adds	r1, #21
 80017e6:	3220      	adds	r2, #32
 80017e8:	291c      	cmp	r1, #28
 80017ea:	dc00      	bgt.n	80017ee <__aeabi_dmul+0x45e>
 80017ec:	e74b      	b.n	8001686 <__aeabi_dmul+0x2f6>
 80017ee:	0034      	movs	r4, r6
 80017f0:	3808      	subs	r0, #8
 80017f2:	2500      	movs	r5, #0
 80017f4:	4084      	lsls	r4, r0
 80017f6:	e750      	b.n	800169a <__aeabi_dmul+0x30a>
 80017f8:	f000 fd24 	bl	8002244 <__clzsi2>
 80017fc:	0003      	movs	r3, r0
 80017fe:	001a      	movs	r2, r3
 8001800:	3215      	adds	r2, #21
 8001802:	3020      	adds	r0, #32
 8001804:	2a1c      	cmp	r2, #28
 8001806:	dc00      	bgt.n	800180a <__aeabi_dmul+0x47a>
 8001808:	e71e      	b.n	8001648 <__aeabi_dmul+0x2b8>
 800180a:	4656      	mov	r6, sl
 800180c:	3b08      	subs	r3, #8
 800180e:	2200      	movs	r2, #0
 8001810:	409e      	lsls	r6, r3
 8001812:	e723      	b.n	800165c <__aeabi_dmul+0x2cc>
 8001814:	9b00      	ldr	r3, [sp, #0]
 8001816:	469c      	mov	ip, r3
 8001818:	e6e6      	b.n	80015e8 <__aeabi_dmul+0x258>
 800181a:	4912      	ldr	r1, [pc, #72]	; (8001864 <__aeabi_dmul+0x4d4>)
 800181c:	0022      	movs	r2, r4
 800181e:	4461      	add	r1, ip
 8001820:	002e      	movs	r6, r5
 8001822:	408d      	lsls	r5, r1
 8001824:	408a      	lsls	r2, r1
 8001826:	40c6      	lsrs	r6, r0
 8001828:	1e69      	subs	r1, r5, #1
 800182a:	418d      	sbcs	r5, r1
 800182c:	4332      	orrs	r2, r6
 800182e:	432a      	orrs	r2, r5
 8001830:	40c4      	lsrs	r4, r0
 8001832:	0753      	lsls	r3, r2, #29
 8001834:	d0b6      	beq.n	80017a4 <__aeabi_dmul+0x414>
 8001836:	210f      	movs	r1, #15
 8001838:	4011      	ands	r1, r2
 800183a:	2904      	cmp	r1, #4
 800183c:	d1ac      	bne.n	8001798 <__aeabi_dmul+0x408>
 800183e:	e7b1      	b.n	80017a4 <__aeabi_dmul+0x414>
 8001840:	0765      	lsls	r5, r4, #29
 8001842:	0264      	lsls	r4, r4, #9
 8001844:	0b24      	lsrs	r4, r4, #12
 8001846:	08d2      	lsrs	r2, r2, #3
 8001848:	4315      	orrs	r5, r2
 800184a:	2200      	movs	r2, #0
 800184c:	e601      	b.n	8001452 <__aeabi_dmul+0xc2>
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	0312      	lsls	r2, r2, #12
 8001852:	4314      	orrs	r4, r2
 8001854:	0324      	lsls	r4, r4, #12
 8001856:	4a01      	ldr	r2, [pc, #4]	; (800185c <__aeabi_dmul+0x4cc>)
 8001858:	0b24      	lsrs	r4, r4, #12
 800185a:	e5fa      	b.n	8001452 <__aeabi_dmul+0xc2>
 800185c:	000007ff 	.word	0x000007ff
 8001860:	0000043e 	.word	0x0000043e
 8001864:	0000041e 	.word	0x0000041e

08001868 <__aeabi_dsub>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	4657      	mov	r7, sl
 800186c:	464e      	mov	r6, r9
 800186e:	4645      	mov	r5, r8
 8001870:	46de      	mov	lr, fp
 8001872:	b5e0      	push	{r5, r6, r7, lr}
 8001874:	001e      	movs	r6, r3
 8001876:	0017      	movs	r7, r2
 8001878:	004a      	lsls	r2, r1, #1
 800187a:	030b      	lsls	r3, r1, #12
 800187c:	0d52      	lsrs	r2, r2, #21
 800187e:	0a5b      	lsrs	r3, r3, #9
 8001880:	4690      	mov	r8, r2
 8001882:	0f42      	lsrs	r2, r0, #29
 8001884:	431a      	orrs	r2, r3
 8001886:	0fcd      	lsrs	r5, r1, #31
 8001888:	4ccd      	ldr	r4, [pc, #820]	; (8001bc0 <__aeabi_dsub+0x358>)
 800188a:	0331      	lsls	r1, r6, #12
 800188c:	00c3      	lsls	r3, r0, #3
 800188e:	4694      	mov	ip, r2
 8001890:	0070      	lsls	r0, r6, #1
 8001892:	0f7a      	lsrs	r2, r7, #29
 8001894:	0a49      	lsrs	r1, r1, #9
 8001896:	00ff      	lsls	r7, r7, #3
 8001898:	469a      	mov	sl, r3
 800189a:	46b9      	mov	r9, r7
 800189c:	0d40      	lsrs	r0, r0, #21
 800189e:	0ff6      	lsrs	r6, r6, #31
 80018a0:	4311      	orrs	r1, r2
 80018a2:	42a0      	cmp	r0, r4
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dsub+0x40>
 80018a6:	e0b1      	b.n	8001a0c <__aeabi_dsub+0x1a4>
 80018a8:	2201      	movs	r2, #1
 80018aa:	4056      	eors	r6, r2
 80018ac:	46b3      	mov	fp, r6
 80018ae:	42b5      	cmp	r5, r6
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dsub+0x4c>
 80018b2:	e088      	b.n	80019c6 <__aeabi_dsub+0x15e>
 80018b4:	4642      	mov	r2, r8
 80018b6:	1a12      	subs	r2, r2, r0
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	dc00      	bgt.n	80018be <__aeabi_dsub+0x56>
 80018bc:	e0ae      	b.n	8001a1c <__aeabi_dsub+0x1b4>
 80018be:	2800      	cmp	r0, #0
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dsub+0x5c>
 80018c2:	e0c1      	b.n	8001a48 <__aeabi_dsub+0x1e0>
 80018c4:	48be      	ldr	r0, [pc, #760]	; (8001bc0 <__aeabi_dsub+0x358>)
 80018c6:	4580      	cmp	r8, r0
 80018c8:	d100      	bne.n	80018cc <__aeabi_dsub+0x64>
 80018ca:	e151      	b.n	8001b70 <__aeabi_dsub+0x308>
 80018cc:	2080      	movs	r0, #128	; 0x80
 80018ce:	0400      	lsls	r0, r0, #16
 80018d0:	4301      	orrs	r1, r0
 80018d2:	2a38      	cmp	r2, #56	; 0x38
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0x70>
 80018d6:	e17b      	b.n	8001bd0 <__aeabi_dsub+0x368>
 80018d8:	2a1f      	cmp	r2, #31
 80018da:	dd00      	ble.n	80018de <__aeabi_dsub+0x76>
 80018dc:	e1ee      	b.n	8001cbc <__aeabi_dsub+0x454>
 80018de:	2020      	movs	r0, #32
 80018e0:	003e      	movs	r6, r7
 80018e2:	1a80      	subs	r0, r0, r2
 80018e4:	000c      	movs	r4, r1
 80018e6:	40d6      	lsrs	r6, r2
 80018e8:	40d1      	lsrs	r1, r2
 80018ea:	4087      	lsls	r7, r0
 80018ec:	4662      	mov	r2, ip
 80018ee:	4084      	lsls	r4, r0
 80018f0:	1a52      	subs	r2, r2, r1
 80018f2:	1e78      	subs	r0, r7, #1
 80018f4:	4187      	sbcs	r7, r0
 80018f6:	4694      	mov	ip, r2
 80018f8:	4334      	orrs	r4, r6
 80018fa:	4327      	orrs	r7, r4
 80018fc:	1bdc      	subs	r4, r3, r7
 80018fe:	42a3      	cmp	r3, r4
 8001900:	419b      	sbcs	r3, r3
 8001902:	4662      	mov	r2, ip
 8001904:	425b      	negs	r3, r3
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	4699      	mov	r9, r3
 800190a:	464b      	mov	r3, r9
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	d400      	bmi.n	8001912 <__aeabi_dsub+0xaa>
 8001910:	e118      	b.n	8001b44 <__aeabi_dsub+0x2dc>
 8001912:	464b      	mov	r3, r9
 8001914:	0258      	lsls	r0, r3, #9
 8001916:	0a43      	lsrs	r3, r0, #9
 8001918:	4699      	mov	r9, r3
 800191a:	464b      	mov	r3, r9
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0xba>
 8001920:	e137      	b.n	8001b92 <__aeabi_dsub+0x32a>
 8001922:	4648      	mov	r0, r9
 8001924:	f000 fc8e 	bl	8002244 <__clzsi2>
 8001928:	0001      	movs	r1, r0
 800192a:	3908      	subs	r1, #8
 800192c:	2320      	movs	r3, #32
 800192e:	0022      	movs	r2, r4
 8001930:	4648      	mov	r0, r9
 8001932:	1a5b      	subs	r3, r3, r1
 8001934:	40da      	lsrs	r2, r3
 8001936:	4088      	lsls	r0, r1
 8001938:	408c      	lsls	r4, r1
 800193a:	4643      	mov	r3, r8
 800193c:	4310      	orrs	r0, r2
 800193e:	4588      	cmp	r8, r1
 8001940:	dd00      	ble.n	8001944 <__aeabi_dsub+0xdc>
 8001942:	e136      	b.n	8001bb2 <__aeabi_dsub+0x34a>
 8001944:	1ac9      	subs	r1, r1, r3
 8001946:	1c4b      	adds	r3, r1, #1
 8001948:	2b1f      	cmp	r3, #31
 800194a:	dd00      	ble.n	800194e <__aeabi_dsub+0xe6>
 800194c:	e0ea      	b.n	8001b24 <__aeabi_dsub+0x2bc>
 800194e:	2220      	movs	r2, #32
 8001950:	0026      	movs	r6, r4
 8001952:	1ad2      	subs	r2, r2, r3
 8001954:	0001      	movs	r1, r0
 8001956:	4094      	lsls	r4, r2
 8001958:	40de      	lsrs	r6, r3
 800195a:	40d8      	lsrs	r0, r3
 800195c:	2300      	movs	r3, #0
 800195e:	4091      	lsls	r1, r2
 8001960:	1e62      	subs	r2, r4, #1
 8001962:	4194      	sbcs	r4, r2
 8001964:	4681      	mov	r9, r0
 8001966:	4698      	mov	r8, r3
 8001968:	4331      	orrs	r1, r6
 800196a:	430c      	orrs	r4, r1
 800196c:	0763      	lsls	r3, r4, #29
 800196e:	d009      	beq.n	8001984 <__aeabi_dsub+0x11c>
 8001970:	230f      	movs	r3, #15
 8001972:	4023      	ands	r3, r4
 8001974:	2b04      	cmp	r3, #4
 8001976:	d005      	beq.n	8001984 <__aeabi_dsub+0x11c>
 8001978:	1d23      	adds	r3, r4, #4
 800197a:	42a3      	cmp	r3, r4
 800197c:	41a4      	sbcs	r4, r4
 800197e:	4264      	negs	r4, r4
 8001980:	44a1      	add	r9, r4
 8001982:	001c      	movs	r4, r3
 8001984:	464b      	mov	r3, r9
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	d400      	bmi.n	800198c <__aeabi_dsub+0x124>
 800198a:	e0de      	b.n	8001b4a <__aeabi_dsub+0x2e2>
 800198c:	4641      	mov	r1, r8
 800198e:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <__aeabi_dsub+0x358>)
 8001990:	3101      	adds	r1, #1
 8001992:	4299      	cmp	r1, r3
 8001994:	d100      	bne.n	8001998 <__aeabi_dsub+0x130>
 8001996:	e0e7      	b.n	8001b68 <__aeabi_dsub+0x300>
 8001998:	464b      	mov	r3, r9
 800199a:	488a      	ldr	r0, [pc, #552]	; (8001bc4 <__aeabi_dsub+0x35c>)
 800199c:	08e4      	lsrs	r4, r4, #3
 800199e:	4003      	ands	r3, r0
 80019a0:	0018      	movs	r0, r3
 80019a2:	0549      	lsls	r1, r1, #21
 80019a4:	075b      	lsls	r3, r3, #29
 80019a6:	0240      	lsls	r0, r0, #9
 80019a8:	4323      	orrs	r3, r4
 80019aa:	0d4a      	lsrs	r2, r1, #21
 80019ac:	0b04      	lsrs	r4, r0, #12
 80019ae:	0512      	lsls	r2, r2, #20
 80019b0:	07ed      	lsls	r5, r5, #31
 80019b2:	4322      	orrs	r2, r4
 80019b4:	432a      	orrs	r2, r5
 80019b6:	0018      	movs	r0, r3
 80019b8:	0011      	movs	r1, r2
 80019ba:	bcf0      	pop	{r4, r5, r6, r7}
 80019bc:	46bb      	mov	fp, r7
 80019be:	46b2      	mov	sl, r6
 80019c0:	46a9      	mov	r9, r5
 80019c2:	46a0      	mov	r8, r4
 80019c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019c6:	4642      	mov	r2, r8
 80019c8:	1a12      	subs	r2, r2, r0
 80019ca:	2a00      	cmp	r2, #0
 80019cc:	dd52      	ble.n	8001a74 <__aeabi_dsub+0x20c>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x16c>
 80019d2:	e09c      	b.n	8001b0e <__aeabi_dsub+0x2a6>
 80019d4:	45a0      	cmp	r8, r4
 80019d6:	d100      	bne.n	80019da <__aeabi_dsub+0x172>
 80019d8:	e0ca      	b.n	8001b70 <__aeabi_dsub+0x308>
 80019da:	2080      	movs	r0, #128	; 0x80
 80019dc:	0400      	lsls	r0, r0, #16
 80019de:	4301      	orrs	r1, r0
 80019e0:	2a38      	cmp	r2, #56	; 0x38
 80019e2:	dd00      	ble.n	80019e6 <__aeabi_dsub+0x17e>
 80019e4:	e149      	b.n	8001c7a <__aeabi_dsub+0x412>
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dc00      	bgt.n	80019ec <__aeabi_dsub+0x184>
 80019ea:	e197      	b.n	8001d1c <__aeabi_dsub+0x4b4>
 80019ec:	0010      	movs	r0, r2
 80019ee:	000e      	movs	r6, r1
 80019f0:	3820      	subs	r0, #32
 80019f2:	40c6      	lsrs	r6, r0
 80019f4:	2a20      	cmp	r2, #32
 80019f6:	d004      	beq.n	8001a02 <__aeabi_dsub+0x19a>
 80019f8:	2040      	movs	r0, #64	; 0x40
 80019fa:	1a82      	subs	r2, r0, r2
 80019fc:	4091      	lsls	r1, r2
 80019fe:	430f      	orrs	r7, r1
 8001a00:	46b9      	mov	r9, r7
 8001a02:	464c      	mov	r4, r9
 8001a04:	1e62      	subs	r2, r4, #1
 8001a06:	4194      	sbcs	r4, r2
 8001a08:	4334      	orrs	r4, r6
 8001a0a:	e13a      	b.n	8001c82 <__aeabi_dsub+0x41a>
 8001a0c:	000a      	movs	r2, r1
 8001a0e:	433a      	orrs	r2, r7
 8001a10:	d028      	beq.n	8001a64 <__aeabi_dsub+0x1fc>
 8001a12:	46b3      	mov	fp, r6
 8001a14:	42b5      	cmp	r5, r6
 8001a16:	d02b      	beq.n	8001a70 <__aeabi_dsub+0x208>
 8001a18:	4a6b      	ldr	r2, [pc, #428]	; (8001bc8 <__aeabi_dsub+0x360>)
 8001a1a:	4442      	add	r2, r8
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d05d      	beq.n	8001adc <__aeabi_dsub+0x274>
 8001a20:	4642      	mov	r2, r8
 8001a22:	4644      	mov	r4, r8
 8001a24:	1a82      	subs	r2, r0, r2
 8001a26:	2c00      	cmp	r4, #0
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x1c4>
 8001a2a:	e0f5      	b.n	8001c18 <__aeabi_dsub+0x3b0>
 8001a2c:	4665      	mov	r5, ip
 8001a2e:	431d      	orrs	r5, r3
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1cc>
 8001a32:	e19c      	b.n	8001d6e <__aeabi_dsub+0x506>
 8001a34:	1e55      	subs	r5, r2, #1
 8001a36:	2a01      	cmp	r2, #1
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x1d4>
 8001a3a:	e1fb      	b.n	8001e34 <__aeabi_dsub+0x5cc>
 8001a3c:	4c60      	ldr	r4, [pc, #384]	; (8001bc0 <__aeabi_dsub+0x358>)
 8001a3e:	42a2      	cmp	r2, r4
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x1dc>
 8001a42:	e1bd      	b.n	8001dc0 <__aeabi_dsub+0x558>
 8001a44:	002a      	movs	r2, r5
 8001a46:	e0f0      	b.n	8001c2a <__aeabi_dsub+0x3c2>
 8001a48:	0008      	movs	r0, r1
 8001a4a:	4338      	orrs	r0, r7
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1e8>
 8001a4e:	e0c3      	b.n	8001bd8 <__aeabi_dsub+0x370>
 8001a50:	1e50      	subs	r0, r2, #1
 8001a52:	2a01      	cmp	r2, #1
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dsub+0x1f0>
 8001a56:	e1a8      	b.n	8001daa <__aeabi_dsub+0x542>
 8001a58:	4c59      	ldr	r4, [pc, #356]	; (8001bc0 <__aeabi_dsub+0x358>)
 8001a5a:	42a2      	cmp	r2, r4
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x1f8>
 8001a5e:	e087      	b.n	8001b70 <__aeabi_dsub+0x308>
 8001a60:	0002      	movs	r2, r0
 8001a62:	e736      	b.n	80018d2 <__aeabi_dsub+0x6a>
 8001a64:	2201      	movs	r2, #1
 8001a66:	4056      	eors	r6, r2
 8001a68:	46b3      	mov	fp, r6
 8001a6a:	42b5      	cmp	r5, r6
 8001a6c:	d000      	beq.n	8001a70 <__aeabi_dsub+0x208>
 8001a6e:	e721      	b.n	80018b4 <__aeabi_dsub+0x4c>
 8001a70:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <__aeabi_dsub+0x360>)
 8001a72:	4442      	add	r2, r8
 8001a74:	2a00      	cmp	r2, #0
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dsub+0x212>
 8001a78:	e0b5      	b.n	8001be6 <__aeabi_dsub+0x37e>
 8001a7a:	4642      	mov	r2, r8
 8001a7c:	4644      	mov	r4, r8
 8001a7e:	1a82      	subs	r2, r0, r2
 8001a80:	2c00      	cmp	r4, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x21e>
 8001a84:	e138      	b.n	8001cf8 <__aeabi_dsub+0x490>
 8001a86:	4e4e      	ldr	r6, [pc, #312]	; (8001bc0 <__aeabi_dsub+0x358>)
 8001a88:	42b0      	cmp	r0, r6
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x226>
 8001a8c:	e1de      	b.n	8001e4c <__aeabi_dsub+0x5e4>
 8001a8e:	2680      	movs	r6, #128	; 0x80
 8001a90:	4664      	mov	r4, ip
 8001a92:	0436      	lsls	r6, r6, #16
 8001a94:	4334      	orrs	r4, r6
 8001a96:	46a4      	mov	ip, r4
 8001a98:	2a38      	cmp	r2, #56	; 0x38
 8001a9a:	dd00      	ble.n	8001a9e <__aeabi_dsub+0x236>
 8001a9c:	e196      	b.n	8001dcc <__aeabi_dsub+0x564>
 8001a9e:	2a1f      	cmp	r2, #31
 8001aa0:	dd00      	ble.n	8001aa4 <__aeabi_dsub+0x23c>
 8001aa2:	e224      	b.n	8001eee <__aeabi_dsub+0x686>
 8001aa4:	2620      	movs	r6, #32
 8001aa6:	1ab4      	subs	r4, r6, r2
 8001aa8:	46a2      	mov	sl, r4
 8001aaa:	4664      	mov	r4, ip
 8001aac:	4656      	mov	r6, sl
 8001aae:	40b4      	lsls	r4, r6
 8001ab0:	46a1      	mov	r9, r4
 8001ab2:	001c      	movs	r4, r3
 8001ab4:	464e      	mov	r6, r9
 8001ab6:	40d4      	lsrs	r4, r2
 8001ab8:	4326      	orrs	r6, r4
 8001aba:	0034      	movs	r4, r6
 8001abc:	4656      	mov	r6, sl
 8001abe:	40b3      	lsls	r3, r6
 8001ac0:	1e5e      	subs	r6, r3, #1
 8001ac2:	41b3      	sbcs	r3, r6
 8001ac4:	431c      	orrs	r4, r3
 8001ac6:	4663      	mov	r3, ip
 8001ac8:	40d3      	lsrs	r3, r2
 8001aca:	18c9      	adds	r1, r1, r3
 8001acc:	19e4      	adds	r4, r4, r7
 8001ace:	42bc      	cmp	r4, r7
 8001ad0:	41bf      	sbcs	r7, r7
 8001ad2:	427f      	negs	r7, r7
 8001ad4:	46b9      	mov	r9, r7
 8001ad6:	4680      	mov	r8, r0
 8001ad8:	4489      	add	r9, r1
 8001ada:	e0d8      	b.n	8001c8e <__aeabi_dsub+0x426>
 8001adc:	4640      	mov	r0, r8
 8001ade:	4c3b      	ldr	r4, [pc, #236]	; (8001bcc <__aeabi_dsub+0x364>)
 8001ae0:	3001      	adds	r0, #1
 8001ae2:	4220      	tst	r0, r4
 8001ae4:	d000      	beq.n	8001ae8 <__aeabi_dsub+0x280>
 8001ae6:	e0b4      	b.n	8001c52 <__aeabi_dsub+0x3ea>
 8001ae8:	4640      	mov	r0, r8
 8001aea:	2800      	cmp	r0, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x288>
 8001aee:	e144      	b.n	8001d7a <__aeabi_dsub+0x512>
 8001af0:	4660      	mov	r0, ip
 8001af2:	4318      	orrs	r0, r3
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x290>
 8001af6:	e190      	b.n	8001e1a <__aeabi_dsub+0x5b2>
 8001af8:	0008      	movs	r0, r1
 8001afa:	4338      	orrs	r0, r7
 8001afc:	d000      	beq.n	8001b00 <__aeabi_dsub+0x298>
 8001afe:	e1aa      	b.n	8001e56 <__aeabi_dsub+0x5ee>
 8001b00:	4661      	mov	r1, ip
 8001b02:	08db      	lsrs	r3, r3, #3
 8001b04:	0749      	lsls	r1, r1, #29
 8001b06:	430b      	orrs	r3, r1
 8001b08:	4661      	mov	r1, ip
 8001b0a:	08cc      	lsrs	r4, r1, #3
 8001b0c:	e027      	b.n	8001b5e <__aeabi_dsub+0x2f6>
 8001b0e:	0008      	movs	r0, r1
 8001b10:	4338      	orrs	r0, r7
 8001b12:	d061      	beq.n	8001bd8 <__aeabi_dsub+0x370>
 8001b14:	1e50      	subs	r0, r2, #1
 8001b16:	2a01      	cmp	r2, #1
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x2b4>
 8001b1a:	e139      	b.n	8001d90 <__aeabi_dsub+0x528>
 8001b1c:	42a2      	cmp	r2, r4
 8001b1e:	d027      	beq.n	8001b70 <__aeabi_dsub+0x308>
 8001b20:	0002      	movs	r2, r0
 8001b22:	e75d      	b.n	80019e0 <__aeabi_dsub+0x178>
 8001b24:	0002      	movs	r2, r0
 8001b26:	391f      	subs	r1, #31
 8001b28:	40ca      	lsrs	r2, r1
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d003      	beq.n	8001b38 <__aeabi_dsub+0x2d0>
 8001b30:	2240      	movs	r2, #64	; 0x40
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	4098      	lsls	r0, r3
 8001b36:	4304      	orrs	r4, r0
 8001b38:	1e63      	subs	r3, r4, #1
 8001b3a:	419c      	sbcs	r4, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4699      	mov	r9, r3
 8001b40:	4698      	mov	r8, r3
 8001b42:	430c      	orrs	r4, r1
 8001b44:	0763      	lsls	r3, r4, #29
 8001b46:	d000      	beq.n	8001b4a <__aeabi_dsub+0x2e2>
 8001b48:	e712      	b.n	8001970 <__aeabi_dsub+0x108>
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	08e4      	lsrs	r4, r4, #3
 8001b50:	075b      	lsls	r3, r3, #29
 8001b52:	4323      	orrs	r3, r4
 8001b54:	08d4      	lsrs	r4, r2, #3
 8001b56:	4642      	mov	r2, r8
 8001b58:	4919      	ldr	r1, [pc, #100]	; (8001bc0 <__aeabi_dsub+0x358>)
 8001b5a:	428a      	cmp	r2, r1
 8001b5c:	d00e      	beq.n	8001b7c <__aeabi_dsub+0x314>
 8001b5e:	0324      	lsls	r4, r4, #12
 8001b60:	0552      	lsls	r2, r2, #21
 8001b62:	0b24      	lsrs	r4, r4, #12
 8001b64:	0d52      	lsrs	r2, r2, #21
 8001b66:	e722      	b.n	80019ae <__aeabi_dsub+0x146>
 8001b68:	000a      	movs	r2, r1
 8001b6a:	2400      	movs	r4, #0
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e71e      	b.n	80019ae <__aeabi_dsub+0x146>
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	4662      	mov	r2, ip
 8001b74:	0752      	lsls	r2, r2, #29
 8001b76:	4313      	orrs	r3, r2
 8001b78:	4662      	mov	r2, ip
 8001b7a:	08d4      	lsrs	r4, r2, #3
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	4322      	orrs	r2, r4
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dsub+0x31c>
 8001b82:	e1fc      	b.n	8001f7e <__aeabi_dsub+0x716>
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	0312      	lsls	r2, r2, #12
 8001b88:	4314      	orrs	r4, r2
 8001b8a:	0324      	lsls	r4, r4, #12
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <__aeabi_dsub+0x358>)
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	e70d      	b.n	80019ae <__aeabi_dsub+0x146>
 8001b92:	0020      	movs	r0, r4
 8001b94:	f000 fb56 	bl	8002244 <__clzsi2>
 8001b98:	0001      	movs	r1, r0
 8001b9a:	3118      	adds	r1, #24
 8001b9c:	291f      	cmp	r1, #31
 8001b9e:	dc00      	bgt.n	8001ba2 <__aeabi_dsub+0x33a>
 8001ba0:	e6c4      	b.n	800192c <__aeabi_dsub+0xc4>
 8001ba2:	3808      	subs	r0, #8
 8001ba4:	4084      	lsls	r4, r0
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	0020      	movs	r0, r4
 8001baa:	2400      	movs	r4, #0
 8001bac:	4588      	cmp	r8, r1
 8001bae:	dc00      	bgt.n	8001bb2 <__aeabi_dsub+0x34a>
 8001bb0:	e6c8      	b.n	8001944 <__aeabi_dsub+0xdc>
 8001bb2:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <__aeabi_dsub+0x35c>)
 8001bb4:	1a5b      	subs	r3, r3, r1
 8001bb6:	4010      	ands	r0, r2
 8001bb8:	4698      	mov	r8, r3
 8001bba:	4681      	mov	r9, r0
 8001bbc:	e6d6      	b.n	800196c <__aeabi_dsub+0x104>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	000007ff 	.word	0x000007ff
 8001bc4:	ff7fffff 	.word	0xff7fffff
 8001bc8:	fffff801 	.word	0xfffff801
 8001bcc:	000007fe 	.word	0x000007fe
 8001bd0:	430f      	orrs	r7, r1
 8001bd2:	1e7a      	subs	r2, r7, #1
 8001bd4:	4197      	sbcs	r7, r2
 8001bd6:	e691      	b.n	80018fc <__aeabi_dsub+0x94>
 8001bd8:	4661      	mov	r1, ip
 8001bda:	08db      	lsrs	r3, r3, #3
 8001bdc:	0749      	lsls	r1, r1, #29
 8001bde:	430b      	orrs	r3, r1
 8001be0:	4661      	mov	r1, ip
 8001be2:	08cc      	lsrs	r4, r1, #3
 8001be4:	e7b8      	b.n	8001b58 <__aeabi_dsub+0x2f0>
 8001be6:	4640      	mov	r0, r8
 8001be8:	4cd3      	ldr	r4, [pc, #844]	; (8001f38 <__aeabi_dsub+0x6d0>)
 8001bea:	3001      	adds	r0, #1
 8001bec:	4220      	tst	r0, r4
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_dsub+0x38a>
 8001bf0:	e0a2      	b.n	8001d38 <__aeabi_dsub+0x4d0>
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d000      	beq.n	8001bfa <__aeabi_dsub+0x392>
 8001bf8:	e101      	b.n	8001dfe <__aeabi_dsub+0x596>
 8001bfa:	4660      	mov	r0, ip
 8001bfc:	4318      	orrs	r0, r3
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x39a>
 8001c00:	e15e      	b.n	8001ec0 <__aeabi_dsub+0x658>
 8001c02:	0008      	movs	r0, r1
 8001c04:	4338      	orrs	r0, r7
 8001c06:	d000      	beq.n	8001c0a <__aeabi_dsub+0x3a2>
 8001c08:	e15f      	b.n	8001eca <__aeabi_dsub+0x662>
 8001c0a:	4661      	mov	r1, ip
 8001c0c:	08db      	lsrs	r3, r3, #3
 8001c0e:	0749      	lsls	r1, r1, #29
 8001c10:	430b      	orrs	r3, r1
 8001c12:	4661      	mov	r1, ip
 8001c14:	08cc      	lsrs	r4, r1, #3
 8001c16:	e7a2      	b.n	8001b5e <__aeabi_dsub+0x2f6>
 8001c18:	4dc8      	ldr	r5, [pc, #800]	; (8001f3c <__aeabi_dsub+0x6d4>)
 8001c1a:	42a8      	cmp	r0, r5
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x3b8>
 8001c1e:	e0cf      	b.n	8001dc0 <__aeabi_dsub+0x558>
 8001c20:	2580      	movs	r5, #128	; 0x80
 8001c22:	4664      	mov	r4, ip
 8001c24:	042d      	lsls	r5, r5, #16
 8001c26:	432c      	orrs	r4, r5
 8001c28:	46a4      	mov	ip, r4
 8001c2a:	2a38      	cmp	r2, #56	; 0x38
 8001c2c:	dc56      	bgt.n	8001cdc <__aeabi_dsub+0x474>
 8001c2e:	2a1f      	cmp	r2, #31
 8001c30:	dd00      	ble.n	8001c34 <__aeabi_dsub+0x3cc>
 8001c32:	e0d1      	b.n	8001dd8 <__aeabi_dsub+0x570>
 8001c34:	2520      	movs	r5, #32
 8001c36:	001e      	movs	r6, r3
 8001c38:	1aad      	subs	r5, r5, r2
 8001c3a:	4664      	mov	r4, ip
 8001c3c:	40ab      	lsls	r3, r5
 8001c3e:	40ac      	lsls	r4, r5
 8001c40:	40d6      	lsrs	r6, r2
 8001c42:	1e5d      	subs	r5, r3, #1
 8001c44:	41ab      	sbcs	r3, r5
 8001c46:	4334      	orrs	r4, r6
 8001c48:	4323      	orrs	r3, r4
 8001c4a:	4664      	mov	r4, ip
 8001c4c:	40d4      	lsrs	r4, r2
 8001c4e:	1b09      	subs	r1, r1, r4
 8001c50:	e049      	b.n	8001ce6 <__aeabi_dsub+0x47e>
 8001c52:	4660      	mov	r0, ip
 8001c54:	1bdc      	subs	r4, r3, r7
 8001c56:	1a46      	subs	r6, r0, r1
 8001c58:	42a3      	cmp	r3, r4
 8001c5a:	4180      	sbcs	r0, r0
 8001c5c:	4240      	negs	r0, r0
 8001c5e:	4681      	mov	r9, r0
 8001c60:	0030      	movs	r0, r6
 8001c62:	464e      	mov	r6, r9
 8001c64:	1b80      	subs	r0, r0, r6
 8001c66:	4681      	mov	r9, r0
 8001c68:	0200      	lsls	r0, r0, #8
 8001c6a:	d476      	bmi.n	8001d5a <__aeabi_dsub+0x4f2>
 8001c6c:	464b      	mov	r3, r9
 8001c6e:	4323      	orrs	r3, r4
 8001c70:	d000      	beq.n	8001c74 <__aeabi_dsub+0x40c>
 8001c72:	e652      	b.n	800191a <__aeabi_dsub+0xb2>
 8001c74:	2400      	movs	r4, #0
 8001c76:	2500      	movs	r5, #0
 8001c78:	e771      	b.n	8001b5e <__aeabi_dsub+0x2f6>
 8001c7a:	4339      	orrs	r1, r7
 8001c7c:	000c      	movs	r4, r1
 8001c7e:	1e62      	subs	r2, r4, #1
 8001c80:	4194      	sbcs	r4, r2
 8001c82:	18e4      	adds	r4, r4, r3
 8001c84:	429c      	cmp	r4, r3
 8001c86:	419b      	sbcs	r3, r3
 8001c88:	425b      	negs	r3, r3
 8001c8a:	4463      	add	r3, ip
 8001c8c:	4699      	mov	r9, r3
 8001c8e:	464b      	mov	r3, r9
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	d400      	bmi.n	8001c96 <__aeabi_dsub+0x42e>
 8001c94:	e756      	b.n	8001b44 <__aeabi_dsub+0x2dc>
 8001c96:	2301      	movs	r3, #1
 8001c98:	469c      	mov	ip, r3
 8001c9a:	4ba8      	ldr	r3, [pc, #672]	; (8001f3c <__aeabi_dsub+0x6d4>)
 8001c9c:	44e0      	add	r8, ip
 8001c9e:	4598      	cmp	r8, r3
 8001ca0:	d038      	beq.n	8001d14 <__aeabi_dsub+0x4ac>
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	48a6      	ldr	r0, [pc, #664]	; (8001f40 <__aeabi_dsub+0x6d8>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4003      	ands	r3, r0
 8001caa:	0018      	movs	r0, r3
 8001cac:	0863      	lsrs	r3, r4, #1
 8001cae:	4014      	ands	r4, r2
 8001cb0:	431c      	orrs	r4, r3
 8001cb2:	07c3      	lsls	r3, r0, #31
 8001cb4:	431c      	orrs	r4, r3
 8001cb6:	0843      	lsrs	r3, r0, #1
 8001cb8:	4699      	mov	r9, r3
 8001cba:	e657      	b.n	800196c <__aeabi_dsub+0x104>
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	000e      	movs	r6, r1
 8001cc0:	3820      	subs	r0, #32
 8001cc2:	40c6      	lsrs	r6, r0
 8001cc4:	2a20      	cmp	r2, #32
 8001cc6:	d004      	beq.n	8001cd2 <__aeabi_dsub+0x46a>
 8001cc8:	2040      	movs	r0, #64	; 0x40
 8001cca:	1a82      	subs	r2, r0, r2
 8001ccc:	4091      	lsls	r1, r2
 8001cce:	430f      	orrs	r7, r1
 8001cd0:	46b9      	mov	r9, r7
 8001cd2:	464f      	mov	r7, r9
 8001cd4:	1e7a      	subs	r2, r7, #1
 8001cd6:	4197      	sbcs	r7, r2
 8001cd8:	4337      	orrs	r7, r6
 8001cda:	e60f      	b.n	80018fc <__aeabi_dsub+0x94>
 8001cdc:	4662      	mov	r2, ip
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	1e5a      	subs	r2, r3, #1
 8001ce4:	4193      	sbcs	r3, r2
 8001ce6:	1afc      	subs	r4, r7, r3
 8001ce8:	42a7      	cmp	r7, r4
 8001cea:	41bf      	sbcs	r7, r7
 8001cec:	427f      	negs	r7, r7
 8001cee:	1bcb      	subs	r3, r1, r7
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	465d      	mov	r5, fp
 8001cf4:	4680      	mov	r8, r0
 8001cf6:	e608      	b.n	800190a <__aeabi_dsub+0xa2>
 8001cf8:	4666      	mov	r6, ip
 8001cfa:	431e      	orrs	r6, r3
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x498>
 8001cfe:	e0be      	b.n	8001e7e <__aeabi_dsub+0x616>
 8001d00:	1e56      	subs	r6, r2, #1
 8001d02:	2a01      	cmp	r2, #1
 8001d04:	d100      	bne.n	8001d08 <__aeabi_dsub+0x4a0>
 8001d06:	e109      	b.n	8001f1c <__aeabi_dsub+0x6b4>
 8001d08:	4c8c      	ldr	r4, [pc, #560]	; (8001f3c <__aeabi_dsub+0x6d4>)
 8001d0a:	42a2      	cmp	r2, r4
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x4a8>
 8001d0e:	e119      	b.n	8001f44 <__aeabi_dsub+0x6dc>
 8001d10:	0032      	movs	r2, r6
 8001d12:	e6c1      	b.n	8001a98 <__aeabi_dsub+0x230>
 8001d14:	4642      	mov	r2, r8
 8001d16:	2400      	movs	r4, #0
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e648      	b.n	80019ae <__aeabi_dsub+0x146>
 8001d1c:	2020      	movs	r0, #32
 8001d1e:	000c      	movs	r4, r1
 8001d20:	1a80      	subs	r0, r0, r2
 8001d22:	003e      	movs	r6, r7
 8001d24:	4087      	lsls	r7, r0
 8001d26:	4084      	lsls	r4, r0
 8001d28:	40d6      	lsrs	r6, r2
 8001d2a:	1e78      	subs	r0, r7, #1
 8001d2c:	4187      	sbcs	r7, r0
 8001d2e:	40d1      	lsrs	r1, r2
 8001d30:	4334      	orrs	r4, r6
 8001d32:	433c      	orrs	r4, r7
 8001d34:	448c      	add	ip, r1
 8001d36:	e7a4      	b.n	8001c82 <__aeabi_dsub+0x41a>
 8001d38:	4a80      	ldr	r2, [pc, #512]	; (8001f3c <__aeabi_dsub+0x6d4>)
 8001d3a:	4290      	cmp	r0, r2
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x4d8>
 8001d3e:	e0e9      	b.n	8001f14 <__aeabi_dsub+0x6ac>
 8001d40:	19df      	adds	r7, r3, r7
 8001d42:	429f      	cmp	r7, r3
 8001d44:	419b      	sbcs	r3, r3
 8001d46:	4461      	add	r1, ip
 8001d48:	425b      	negs	r3, r3
 8001d4a:	18c9      	adds	r1, r1, r3
 8001d4c:	07cc      	lsls	r4, r1, #31
 8001d4e:	087f      	lsrs	r7, r7, #1
 8001d50:	084b      	lsrs	r3, r1, #1
 8001d52:	4699      	mov	r9, r3
 8001d54:	4680      	mov	r8, r0
 8001d56:	433c      	orrs	r4, r7
 8001d58:	e6f4      	b.n	8001b44 <__aeabi_dsub+0x2dc>
 8001d5a:	1afc      	subs	r4, r7, r3
 8001d5c:	42a7      	cmp	r7, r4
 8001d5e:	41bf      	sbcs	r7, r7
 8001d60:	4663      	mov	r3, ip
 8001d62:	427f      	negs	r7, r7
 8001d64:	1ac9      	subs	r1, r1, r3
 8001d66:	1bcb      	subs	r3, r1, r7
 8001d68:	4699      	mov	r9, r3
 8001d6a:	465d      	mov	r5, fp
 8001d6c:	e5d5      	b.n	800191a <__aeabi_dsub+0xb2>
 8001d6e:	08ff      	lsrs	r7, r7, #3
 8001d70:	074b      	lsls	r3, r1, #29
 8001d72:	465d      	mov	r5, fp
 8001d74:	433b      	orrs	r3, r7
 8001d76:	08cc      	lsrs	r4, r1, #3
 8001d78:	e6ee      	b.n	8001b58 <__aeabi_dsub+0x2f0>
 8001d7a:	4662      	mov	r2, ip
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dsub+0x51a>
 8001d80:	e082      	b.n	8001e88 <__aeabi_dsub+0x620>
 8001d82:	000b      	movs	r3, r1
 8001d84:	433b      	orrs	r3, r7
 8001d86:	d11b      	bne.n	8001dc0 <__aeabi_dsub+0x558>
 8001d88:	2480      	movs	r4, #128	; 0x80
 8001d8a:	2500      	movs	r5, #0
 8001d8c:	0324      	lsls	r4, r4, #12
 8001d8e:	e6f9      	b.n	8001b84 <__aeabi_dsub+0x31c>
 8001d90:	19dc      	adds	r4, r3, r7
 8001d92:	429c      	cmp	r4, r3
 8001d94:	419b      	sbcs	r3, r3
 8001d96:	4461      	add	r1, ip
 8001d98:	4689      	mov	r9, r1
 8001d9a:	425b      	negs	r3, r3
 8001d9c:	4499      	add	r9, r3
 8001d9e:	464b      	mov	r3, r9
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	d444      	bmi.n	8001e2e <__aeabi_dsub+0x5c6>
 8001da4:	2301      	movs	r3, #1
 8001da6:	4698      	mov	r8, r3
 8001da8:	e6cc      	b.n	8001b44 <__aeabi_dsub+0x2dc>
 8001daa:	1bdc      	subs	r4, r3, r7
 8001dac:	4662      	mov	r2, ip
 8001dae:	42a3      	cmp	r3, r4
 8001db0:	419b      	sbcs	r3, r3
 8001db2:	1a51      	subs	r1, r2, r1
 8001db4:	425b      	negs	r3, r3
 8001db6:	1acb      	subs	r3, r1, r3
 8001db8:	4699      	mov	r9, r3
 8001dba:	2301      	movs	r3, #1
 8001dbc:	4698      	mov	r8, r3
 8001dbe:	e5a4      	b.n	800190a <__aeabi_dsub+0xa2>
 8001dc0:	08ff      	lsrs	r7, r7, #3
 8001dc2:	074b      	lsls	r3, r1, #29
 8001dc4:	465d      	mov	r5, fp
 8001dc6:	433b      	orrs	r3, r7
 8001dc8:	08cc      	lsrs	r4, r1, #3
 8001dca:	e6d7      	b.n	8001b7c <__aeabi_dsub+0x314>
 8001dcc:	4662      	mov	r2, ip
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	0014      	movs	r4, r2
 8001dd2:	1e63      	subs	r3, r4, #1
 8001dd4:	419c      	sbcs	r4, r3
 8001dd6:	e679      	b.n	8001acc <__aeabi_dsub+0x264>
 8001dd8:	0015      	movs	r5, r2
 8001dda:	4664      	mov	r4, ip
 8001ddc:	3d20      	subs	r5, #32
 8001dde:	40ec      	lsrs	r4, r5
 8001de0:	46a0      	mov	r8, r4
 8001de2:	2a20      	cmp	r2, #32
 8001de4:	d005      	beq.n	8001df2 <__aeabi_dsub+0x58a>
 8001de6:	2540      	movs	r5, #64	; 0x40
 8001de8:	4664      	mov	r4, ip
 8001dea:	1aaa      	subs	r2, r5, r2
 8001dec:	4094      	lsls	r4, r2
 8001dee:	4323      	orrs	r3, r4
 8001df0:	469a      	mov	sl, r3
 8001df2:	4654      	mov	r4, sl
 8001df4:	1e63      	subs	r3, r4, #1
 8001df6:	419c      	sbcs	r4, r3
 8001df8:	4643      	mov	r3, r8
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	e773      	b.n	8001ce6 <__aeabi_dsub+0x47e>
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	d023      	beq.n	8001e4c <__aeabi_dsub+0x5e4>
 8001e04:	000a      	movs	r2, r1
 8001e06:	433a      	orrs	r2, r7
 8001e08:	d000      	beq.n	8001e0c <__aeabi_dsub+0x5a4>
 8001e0a:	e0a0      	b.n	8001f4e <__aeabi_dsub+0x6e6>
 8001e0c:	4662      	mov	r2, ip
 8001e0e:	08db      	lsrs	r3, r3, #3
 8001e10:	0752      	lsls	r2, r2, #29
 8001e12:	4313      	orrs	r3, r2
 8001e14:	4662      	mov	r2, ip
 8001e16:	08d4      	lsrs	r4, r2, #3
 8001e18:	e6b0      	b.n	8001b7c <__aeabi_dsub+0x314>
 8001e1a:	000b      	movs	r3, r1
 8001e1c:	433b      	orrs	r3, r7
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x5ba>
 8001e20:	e728      	b.n	8001c74 <__aeabi_dsub+0x40c>
 8001e22:	08ff      	lsrs	r7, r7, #3
 8001e24:	074b      	lsls	r3, r1, #29
 8001e26:	465d      	mov	r5, fp
 8001e28:	433b      	orrs	r3, r7
 8001e2a:	08cc      	lsrs	r4, r1, #3
 8001e2c:	e697      	b.n	8001b5e <__aeabi_dsub+0x2f6>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	4698      	mov	r8, r3
 8001e32:	e736      	b.n	8001ca2 <__aeabi_dsub+0x43a>
 8001e34:	1afc      	subs	r4, r7, r3
 8001e36:	42a7      	cmp	r7, r4
 8001e38:	41bf      	sbcs	r7, r7
 8001e3a:	4663      	mov	r3, ip
 8001e3c:	427f      	negs	r7, r7
 8001e3e:	1ac9      	subs	r1, r1, r3
 8001e40:	1bcb      	subs	r3, r1, r7
 8001e42:	4699      	mov	r9, r3
 8001e44:	2301      	movs	r3, #1
 8001e46:	465d      	mov	r5, fp
 8001e48:	4698      	mov	r8, r3
 8001e4a:	e55e      	b.n	800190a <__aeabi_dsub+0xa2>
 8001e4c:	074b      	lsls	r3, r1, #29
 8001e4e:	08ff      	lsrs	r7, r7, #3
 8001e50:	433b      	orrs	r3, r7
 8001e52:	08cc      	lsrs	r4, r1, #3
 8001e54:	e692      	b.n	8001b7c <__aeabi_dsub+0x314>
 8001e56:	1bdc      	subs	r4, r3, r7
 8001e58:	4660      	mov	r0, ip
 8001e5a:	42a3      	cmp	r3, r4
 8001e5c:	41b6      	sbcs	r6, r6
 8001e5e:	1a40      	subs	r0, r0, r1
 8001e60:	4276      	negs	r6, r6
 8001e62:	1b80      	subs	r0, r0, r6
 8001e64:	4681      	mov	r9, r0
 8001e66:	0200      	lsls	r0, r0, #8
 8001e68:	d560      	bpl.n	8001f2c <__aeabi_dsub+0x6c4>
 8001e6a:	1afc      	subs	r4, r7, r3
 8001e6c:	42a7      	cmp	r7, r4
 8001e6e:	41bf      	sbcs	r7, r7
 8001e70:	4663      	mov	r3, ip
 8001e72:	427f      	negs	r7, r7
 8001e74:	1ac9      	subs	r1, r1, r3
 8001e76:	1bcb      	subs	r3, r1, r7
 8001e78:	4699      	mov	r9, r3
 8001e7a:	465d      	mov	r5, fp
 8001e7c:	e576      	b.n	800196c <__aeabi_dsub+0x104>
 8001e7e:	08ff      	lsrs	r7, r7, #3
 8001e80:	074b      	lsls	r3, r1, #29
 8001e82:	433b      	orrs	r3, r7
 8001e84:	08cc      	lsrs	r4, r1, #3
 8001e86:	e667      	b.n	8001b58 <__aeabi_dsub+0x2f0>
 8001e88:	000a      	movs	r2, r1
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	433a      	orrs	r2, r7
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dsub+0x62a>
 8001e90:	e66f      	b.n	8001b72 <__aeabi_dsub+0x30a>
 8001e92:	4662      	mov	r2, ip
 8001e94:	0752      	lsls	r2, r2, #29
 8001e96:	4313      	orrs	r3, r2
 8001e98:	4662      	mov	r2, ip
 8001e9a:	08d4      	lsrs	r4, r2, #3
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	0312      	lsls	r2, r2, #12
 8001ea0:	4214      	tst	r4, r2
 8001ea2:	d007      	beq.n	8001eb4 <__aeabi_dsub+0x64c>
 8001ea4:	08c8      	lsrs	r0, r1, #3
 8001ea6:	4210      	tst	r0, r2
 8001ea8:	d104      	bne.n	8001eb4 <__aeabi_dsub+0x64c>
 8001eaa:	465d      	mov	r5, fp
 8001eac:	0004      	movs	r4, r0
 8001eae:	08fb      	lsrs	r3, r7, #3
 8001eb0:	0749      	lsls	r1, r1, #29
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	0f5a      	lsrs	r2, r3, #29
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	0752      	lsls	r2, r2, #29
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	e65d      	b.n	8001b7c <__aeabi_dsub+0x314>
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	08ff      	lsrs	r7, r7, #3
 8001ec4:	433b      	orrs	r3, r7
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e649      	b.n	8001b5e <__aeabi_dsub+0x2f6>
 8001eca:	19dc      	adds	r4, r3, r7
 8001ecc:	429c      	cmp	r4, r3
 8001ece:	419b      	sbcs	r3, r3
 8001ed0:	4461      	add	r1, ip
 8001ed2:	4689      	mov	r9, r1
 8001ed4:	425b      	negs	r3, r3
 8001ed6:	4499      	add	r9, r3
 8001ed8:	464b      	mov	r3, r9
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	d400      	bmi.n	8001ee0 <__aeabi_dsub+0x678>
 8001ede:	e631      	b.n	8001b44 <__aeabi_dsub+0x2dc>
 8001ee0:	464a      	mov	r2, r9
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <__aeabi_dsub+0x6d8>)
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	4691      	mov	r9, r2
 8001eea:	4698      	mov	r8, r3
 8001eec:	e62a      	b.n	8001b44 <__aeabi_dsub+0x2dc>
 8001eee:	0016      	movs	r6, r2
 8001ef0:	4664      	mov	r4, ip
 8001ef2:	3e20      	subs	r6, #32
 8001ef4:	40f4      	lsrs	r4, r6
 8001ef6:	46a0      	mov	r8, r4
 8001ef8:	2a20      	cmp	r2, #32
 8001efa:	d005      	beq.n	8001f08 <__aeabi_dsub+0x6a0>
 8001efc:	2640      	movs	r6, #64	; 0x40
 8001efe:	4664      	mov	r4, ip
 8001f00:	1ab2      	subs	r2, r6, r2
 8001f02:	4094      	lsls	r4, r2
 8001f04:	4323      	orrs	r3, r4
 8001f06:	469a      	mov	sl, r3
 8001f08:	4654      	mov	r4, sl
 8001f0a:	1e63      	subs	r3, r4, #1
 8001f0c:	419c      	sbcs	r4, r3
 8001f0e:	4643      	mov	r3, r8
 8001f10:	431c      	orrs	r4, r3
 8001f12:	e5db      	b.n	8001acc <__aeabi_dsub+0x264>
 8001f14:	0002      	movs	r2, r0
 8001f16:	2400      	movs	r4, #0
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e548      	b.n	80019ae <__aeabi_dsub+0x146>
 8001f1c:	19dc      	adds	r4, r3, r7
 8001f1e:	42bc      	cmp	r4, r7
 8001f20:	41bf      	sbcs	r7, r7
 8001f22:	4461      	add	r1, ip
 8001f24:	4689      	mov	r9, r1
 8001f26:	427f      	negs	r7, r7
 8001f28:	44b9      	add	r9, r7
 8001f2a:	e738      	b.n	8001d9e <__aeabi_dsub+0x536>
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x6cc>
 8001f32:	e69f      	b.n	8001c74 <__aeabi_dsub+0x40c>
 8001f34:	e606      	b.n	8001b44 <__aeabi_dsub+0x2dc>
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	000007fe 	.word	0x000007fe
 8001f3c:	000007ff 	.word	0x000007ff
 8001f40:	ff7fffff 	.word	0xff7fffff
 8001f44:	08ff      	lsrs	r7, r7, #3
 8001f46:	074b      	lsls	r3, r1, #29
 8001f48:	433b      	orrs	r3, r7
 8001f4a:	08cc      	lsrs	r4, r1, #3
 8001f4c:	e616      	b.n	8001b7c <__aeabi_dsub+0x314>
 8001f4e:	4662      	mov	r2, ip
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	0752      	lsls	r2, r2, #29
 8001f54:	4313      	orrs	r3, r2
 8001f56:	4662      	mov	r2, ip
 8001f58:	08d4      	lsrs	r4, r2, #3
 8001f5a:	2280      	movs	r2, #128	; 0x80
 8001f5c:	0312      	lsls	r2, r2, #12
 8001f5e:	4214      	tst	r4, r2
 8001f60:	d007      	beq.n	8001f72 <__aeabi_dsub+0x70a>
 8001f62:	08c8      	lsrs	r0, r1, #3
 8001f64:	4210      	tst	r0, r2
 8001f66:	d104      	bne.n	8001f72 <__aeabi_dsub+0x70a>
 8001f68:	465d      	mov	r5, fp
 8001f6a:	0004      	movs	r4, r0
 8001f6c:	08fb      	lsrs	r3, r7, #3
 8001f6e:	0749      	lsls	r1, r1, #29
 8001f70:	430b      	orrs	r3, r1
 8001f72:	0f5a      	lsrs	r2, r3, #29
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	0752      	lsls	r2, r2, #29
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	e5fe      	b.n	8001b7c <__aeabi_dsub+0x314>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	4a01      	ldr	r2, [pc, #4]	; (8001f88 <__aeabi_dsub+0x720>)
 8001f82:	001c      	movs	r4, r3
 8001f84:	e513      	b.n	80019ae <__aeabi_dsub+0x146>
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	000007ff 	.word	0x000007ff

08001f8c <__aeabi_d2iz>:
 8001f8c:	000a      	movs	r2, r1
 8001f8e:	b530      	push	{r4, r5, lr}
 8001f90:	4c13      	ldr	r4, [pc, #76]	; (8001fe0 <__aeabi_d2iz+0x54>)
 8001f92:	0053      	lsls	r3, r2, #1
 8001f94:	0309      	lsls	r1, r1, #12
 8001f96:	0005      	movs	r5, r0
 8001f98:	0b09      	lsrs	r1, r1, #12
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	0d5b      	lsrs	r3, r3, #21
 8001f9e:	0fd2      	lsrs	r2, r2, #31
 8001fa0:	42a3      	cmp	r3, r4
 8001fa2:	dd04      	ble.n	8001fae <__aeabi_d2iz+0x22>
 8001fa4:	480f      	ldr	r0, [pc, #60]	; (8001fe4 <__aeabi_d2iz+0x58>)
 8001fa6:	4283      	cmp	r3, r0
 8001fa8:	dd02      	ble.n	8001fb0 <__aeabi_d2iz+0x24>
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <__aeabi_d2iz+0x5c>)
 8001fac:	18d0      	adds	r0, r2, r3
 8001fae:	bd30      	pop	{r4, r5, pc}
 8001fb0:	2080      	movs	r0, #128	; 0x80
 8001fb2:	0340      	lsls	r0, r0, #13
 8001fb4:	4301      	orrs	r1, r0
 8001fb6:	480d      	ldr	r0, [pc, #52]	; (8001fec <__aeabi_d2iz+0x60>)
 8001fb8:	1ac0      	subs	r0, r0, r3
 8001fba:	281f      	cmp	r0, #31
 8001fbc:	dd08      	ble.n	8001fd0 <__aeabi_d2iz+0x44>
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <__aeabi_d2iz+0x64>)
 8001fc0:	1ac3      	subs	r3, r0, r3
 8001fc2:	40d9      	lsrs	r1, r3
 8001fc4:	000b      	movs	r3, r1
 8001fc6:	4258      	negs	r0, r3
 8001fc8:	2a00      	cmp	r2, #0
 8001fca:	d1f0      	bne.n	8001fae <__aeabi_d2iz+0x22>
 8001fcc:	0018      	movs	r0, r3
 8001fce:	e7ee      	b.n	8001fae <__aeabi_d2iz+0x22>
 8001fd0:	4c08      	ldr	r4, [pc, #32]	; (8001ff4 <__aeabi_d2iz+0x68>)
 8001fd2:	40c5      	lsrs	r5, r0
 8001fd4:	46a4      	mov	ip, r4
 8001fd6:	4463      	add	r3, ip
 8001fd8:	4099      	lsls	r1, r3
 8001fda:	000b      	movs	r3, r1
 8001fdc:	432b      	orrs	r3, r5
 8001fde:	e7f2      	b.n	8001fc6 <__aeabi_d2iz+0x3a>
 8001fe0:	000003fe 	.word	0x000003fe
 8001fe4:	0000041d 	.word	0x0000041d
 8001fe8:	7fffffff 	.word	0x7fffffff
 8001fec:	00000433 	.word	0x00000433
 8001ff0:	00000413 	.word	0x00000413
 8001ff4:	fffffbed 	.word	0xfffffbed

08001ff8 <__aeabi_i2d>:
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d016      	beq.n	800202c <__aeabi_i2d+0x34>
 8001ffe:	17c3      	asrs	r3, r0, #31
 8002000:	18c5      	adds	r5, r0, r3
 8002002:	405d      	eors	r5, r3
 8002004:	0fc4      	lsrs	r4, r0, #31
 8002006:	0028      	movs	r0, r5
 8002008:	f000 f91c 	bl	8002244 <__clzsi2>
 800200c:	4a11      	ldr	r2, [pc, #68]	; (8002054 <__aeabi_i2d+0x5c>)
 800200e:	1a12      	subs	r2, r2, r0
 8002010:	280a      	cmp	r0, #10
 8002012:	dc16      	bgt.n	8002042 <__aeabi_i2d+0x4a>
 8002014:	0003      	movs	r3, r0
 8002016:	002e      	movs	r6, r5
 8002018:	3315      	adds	r3, #21
 800201a:	409e      	lsls	r6, r3
 800201c:	230b      	movs	r3, #11
 800201e:	1a18      	subs	r0, r3, r0
 8002020:	40c5      	lsrs	r5, r0
 8002022:	0552      	lsls	r2, r2, #21
 8002024:	032d      	lsls	r5, r5, #12
 8002026:	0b2d      	lsrs	r5, r5, #12
 8002028:	0d53      	lsrs	r3, r2, #21
 800202a:	e003      	b.n	8002034 <__aeabi_i2d+0x3c>
 800202c:	2400      	movs	r4, #0
 800202e:	2300      	movs	r3, #0
 8002030:	2500      	movs	r5, #0
 8002032:	2600      	movs	r6, #0
 8002034:	051b      	lsls	r3, r3, #20
 8002036:	432b      	orrs	r3, r5
 8002038:	07e4      	lsls	r4, r4, #31
 800203a:	4323      	orrs	r3, r4
 800203c:	0030      	movs	r0, r6
 800203e:	0019      	movs	r1, r3
 8002040:	bd70      	pop	{r4, r5, r6, pc}
 8002042:	380b      	subs	r0, #11
 8002044:	4085      	lsls	r5, r0
 8002046:	0552      	lsls	r2, r2, #21
 8002048:	032d      	lsls	r5, r5, #12
 800204a:	2600      	movs	r6, #0
 800204c:	0b2d      	lsrs	r5, r5, #12
 800204e:	0d53      	lsrs	r3, r2, #21
 8002050:	e7f0      	b.n	8002034 <__aeabi_i2d+0x3c>
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	0000041e 	.word	0x0000041e

08002058 <__aeabi_ui2d>:
 8002058:	b510      	push	{r4, lr}
 800205a:	1e04      	subs	r4, r0, #0
 800205c:	d010      	beq.n	8002080 <__aeabi_ui2d+0x28>
 800205e:	f000 f8f1 	bl	8002244 <__clzsi2>
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <__aeabi_ui2d+0x48>)
 8002064:	1a1b      	subs	r3, r3, r0
 8002066:	280a      	cmp	r0, #10
 8002068:	dc11      	bgt.n	800208e <__aeabi_ui2d+0x36>
 800206a:	220b      	movs	r2, #11
 800206c:	0021      	movs	r1, r4
 800206e:	1a12      	subs	r2, r2, r0
 8002070:	40d1      	lsrs	r1, r2
 8002072:	3015      	adds	r0, #21
 8002074:	030a      	lsls	r2, r1, #12
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	4084      	lsls	r4, r0
 800207a:	0b12      	lsrs	r2, r2, #12
 800207c:	0d5b      	lsrs	r3, r3, #21
 800207e:	e001      	b.n	8002084 <__aeabi_ui2d+0x2c>
 8002080:	2300      	movs	r3, #0
 8002082:	2200      	movs	r2, #0
 8002084:	051b      	lsls	r3, r3, #20
 8002086:	4313      	orrs	r3, r2
 8002088:	0020      	movs	r0, r4
 800208a:	0019      	movs	r1, r3
 800208c:	bd10      	pop	{r4, pc}
 800208e:	0022      	movs	r2, r4
 8002090:	380b      	subs	r0, #11
 8002092:	4082      	lsls	r2, r0
 8002094:	055b      	lsls	r3, r3, #21
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	2400      	movs	r4, #0
 800209a:	0b12      	lsrs	r2, r2, #12
 800209c:	0d5b      	lsrs	r3, r3, #21
 800209e:	e7f1      	b.n	8002084 <__aeabi_ui2d+0x2c>
 80020a0:	0000041e 	.word	0x0000041e

080020a4 <__aeabi_f2d>:
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	0043      	lsls	r3, r0, #1
 80020a8:	0246      	lsls	r6, r0, #9
 80020aa:	0fc4      	lsrs	r4, r0, #31
 80020ac:	20fe      	movs	r0, #254	; 0xfe
 80020ae:	0e1b      	lsrs	r3, r3, #24
 80020b0:	1c59      	adds	r1, r3, #1
 80020b2:	0a75      	lsrs	r5, r6, #9
 80020b4:	4208      	tst	r0, r1
 80020b6:	d00c      	beq.n	80020d2 <__aeabi_f2d+0x2e>
 80020b8:	22e0      	movs	r2, #224	; 0xe0
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4694      	mov	ip, r2
 80020be:	076d      	lsls	r5, r5, #29
 80020c0:	0b36      	lsrs	r6, r6, #12
 80020c2:	4463      	add	r3, ip
 80020c4:	051b      	lsls	r3, r3, #20
 80020c6:	4333      	orrs	r3, r6
 80020c8:	07e4      	lsls	r4, r4, #31
 80020ca:	4323      	orrs	r3, r4
 80020cc:	0028      	movs	r0, r5
 80020ce:	0019      	movs	r1, r3
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d114      	bne.n	8002100 <__aeabi_f2d+0x5c>
 80020d6:	2d00      	cmp	r5, #0
 80020d8:	d01b      	beq.n	8002112 <__aeabi_f2d+0x6e>
 80020da:	0028      	movs	r0, r5
 80020dc:	f000 f8b2 	bl	8002244 <__clzsi2>
 80020e0:	280a      	cmp	r0, #10
 80020e2:	dc1c      	bgt.n	800211e <__aeabi_f2d+0x7a>
 80020e4:	230b      	movs	r3, #11
 80020e6:	002e      	movs	r6, r5
 80020e8:	1a1b      	subs	r3, r3, r0
 80020ea:	40de      	lsrs	r6, r3
 80020ec:	0003      	movs	r3, r0
 80020ee:	3315      	adds	r3, #21
 80020f0:	409d      	lsls	r5, r3
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <__aeabi_f2d+0x88>)
 80020f4:	0336      	lsls	r6, r6, #12
 80020f6:	1a12      	subs	r2, r2, r0
 80020f8:	0552      	lsls	r2, r2, #21
 80020fa:	0b36      	lsrs	r6, r6, #12
 80020fc:	0d53      	lsrs	r3, r2, #21
 80020fe:	e7e1      	b.n	80020c4 <__aeabi_f2d+0x20>
 8002100:	2d00      	cmp	r5, #0
 8002102:	d009      	beq.n	8002118 <__aeabi_f2d+0x74>
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	0b36      	lsrs	r6, r6, #12
 8002108:	0312      	lsls	r2, r2, #12
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <__aeabi_f2d+0x8c>)
 800210c:	076d      	lsls	r5, r5, #29
 800210e:	4316      	orrs	r6, r2
 8002110:	e7d8      	b.n	80020c4 <__aeabi_f2d+0x20>
 8002112:	2300      	movs	r3, #0
 8002114:	2600      	movs	r6, #0
 8002116:	e7d5      	b.n	80020c4 <__aeabi_f2d+0x20>
 8002118:	2600      	movs	r6, #0
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <__aeabi_f2d+0x8c>)
 800211c:	e7d2      	b.n	80020c4 <__aeabi_f2d+0x20>
 800211e:	0003      	movs	r3, r0
 8002120:	3b0b      	subs	r3, #11
 8002122:	409d      	lsls	r5, r3
 8002124:	002e      	movs	r6, r5
 8002126:	2500      	movs	r5, #0
 8002128:	e7e3      	b.n	80020f2 <__aeabi_f2d+0x4e>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	00000389 	.word	0x00000389
 8002130:	000007ff 	.word	0x000007ff

08002134 <__aeabi_d2f>:
 8002134:	0002      	movs	r2, r0
 8002136:	004b      	lsls	r3, r1, #1
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	0d5b      	lsrs	r3, r3, #21
 800213c:	030c      	lsls	r4, r1, #12
 800213e:	4e3d      	ldr	r6, [pc, #244]	; (8002234 <__aeabi_d2f+0x100>)
 8002140:	0a64      	lsrs	r4, r4, #9
 8002142:	0f40      	lsrs	r0, r0, #29
 8002144:	1c5f      	adds	r7, r3, #1
 8002146:	0fc9      	lsrs	r1, r1, #31
 8002148:	4304      	orrs	r4, r0
 800214a:	00d5      	lsls	r5, r2, #3
 800214c:	4237      	tst	r7, r6
 800214e:	d00a      	beq.n	8002166 <__aeabi_d2f+0x32>
 8002150:	4839      	ldr	r0, [pc, #228]	; (8002238 <__aeabi_d2f+0x104>)
 8002152:	181e      	adds	r6, r3, r0
 8002154:	2efe      	cmp	r6, #254	; 0xfe
 8002156:	dd16      	ble.n	8002186 <__aeabi_d2f+0x52>
 8002158:	20ff      	movs	r0, #255	; 0xff
 800215a:	2400      	movs	r4, #0
 800215c:	05c0      	lsls	r0, r0, #23
 800215e:	4320      	orrs	r0, r4
 8002160:	07c9      	lsls	r1, r1, #31
 8002162:	4308      	orrs	r0, r1
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <__aeabi_d2f+0x44>
 800216a:	432c      	orrs	r4, r5
 800216c:	d026      	beq.n	80021bc <__aeabi_d2f+0x88>
 800216e:	2205      	movs	r2, #5
 8002170:	0192      	lsls	r2, r2, #6
 8002172:	0a54      	lsrs	r4, r2, #9
 8002174:	b2d8      	uxtb	r0, r3
 8002176:	e7f1      	b.n	800215c <__aeabi_d2f+0x28>
 8002178:	4325      	orrs	r5, r4
 800217a:	d0ed      	beq.n	8002158 <__aeabi_d2f+0x24>
 800217c:	2080      	movs	r0, #128	; 0x80
 800217e:	03c0      	lsls	r0, r0, #15
 8002180:	4304      	orrs	r4, r0
 8002182:	20ff      	movs	r0, #255	; 0xff
 8002184:	e7ea      	b.n	800215c <__aeabi_d2f+0x28>
 8002186:	2e00      	cmp	r6, #0
 8002188:	dd1b      	ble.n	80021c2 <__aeabi_d2f+0x8e>
 800218a:	0192      	lsls	r2, r2, #6
 800218c:	1e53      	subs	r3, r2, #1
 800218e:	419a      	sbcs	r2, r3
 8002190:	00e4      	lsls	r4, r4, #3
 8002192:	0f6d      	lsrs	r5, r5, #29
 8002194:	4322      	orrs	r2, r4
 8002196:	432a      	orrs	r2, r5
 8002198:	0753      	lsls	r3, r2, #29
 800219a:	d048      	beq.n	800222e <__aeabi_d2f+0xfa>
 800219c:	230f      	movs	r3, #15
 800219e:	4013      	ands	r3, r2
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d000      	beq.n	80021a6 <__aeabi_d2f+0x72>
 80021a4:	3204      	adds	r2, #4
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	04db      	lsls	r3, r3, #19
 80021aa:	4013      	ands	r3, r2
 80021ac:	d03f      	beq.n	800222e <__aeabi_d2f+0xfa>
 80021ae:	1c70      	adds	r0, r6, #1
 80021b0:	2efe      	cmp	r6, #254	; 0xfe
 80021b2:	d0d1      	beq.n	8002158 <__aeabi_d2f+0x24>
 80021b4:	0192      	lsls	r2, r2, #6
 80021b6:	0a54      	lsrs	r4, r2, #9
 80021b8:	b2c0      	uxtb	r0, r0
 80021ba:	e7cf      	b.n	800215c <__aeabi_d2f+0x28>
 80021bc:	2000      	movs	r0, #0
 80021be:	2400      	movs	r4, #0
 80021c0:	e7cc      	b.n	800215c <__aeabi_d2f+0x28>
 80021c2:	0032      	movs	r2, r6
 80021c4:	3217      	adds	r2, #23
 80021c6:	db22      	blt.n	800220e <__aeabi_d2f+0xda>
 80021c8:	2080      	movs	r0, #128	; 0x80
 80021ca:	0400      	lsls	r0, r0, #16
 80021cc:	4320      	orrs	r0, r4
 80021ce:	241e      	movs	r4, #30
 80021d0:	1ba4      	subs	r4, r4, r6
 80021d2:	2c1f      	cmp	r4, #31
 80021d4:	dd1d      	ble.n	8002212 <__aeabi_d2f+0xde>
 80021d6:	2202      	movs	r2, #2
 80021d8:	4252      	negs	r2, r2
 80021da:	1b96      	subs	r6, r2, r6
 80021dc:	0002      	movs	r2, r0
 80021de:	40f2      	lsrs	r2, r6
 80021e0:	0016      	movs	r6, r2
 80021e2:	2c20      	cmp	r4, #32
 80021e4:	d004      	beq.n	80021f0 <__aeabi_d2f+0xbc>
 80021e6:	4a15      	ldr	r2, [pc, #84]	; (800223c <__aeabi_d2f+0x108>)
 80021e8:	4694      	mov	ip, r2
 80021ea:	4463      	add	r3, ip
 80021ec:	4098      	lsls	r0, r3
 80021ee:	4305      	orrs	r5, r0
 80021f0:	002a      	movs	r2, r5
 80021f2:	1e53      	subs	r3, r2, #1
 80021f4:	419a      	sbcs	r2, r3
 80021f6:	4332      	orrs	r2, r6
 80021f8:	2600      	movs	r6, #0
 80021fa:	0753      	lsls	r3, r2, #29
 80021fc:	d1ce      	bne.n	800219c <__aeabi_d2f+0x68>
 80021fe:	2480      	movs	r4, #128	; 0x80
 8002200:	0013      	movs	r3, r2
 8002202:	04e4      	lsls	r4, r4, #19
 8002204:	2001      	movs	r0, #1
 8002206:	4023      	ands	r3, r4
 8002208:	4222      	tst	r2, r4
 800220a:	d1d3      	bne.n	80021b4 <__aeabi_d2f+0x80>
 800220c:	e7b0      	b.n	8002170 <__aeabi_d2f+0x3c>
 800220e:	2300      	movs	r3, #0
 8002210:	e7ad      	b.n	800216e <__aeabi_d2f+0x3a>
 8002212:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <__aeabi_d2f+0x10c>)
 8002214:	4694      	mov	ip, r2
 8002216:	002a      	movs	r2, r5
 8002218:	40e2      	lsrs	r2, r4
 800221a:	0014      	movs	r4, r2
 800221c:	002a      	movs	r2, r5
 800221e:	4463      	add	r3, ip
 8002220:	409a      	lsls	r2, r3
 8002222:	4098      	lsls	r0, r3
 8002224:	1e55      	subs	r5, r2, #1
 8002226:	41aa      	sbcs	r2, r5
 8002228:	4302      	orrs	r2, r0
 800222a:	4322      	orrs	r2, r4
 800222c:	e7e4      	b.n	80021f8 <__aeabi_d2f+0xc4>
 800222e:	0033      	movs	r3, r6
 8002230:	e79e      	b.n	8002170 <__aeabi_d2f+0x3c>
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	000007fe 	.word	0x000007fe
 8002238:	fffffc80 	.word	0xfffffc80
 800223c:	fffffca2 	.word	0xfffffca2
 8002240:	fffffc82 	.word	0xfffffc82

08002244 <__clzsi2>:
 8002244:	211c      	movs	r1, #28
 8002246:	2301      	movs	r3, #1
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	4298      	cmp	r0, r3
 800224c:	d301      	bcc.n	8002252 <__clzsi2+0xe>
 800224e:	0c00      	lsrs	r0, r0, #16
 8002250:	3910      	subs	r1, #16
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	4298      	cmp	r0, r3
 8002256:	d301      	bcc.n	800225c <__clzsi2+0x18>
 8002258:	0a00      	lsrs	r0, r0, #8
 800225a:	3908      	subs	r1, #8
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	4298      	cmp	r0, r3
 8002260:	d301      	bcc.n	8002266 <__clzsi2+0x22>
 8002262:	0900      	lsrs	r0, r0, #4
 8002264:	3904      	subs	r1, #4
 8002266:	a202      	add	r2, pc, #8	; (adr r2, 8002270 <__clzsi2+0x2c>)
 8002268:	5c10      	ldrb	r0, [r2, r0]
 800226a:	1840      	adds	r0, r0, r1
 800226c:	4770      	bx	lr
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	02020304 	.word	0x02020304
 8002274:	01010101 	.word	0x01010101
	...

08002280 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <LL_IOP_GRP1_EnableClock+0x28>)
 800228a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <LL_IOP_GRP1_EnableClock+0x28>)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	430a      	orrs	r2, r1
 8002292:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <LL_IOP_GRP1_EnableClock+0x28>)
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4013      	ands	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b004      	add	sp, #16
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000

080022ac <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}

080022c0 <buttonInit>:
#include "button.h"



void buttonInit(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	003b      	movs	r3, r7
 80022c8:	0018      	movs	r0, r3
 80022ca:	2318      	movs	r3, #24
 80022cc:	001a      	movs	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f003 fe1f 	bl	8005f12 <memset>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7ff ffd3 	bl	8002280 <LL_IOP_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80022da:	003b      	movs	r3, r7
 80022dc:	2210      	movs	r2, #16
 80022de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80022e0:	003b      	movs	r3, r7
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022e6:	003b      	movs	r3, r7
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	003a      	movs	r2, r7
 80022ee:	23a0      	movs	r3, #160	; 0xa0
 80022f0:	05db      	lsls	r3, r3, #23
 80022f2:	0011      	movs	r1, r2
 80022f4:	0018      	movs	r0, r3
 80022f6:	f003 fa7e 	bl	80057f6 <LL_GPIO_Init>
}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b006      	add	sp, #24
 8002300:	bd80      	pop	{r7, pc}

08002302 <buttonProcess>:



ButtonClickState buttonProcess(ButtonStruct *btn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	const uint16_t tickShortClick = 20;
 800230a:	230c      	movs	r3, #12
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2214      	movs	r2, #20
 8002310:	801a      	strh	r2, [r3, #0]
	const uint16_t tickLongClick = 200;
 8002312:	230a      	movs	r3, #10
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	22c8      	movs	r2, #200	; 0xc8
 8002318:	801a      	strh	r2, [r3, #0]
	ButtonClickState res = BUTTON_NO_CLICK;
 800231a:	230f      	movs	r3, #15
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]

	if ((LL_GPIO_ReadInputPort(btn->port) & (btn->pin)) == 0) {
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	0018      	movs	r0, r3
 8002328:	f7ff ffc0 	bl	80022ac <LL_GPIO_ReadInputPort>
 800232c:	0002      	movs	r2, r0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	891b      	ldrh	r3, [r3, #8]
 8002332:	4013      	ands	r3, r2
 8002334:	d106      	bne.n	8002344 <buttonProcess+0x42>
		btn->pressTicks++;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	801a      	strh	r2, [r3, #0]
 8002342:	e019      	b.n	8002378 <buttonProcess+0x76>
	} else {
		if (btn->pressTicks >= tickLongClick) {
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	220a      	movs	r2, #10
 800234a:	18ba      	adds	r2, r7, r2
 800234c:	8812      	ldrh	r2, [r2, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d804      	bhi.n	800235c <buttonProcess+0x5a>
			res = BUTTON_LONG_CLICK;
 8002352:	230f      	movs	r3, #15
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e00a      	b.n	8002372 <buttonProcess+0x70>
		} else if (btn->pressTicks >= tickShortClick) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	220c      	movs	r2, #12
 8002362:	18ba      	adds	r2, r7, r2
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d803      	bhi.n	8002372 <buttonProcess+0x70>
			res = BUTTON_SHORT_CLICK;
 800236a:	230f      	movs	r3, #15
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
		}
		btn->pressTicks = 0;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	801a      	strh	r2, [r3, #0]
	}

	return res;
 8002378:	230f      	movs	r3, #15
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	781b      	ldrb	r3, [r3, #0]
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <LL_ADC_SetTriggerFrequencyMode+0x24>)
 8002398:	401a      	ands	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]
}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b002      	add	sp, #8
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	dfffffff 	.word	0xdfffffff

080023b0 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	2104      	movs	r1, #4
 80023c4:	400a      	ands	r2, r1
 80023c6:	2107      	movs	r1, #7
 80023c8:	4091      	lsls	r1, r2
 80023ca:	000a      	movs	r2, r1
 80023cc:	43d2      	mvns	r2, r2
 80023ce:	401a      	ands	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2104      	movs	r1, #4
 80023d4:	400b      	ands	r3, r1
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4099      	lsls	r1, r3
 80023da:	000b      	movs	r3, r1
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 80023fc:	401a      	ands	r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60da      	str	r2, [r3, #12]
}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	ffdfffff 	.word	0xffdfffff

08002414 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	211f      	movs	r1, #31
 8002428:	400a      	ands	r2, r1
 800242a:	210f      	movs	r1, #15
 800242c:	4091      	lsls	r1, r2
 800242e:	000a      	movs	r2, r1
 8002430:	43d2      	mvns	r2, r2
 8002432:	401a      	ands	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	0e9b      	lsrs	r3, r3, #26
 8002438:	210f      	movs	r1, #15
 800243a:	4019      	ands	r1, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	201f      	movs	r0, #31
 8002440:	4003      	ands	r3, r0
 8002442:	4099      	lsls	r1, r3
 8002444:	000b      	movs	r3, r1
 8002446:	431a      	orrs	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b004      	add	sp, #16
 8002452:	bd80      	pop	{r7, pc}

08002454 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2203      	movs	r2, #3
 8002464:	4393      	bics	r3, r2
 8002466:	001a      	movs	r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	60da      	str	r2, [r3, #12]
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}

08002478 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	0212      	lsls	r2, r2, #8
 800248c:	43d2      	mvns	r2, r2
 800248e:	401a      	ands	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	400b      	ands	r3, r1
 8002498:	4904      	ldr	r1, [pc, #16]	; (80024ac <LL_ADC_SetChannelSamplingTime+0x34>)
 800249a:	400b      	ands	r3, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b004      	add	sp, #16
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	07ffff00 	.word	0x07ffff00

080024b0 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2201      	movs	r2, #1
 80024c0:	4393      	bics	r3, r2
 80024c2:	001a      	movs	r2, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	0552      	lsls	r2, r2, #21
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	6fffffe8 	.word	0x6fffffe8

080024fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <LL_ADC_Enable+0x20>)
 800250a:	4013      	ands	r3, r2
 800250c:	2201      	movs	r2, #1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}
 800251c:	7fffffe8 	.word	0x7fffffe8

08002520 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <LL_ADC_REG_StartConversion+0x20>)
 800252e:	4013      	ands	r3, r2
 8002530:	2204      	movs	r2, #4
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}
 8002540:	7fffffe8 	.word	0x7fffffe8

08002544 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <LL_ADC_REG_StopConversion+0x20>)
 8002552:	4013      	ands	r3, r2
 8002554:	2210      	movs	r2, #16
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}
 8002564:	7fffffe8 	.word	0x7fffffe8

08002568 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	019b      	lsls	r3, r3, #6
 8002578:	401a      	ands	r2, r3
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	429a      	cmp	r2, r3
 8002580:	d101      	bne.n	8002586 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8002586:	2300      	movs	r3, #0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}

08002590 <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	0192      	lsls	r2, r2, #6
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <LL_DMAMUX_SetRequestID>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMAMUX_SetRequestID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t Request)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  (void)(DMAMUXx);
  MODIFY_REG((DMAMUX1_Channel0 + Channel)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <LL_DMAMUX_SetRequestID+0x38>)
 80025ba:	4694      	mov	ip, r2
 80025bc:	4463      	add	r3, ip
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	223f      	movs	r2, #63	; 0x3f
 80025c2:	4393      	bics	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <LL_DMAMUX_SetRequestID+0x38>)
 80025cc:	4694      	mov	ip, r2
 80025ce:	4463      	add	r3, ip
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	40020800 	.word	0x40020800

080025e4 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <LL_DMA_EnableChannel+0x3c>)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	18d3      	adds	r3, r2, r3
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	001a      	movs	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	18d3      	adds	r3, r2, r3
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4907      	ldr	r1, [pc, #28]	; (8002620 <LL_DMA_EnableChannel+0x3c>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	18cb      	adds	r3, r1, r3
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	0019      	movs	r1, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	18cb      	adds	r3, r1, r3
 8002610:	2101      	movs	r1, #1
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b004      	add	sp, #16
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	080074b0 	.word	0x080074b0

08002624 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <LL_DMA_DisableChannel+0x3c>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	18d3      	adds	r3, r2, r3
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	001a      	movs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	18d3      	adds	r3, r2, r3
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4907      	ldr	r1, [pc, #28]	; (8002660 <LL_DMA_DisableChannel+0x3c>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	18cb      	adds	r3, r1, r3
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	0019      	movs	r1, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	18cb      	adds	r3, r1, r3
 8002650:	2101      	movs	r1, #1
 8002652:	438a      	bics	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	080074b0 	.word	0x080074b0

08002664 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8002674:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <LL_DMA_ConfigTransfer+0x44>)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	18d3      	adds	r3, r2, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	001a      	movs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	18d3      	adds	r3, r2, r3
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a09      	ldr	r2, [pc, #36]	; (80026ac <LL_DMA_ConfigTransfer+0x48>)
 8002686:	4013      	ands	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <LL_DMA_ConfigTransfer+0x44>)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	18d3      	adds	r3, r2, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	001a      	movs	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	18d3      	adds	r3, r2, r3
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b006      	add	sp, #24
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	080074b0 	.word	0x080074b0
 80026ac:	ffff800f 	.word	0xffff800f

080026b0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80026c0:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	001a      	movs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	18d3      	adds	r3, r2, r3
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	18d3      	adds	r3, r2, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	001a      	movs	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	18d3      	adds	r3, r2, r3
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
             Priority);
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b006      	add	sp, #24
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	080074b0 	.word	0x080074b0
 80026f8:	ffffcfff 	.word	0xffffcfff

080026fc <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800270c:	4a0b      	ldr	r2, [pc, #44]	; (800273c <LL_DMA_SetDataLength+0x40>)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	18d3      	adds	r3, r2, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	001a      	movs	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	18d3      	adds	r3, r2, r3
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	0419      	lsls	r1, r3, #16
 8002720:	4a06      	ldr	r2, [pc, #24]	; (800273c <LL_DMA_SetDataLength+0x40>)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	18d3      	adds	r3, r2, r3
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	001a      	movs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	18d3      	adds	r3, r2, r3
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	430a      	orrs	r2, r1
 8002732:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b006      	add	sp, #24
 800273a:	bd80      	pop	{r7, pc}
 800273c:	080074b0 	.word	0x080074b0

08002740 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <LL_DMA_SetMemoryAddress+0x2c>)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	18d3      	adds	r3, r2, r3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	001a      	movs	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	18d3      	adds	r3, r2, r3
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	60da      	str	r2, [r3, #12]
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b006      	add	sp, #24
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	080074b0 	.word	0x080074b0

08002770 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <LL_DMA_SetPeriphAddress+0x2c>)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	18d3      	adds	r3, r2, r3
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	001a      	movs	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	18d3      	adds	r3, r2, r3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	609a      	str	r2, [r3, #8]
}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b006      	add	sp, #24
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	080074b0 	.word	0x080074b0

080027a0 <LL_AHB1_GRP1_EnableClock>:
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80027aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000

080027cc <LL_APB2_GRP1_EnableClock>:
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80027d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	430a      	orrs	r2, r1
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b004      	add	sp, #16
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000

080027f8 <LL_IOP_GRP1_EnableClock>:
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <LL_IOP_GRP1_EnableClock+0x28>)
 8002802:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <LL_IOP_GRP1_EnableClock+0x28>)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	430a      	orrs	r2, r1
 800280a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <LL_IOP_GRP1_EnableClock+0x28>)
 800280e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002816:	68fb      	ldr	r3, [r7, #12]
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000

08002824 <getLightValue>:
}
*/


uint16_t getLightValue(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 800282a:	1dbb      	adds	r3, r7, #6
 800282c:	2200      	movs	r2, #0
 800282e:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < NUM_OF_MEASURMENTS; i++) {
 8002830:	1d7b      	adds	r3, r7, #5
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e00e      	b.n	8002856 <getLightValue+0x32>
		res += lightVals[i];
 8002838:	1d7b      	adds	r3, r7, #5
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <getLightValue+0x4c>)
 800283e:	0052      	lsls	r2, r2, #1
 8002840:	5ad1      	ldrh	r1, [r2, r3]
 8002842:	1dbb      	adds	r3, r7, #6
 8002844:	1dba      	adds	r2, r7, #6
 8002846:	8812      	ldrh	r2, [r2, #0]
 8002848:	188a      	adds	r2, r1, r2
 800284a:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_MEASURMENTS; i++) {
 800284c:	1d7b      	adds	r3, r7, #5
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	1d7b      	adds	r3, r7, #5
 8002852:	3201      	adds	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	1d7b      	adds	r3, r7, #5
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	d9ec      	bls.n	8002838 <getLightValue+0x14>
	}
	return res / NUM_OF_MEASURMENTS;
 800285e:	1dbb      	adds	r3, r7, #6
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	b29b      	uxth	r3, r3
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	200000fc 	.word	0x200000fc

08002874 <lightSensorInit>:



void lightSensorInit(void)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b093      	sub	sp, #76	; 0x4c
 8002878:	af00      	add	r7, sp, #0
	LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800287a:	2434      	movs	r4, #52	; 0x34
 800287c:	193b      	adds	r3, r7, r4
 800287e:	0018      	movs	r0, r3
 8002880:	2310      	movs	r3, #16
 8002882:	001a      	movs	r2, r3
 8002884:	2100      	movs	r1, #0
 8002886:	f003 fb44 	bl	8005f12 <memset>
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800288a:	231c      	movs	r3, #28
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	0018      	movs	r0, r3
 8002890:	2318      	movs	r3, #24
 8002892:	001a      	movs	r2, r3
 8002894:	2100      	movs	r1, #0
 8002896:	f003 fb3c 	bl	8005f12 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	0018      	movs	r0, r3
 800289e:	2318      	movs	r3, #24
 80028a0:	001a      	movs	r2, r3
 80028a2:	2100      	movs	r1, #0
 80028a4:	f003 fb35 	bl	8005f12 <memset>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	035b      	lsls	r3, r3, #13
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7ff ff8d 	bl	80027cc <LL_APB2_GRP1_EnableClock>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f7ff ffa0 	bl	80027f8 <LL_IOP_GRP1_EnableClock>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2203      	movs	r2, #3
 80028c2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	1d3a      	adds	r2, r7, #4
 80028cc:	23a0      	movs	r3, #160	; 0xa0
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	0011      	movs	r1, r2
 80028d2:	0018      	movs	r0, r3
 80028d4:	f002 ff8f 	bl	80057f6 <LL_GPIO_Init>
	#define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
	#if (USE_TIMEOUT == 1)
	uint32_t Timeout ; /* Variable used for Timeout management */
	#endif /* USE_TIMEOUT */

	ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80028d8:	193b      	adds	r3, r7, r4
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	05d2      	lsls	r2, r2, #23
 80028de:	601a      	str	r2, [r3, #0]
	ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80028e6:	193b      	adds	r3, r7, r4
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
	ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
	LL_ADC_Init(ADC1, &ADC_InitStruct);
 80028f2:	193b      	adds	r3, r7, r4
 80028f4:	4a4d      	ldr	r2, [pc, #308]	; (8002a2c <lightSensorInit+0x1b8>)
 80028f6:	0019      	movs	r1, r3
 80028f8:	0010      	movs	r0, r2
 80028fa:	f002 fe29 	bl	8005550 <LL_ADC_Init>
	LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_CONFIGURABLE);
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	039b      	lsls	r3, r3, #14
 8002902:	4a4a      	ldr	r2, [pc, #296]	; (8002a2c <lightSensorInit+0x1b8>)
 8002904:	0019      	movs	r1, r3
 8002906:	0010      	movs	r0, r2
 8002908:	f7ff fd70 	bl	80023ec <LL_ADC_REG_SetSequencerConfigurable>

	#if (USE_TIMEOUT == 1)
	Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
	#endif /* USE_TIMEOUT */
	while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <lightSensorInit+0x1b8>)
 8002910:	0018      	movs	r0, r3
 8002912:	f7ff fe29 	bl	8002568 <LL_ADC_IsActiveFlag_CCRDY>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d0f9      	beq.n	800290e <lightSensorInit+0x9a>
		 }
	 }
	#endif /* USE_TIMEOUT */
	 }

	LL_ADC_ClearFlag_CCRDY(ADC1);
 800291a:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <lightSensorInit+0x1b8>)
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff fe37 	bl	8002590 <LL_ADC_ClearFlag_CCRDY>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002922:	211c      	movs	r1, #28
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	22f0      	movs	r2, #240	; 0xf0
 800292e:	605a      	str	r2, [r3, #4]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002930:	187b      	adds	r3, r7, r1
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	0192      	lsls	r2, r2, #6
 800293c:	60da      	str	r2, [r3, #12]
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800293e:	187b      	adds	r3, r7, r1
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
	ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8002944:	187b      	adds	r3, r7, r1
 8002946:	2200      	movs	r2, #0
 8002948:	615a      	str	r2, [r3, #20]
	LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800294a:	187b      	adds	r3, r7, r1
 800294c:	4a37      	ldr	r2, [pc, #220]	; (8002a2c <lightSensorInit+0x1b8>)
 800294e:	0019      	movs	r1, r3
 8002950:	0010      	movs	r0, r2
 8002952:	f002 fe33 	bl	80055bc <LL_ADC_REG_Init>
	LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8002956:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <lightSensorInit+0x1b8>)
 8002958:	2100      	movs	r1, #0
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff fda8 	bl	80024b0 <LL_ADC_SetOverSamplingScope>
	LL_ADC_SetTriggerFrequencyMode(ADC1, LL_ADC_CLOCK_FREQ_MODE_LOW);
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	049b      	lsls	r3, r3, #18
 8002964:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <lightSensorInit+0x1b8>)
 8002966:	0019      	movs	r1, r3
 8002968:	0010      	movs	r0, r2
 800296a:	f7ff fd0d 	bl	8002388 <LL_ADC_SetTriggerFrequencyMode>
	LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 800296e:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <lightSensorInit+0x1b8>)
 8002970:	2207      	movs	r2, #7
 8002972:	2100      	movs	r1, #0
 8002974:	0018      	movs	r0, r3
 8002976:	f7ff fd1b 	bl	80023b0 <LL_ADC_SetSamplingTimeCommonChannels>
	LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_2, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 800297a:	492d      	ldr	r1, [pc, #180]	; (8002a30 <lightSensorInit+0x1bc>)
 800297c:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <lightSensorInit+0x1b8>)
 800297e:	2207      	movs	r2, #7
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff fd15 	bl	80023b0 <LL_ADC_SetSamplingTimeCommonChannels>

	/* Enable ADC internal voltage regulator */
	LL_ADC_EnableInternalRegulator(ADC1);
 8002986:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <lightSensorInit+0x1b8>)
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff fda3 	bl	80024d4 <LL_ADC_EnableInternalRegulator>
	/* Note: Variable divided by 2 to compensate partially */
	/* CPU processing cycles (depends on compilation optimization). */
	/* Note: If system core clock frequency is below 200kHz, wait time */
	/* is only a few CPU processing cycles. */
	uint32_t wait_loop_index;
	wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800298e:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <lightSensorInit+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4929      	ldr	r1, [pc, #164]	; (8002a38 <lightSensorInit+0x1c4>)
 8002994:	0018      	movs	r0, r3
 8002996:	f7fd fbbd 	bl	8000114 <__udivsi3>
 800299a:	0003      	movs	r3, r0
 800299c:	001a      	movs	r2, r3
 800299e:	0013      	movs	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	189b      	adds	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	210a      	movs	r1, #10
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7fd fbb3 	bl	8000114 <__udivsi3>
 80029ae:	0003      	movs	r3, r0
 80029b0:	647b      	str	r3, [r7, #68]	; 0x44
	while(wait_loop_index != 0)
 80029b2:	e002      	b.n	80029ba <lightSensorInit+0x146>
	{
		wait_loop_index--;
 80029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b6:	3b01      	subs	r3, #1
 80029b8:	647b      	str	r3, [r7, #68]	; 0x44
	while(wait_loop_index != 0)
 80029ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <lightSensorInit+0x140>
	}

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <lightSensorInit+0x1b8>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	2100      	movs	r1, #0
 80029c6:	0018      	movs	r0, r3
 80029c8:	f7ff fd24 	bl	8002414 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_COMMON_1);
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <lightSensorInit+0x1b8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	2101      	movs	r1, #1
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7ff fd50 	bl	8002478 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_Enable(ADC1);
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <lightSensorInit+0x1b8>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f7ff fd8e 	bl	80024fc <LL_ADC_Enable>

	LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <lightSensorInit+0x1b8>)
 80029e2:	2103      	movs	r1, #3
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff fd35 	bl	8002454 <LL_ADC_REG_SetDMATransfer>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff fed8 	bl	80027a0 <LL_AHB1_GRP1_EnableClock>
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)&(ADC1->DR));
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <lightSensorInit+0x1c8>)
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <lightSensorInit+0x1cc>)
 80029f4:	2101      	movs	r1, #1
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7ff feba 	bl	8002770 <LL_DMA_SetPeriphAddress>

	LL_DMA_ConfigTransfer(DMA1, LL_DMA_CHANNEL_2,
 80029fc:	2396      	movs	r3, #150	; 0x96
 80029fe:	019b      	lsls	r3, r3, #6
 8002a00:	480f      	ldr	r0, [pc, #60]	; (8002a40 <lightSensorInit+0x1cc>)
 8002a02:	001a      	movs	r2, r3
 8002a04:	2101      	movs	r1, #1
 8002a06:	f7ff fe2d 	bl	8002664 <LL_DMA_ConfigTransfer>
						  | LL_DMA_MEMORY_INCREMENT
						  | LL_DMA_PDATAALIGN_HALFWORD
						  | LL_DMA_MDATAALIGN_HALFWORD
						  | LL_DMA_PRIORITY_HIGH);

	LL_DMAMUX_SetRequestID(DMAMUX1, LL_DMAMUX_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <lightSensorInit+0x1d0>)
 8002a0c:	2205      	movs	r2, #5
 8002a0e:	2101      	movs	r1, #1
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff fdc9 	bl	80025a8 <LL_DMAMUX_SetRequestID>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <lightSensorInit+0x1cc>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fe47 	bl	80026b0 <LL_DMA_SetChannelPriorityLevel>
	NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
	NVIC_SetPriority(DMA1_Channel2_3_IRQn, 5);
	NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
	*/

}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b013      	add	sp, #76	; 0x4c
 8002a28:	bd90      	pop	{r4, r7, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	40012400 	.word	0x40012400
 8002a30:	07ffff04 	.word	0x07ffff04
 8002a34:	20000078 	.word	0x20000078
 8002a38:	00030d40 	.word	0x00030d40
 8002a3c:	40012440 	.word	0x40012440
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020800 	.word	0x40020800

08002a48 <startLightMeasurment>:



void startLightMeasurment(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
	LL_ADC_REG_StopConversion(ADC1);
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <startLightMeasurment+0x48>)
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7ff fd78 	bl	8002544 <LL_ADC_REG_StopConversion>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <startLightMeasurment+0x4c>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff fde3 	bl	8002624 <LL_DMA_DisableChannel>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, NUM_OF_MEASURMENTS);
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <startLightMeasurment+0x4c>)
 8002a60:	2210      	movs	r2, #16
 8002a62:	2101      	movs	r1, #1
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7ff fe49 	bl	80026fc <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)&(lightVals[0]));
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <startLightMeasurment+0x50>)
 8002a6c:	4809      	ldr	r0, [pc, #36]	; (8002a94 <startLightMeasurment+0x4c>)
 8002a6e:	001a      	movs	r2, r3
 8002a70:	2101      	movs	r1, #1
 8002a72:	f7ff fe65 	bl	8002740 <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <startLightMeasurment+0x4c>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff fdb2 	bl	80025e4 <LL_DMA_EnableChannel>
	LL_ADC_REG_StartConversion(ADC1);
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <startLightMeasurment+0x48>)
 8002a82:	0018      	movs	r0, r3
 8002a84:	f7ff fd4c 	bl	8002520 <LL_ADC_REG_StartConversion>
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	40012400 	.word	0x40012400
 8002a94:	40020000 	.word	0x40020000
 8002a98:	200000fc 	.word	0x200000fc

08002a9c <reversLeds>:
} Color;

char debugBuff[128];

static void reversLeds(Color ledArray[], uint8_t size)
{
 8002a9c:	b5b0      	push	{r4, r5, r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	000a      	movs	r2, r1
 8002aa6:	1cfb      	adds	r3, r7, #3
 8002aa8:	701a      	strb	r2, [r3, #0]
	Color buffer;

	for (uint8_t i = 0; i < size / 2; i++) {
 8002aaa:	2327      	movs	r3, #39	; 0x27
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e045      	b.n	8002b40 <reversLeds+0xa4>
		buffer = ledArray[i];
 8002ab4:	2427      	movs	r4, #39	; 0x27
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	0013      	movs	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	189b      	adds	r3, r3, r2
 8002ac8:	2508      	movs	r5, #8
 8002aca:	197a      	adds	r2, r7, r5
 8002acc:	0010      	movs	r0, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	2318      	movs	r3, #24
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	f003 fa14 	bl	8005f00 <memcpy>
		ledArray[i] = ledArray[size - i - 1];
 8002ad8:	1cfb      	adds	r3, r7, #3
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	193b      	adds	r3, r7, r4
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	3b18      	subs	r3, #24
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	18d1      	adds	r1, r2, r3
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	0013      	movs	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	001a      	movs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	0018      	movs	r0, r3
 8002b06:	2318      	movs	r3, #24
 8002b08:	001a      	movs	r2, r3
 8002b0a:	f003 f9f9 	bl	8005f00 <memcpy>
		ledArray[size - i - 1] = buffer;
 8002b0e:	1cfb      	adds	r3, r7, #3
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	001a      	movs	r2, r3
 8002b1a:	0013      	movs	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	3b18      	subs	r3, #24
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	18d2      	adds	r2, r2, r3
 8002b28:	197b      	adds	r3, r7, r5
 8002b2a:	0010      	movs	r0, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	2318      	movs	r3, #24
 8002b30:	001a      	movs	r2, r3
 8002b32:	f003 f9e5 	bl	8005f00 <memcpy>
	for (uint8_t i = 0; i < size / 2; i++) {
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	3201      	adds	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	1cfb      	adds	r3, r7, #3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2227      	movs	r2, #39	; 0x27
 8002b4a:	18ba      	adds	r2, r7, r2
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d3b0      	bcc.n	8002ab4 <reversLeds+0x18>
	}
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b00a      	add	sp, #40	; 0x28
 8002b5a:	bdb0      	pop	{r4, r5, r7, pc}

08002b5c <changeLightIntensive>:



static void changeLightIntensive(Color pixels[], uint8_t size, uint8_t prewMaxLight, uint8_t nowMaxLight)
{
 8002b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5e:	b091      	sub	sp, #68	; 0x44
 8002b60:	af06      	add	r7, sp, #24
 8002b62:	6178      	str	r0, [r7, #20]
 8002b64:	000c      	movs	r4, r1
 8002b66:	0010      	movs	r0, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	2313      	movs	r3, #19
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	1c22      	adds	r2, r4, #0
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	2612      	movs	r6, #18
 8002b74:	19bb      	adds	r3, r7, r6
 8002b76:	1c02      	adds	r2, r0, #0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	2011      	movs	r0, #17
 8002b7c:	183b      	adds	r3, r7, r0
 8002b7e:	1c0a      	adds	r2, r1, #0
 8002b80:	701a      	strb	r2, [r3, #0]
	double coeficient = (double)nowMaxLight / (double)prewMaxLight;
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7ff fa66 	bl	8002058 <__aeabi_ui2d>
 8002b8c:	0004      	movs	r4, r0
 8002b8e:	000d      	movs	r5, r1
 8002b90:	19bb      	adds	r3, r7, r6
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7ff fa5f 	bl	8002058 <__aeabi_ui2d>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	000b      	movs	r3, r1
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	0029      	movs	r1, r5
 8002ba2:	f7fd fff3 	bl	8000b8c <__aeabi_ddiv>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	000b      	movs	r3, r1
 8002baa:	61ba      	str	r2, [r7, #24]
 8002bac:	61fb      	str	r3, [r7, #28]
	debugTx("changeLight\n");
 8002bae:	4b71      	ldr	r3, [pc, #452]	; (8002d74 <changeLightIntensive+0x218>)
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f001 fda3 	bl	80046fc <debugTx>
	for (uint8_t i = 0; i < size; i++) {
 8002bb6:	2317      	movs	r3, #23
 8002bb8:	2210      	movs	r2, #16
 8002bba:	189b      	adds	r3, r3, r2
 8002bbc:	19db      	adds	r3, r3, r7
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e0c3      	b.n	8002d4c <changeLightIntensive+0x1f0>
		pixels[i].r *= coeficient;
 8002bc4:	2617      	movs	r6, #23
 8002bc6:	2510      	movs	r5, #16
 8002bc8:	1973      	adds	r3, r6, r5
 8002bca:	19db      	adds	r3, r3, r7
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	0013      	movs	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	189b      	adds	r3, r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	1973      	adds	r3, r6, r5
 8002be2:	19db      	adds	r3, r3, r7
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	0013      	movs	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	189b      	adds	r3, r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	001a      	movs	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	189c      	adds	r4, r3, r2
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f7fe fbca 	bl	8001390 <__aeabi_dmul>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	000b      	movs	r3, r1
 8002c00:	6022      	str	r2, [r4, #0]
 8002c02:	6063      	str	r3, [r4, #4]
		pixels[i].g *= coeficient;
 8002c04:	1973      	adds	r3, r6, r5
 8002c06:	19db      	adds	r3, r3, r7
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	189b      	adds	r3, r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	001a      	movs	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	6898      	ldr	r0, [r3, #8]
 8002c1a:	68d9      	ldr	r1, [r3, #12]
 8002c1c:	1973      	adds	r3, r6, r5
 8002c1e:	19db      	adds	r3, r3, r7
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	0013      	movs	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	189c      	adds	r4, r3, r2
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f7fe fbac 	bl	8001390 <__aeabi_dmul>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	000b      	movs	r3, r1
 8002c3c:	60a2      	str	r2, [r4, #8]
 8002c3e:	60e3      	str	r3, [r4, #12]
		pixels[i].b *= coeficient;
 8002c40:	1973      	adds	r3, r6, r5
 8002c42:	19db      	adds	r3, r3, r7
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	0013      	movs	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	189b      	adds	r3, r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	001a      	movs	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	6918      	ldr	r0, [r3, #16]
 8002c56:	6959      	ldr	r1, [r3, #20]
 8002c58:	1973      	adds	r3, r6, r5
 8002c5a:	19db      	adds	r3, r3, r7
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	0013      	movs	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	001a      	movs	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	189c      	adds	r4, r3, r2
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f7fe fb8e 	bl	8001390 <__aeabi_dmul>
 8002c74:	0002      	movs	r2, r0
 8002c76:	000b      	movs	r3, r1
 8002c78:	6122      	str	r2, [r4, #16]
 8002c7a:	6163      	str	r3, [r4, #20]
		sprintf(debugBuff, "r=%lf g=%f b=%f\n\n coef=%f\n", (float)pixels[i].r, (float)pixels[i].g, (float)pixels[i].b, (float)coeficient);
 8002c7c:	002c      	movs	r4, r5
 8002c7e:	1933      	adds	r3, r6, r4
 8002c80:	19db      	adds	r3, r3, r7
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	0013      	movs	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	189b      	adds	r3, r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	189b      	adds	r3, r3, r2
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	0010      	movs	r0, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	f7ff fa4b 	bl	8002134 <__aeabi_d2f>
 8002c9e:	1c03      	adds	r3, r0, #0
 8002ca0:	1c18      	adds	r0, r3, #0
 8002ca2:	f7ff f9ff 	bl	80020a4 <__aeabi_f2d>
 8002ca6:	60b8      	str	r0, [r7, #8]
 8002ca8:	60f9      	str	r1, [r7, #12]
 8002caa:	1932      	adds	r2, r6, r4
 8002cac:	19d3      	adds	r3, r2, r7
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	189b      	adds	r3, r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	001a      	movs	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	0010      	movs	r0, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	f7ff fa35 	bl	8002134 <__aeabi_d2f>
 8002cca:	1c03      	adds	r3, r0, #0
 8002ccc:	1c18      	adds	r0, r3, #0
 8002cce:	f7ff f9e9 	bl	80020a4 <__aeabi_f2d>
 8002cd2:	0004      	movs	r4, r0
 8002cd4:	000d      	movs	r5, r1
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	18f2      	adds	r2, r6, r3
 8002cda:	19d3      	adds	r3, r2, r7
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	0013      	movs	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	0010      	movs	r0, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	f7ff fa1e 	bl	8002134 <__aeabi_d2f>
 8002cf8:	1c03      	adds	r3, r0, #0
 8002cfa:	1c18      	adds	r0, r3, #0
 8002cfc:	f7ff f9d2 	bl	80020a4 <__aeabi_f2d>
 8002d00:	6038      	str	r0, [r7, #0]
 8002d02:	6079      	str	r1, [r7, #4]
 8002d04:	69b8      	ldr	r0, [r7, #24]
 8002d06:	69f9      	ldr	r1, [r7, #28]
 8002d08:	f7ff fa14 	bl	8002134 <__aeabi_d2f>
 8002d0c:	1c03      	adds	r3, r0, #0
 8002d0e:	1c18      	adds	r0, r3, #0
 8002d10:	f7ff f9c8 	bl	80020a4 <__aeabi_f2d>
 8002d14:	0002      	movs	r2, r0
 8002d16:	000b      	movs	r3, r1
 8002d18:	4917      	ldr	r1, [pc, #92]	; (8002d78 <changeLightIntensive+0x21c>)
 8002d1a:	4818      	ldr	r0, [pc, #96]	; (8002d7c <changeLightIntensive+0x220>)
 8002d1c:	9204      	str	r2, [sp, #16]
 8002d1e:	9305      	str	r3, [sp, #20]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	9202      	str	r2, [sp, #8]
 8002d26:	9303      	str	r3, [sp, #12]
 8002d28:	9400      	str	r4, [sp, #0]
 8002d2a:	9501      	str	r5, [sp, #4]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 f936 	bl	8005fa0 <siprintf>
		debugTx(debugBuff);
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <changeLightIntensive+0x220>)
 8002d36:	0018      	movs	r0, r3
 8002d38:	f001 fce0 	bl	80046fc <debugTx>
	for (uint8_t i = 0; i < size; i++) {
 8002d3c:	2410      	movs	r4, #16
 8002d3e:	1933      	adds	r3, r6, r4
 8002d40:	19db      	adds	r3, r3, r7
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	1933      	adds	r3, r6, r4
 8002d46:	19db      	adds	r3, r3, r7
 8002d48:	3201      	adds	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	2317      	movs	r3, #23
 8002d4e:	2210      	movs	r2, #16
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	19da      	adds	r2, r3, r7
 8002d54:	2313      	movs	r3, #19
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	7812      	ldrb	r2, [r2, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d200      	bcs.n	8002d62 <changeLightIntensive+0x206>
 8002d60:	e730      	b.n	8002bc4 <changeLightIntensive+0x68>
	}
	debugTx("\n");
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <changeLightIntensive+0x224>)
 8002d64:	0018      	movs	r0, r3
 8002d66:	f001 fcc9 	bl	80046fc <debugTx>
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b00b      	add	sp, #44	; 0x2c
 8002d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	080073e0 	.word	0x080073e0
 8002d78:	080073f0 	.word	0x080073f0
 8002d7c:	2000011c 	.word	0x2000011c
 8002d80:	0800740c 	.word	0x0800740c

08002d84 <getPreDefColors>:


enum {RED, YELLOW, GREEN, CYAN, BLUE, MAGENTA,  CLR_CNT};

static void getPreDefColors(Led colors[CLR_CNT], uint8_t maxLight)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	000a      	movs	r2, r1
 8002d8e:	1cfb      	adds	r3, r7, #3
 8002d90:	701a      	strb	r2, [r3, #0]
	colors[RED].r = maxLight;         colors[RED].g = 0;               colors[RED].b = 0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1cfa      	adds	r2, r7, #3
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	705a      	strb	r2, [r3, #1]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	709a      	strb	r2, [r3, #2]
	colors[YELLOW].r = maxLight / 2;  colors[YELLOW].g = maxLight / 2; colors[YELLOW].b = 0;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3303      	adds	r3, #3
 8002daa:	1cfa      	adds	r2, r7, #3
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	0852      	lsrs	r2, r2, #1
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3303      	adds	r3, #3
 8002db8:	1cfa      	adds	r2, r7, #3
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	0852      	lsrs	r2, r2, #1
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	705a      	strb	r2, [r3, #1]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3303      	adds	r3, #3
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	709a      	strb	r2, [r3, #2]
	colors[GREEN].r = 0;              colors[GREEN].g = maxLight;      colors[GREEN].b = 0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3306      	adds	r3, #6
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3306      	adds	r3, #6
 8002dd6:	1cfa      	adds	r2, r7, #3
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	705a      	strb	r2, [r3, #1]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3306      	adds	r3, #6
 8002de0:	2200      	movs	r2, #0
 8002de2:	709a      	strb	r2, [r3, #2]
	colors[CYAN].r = 0;               colors[CYAN].g = maxLight / 2;   colors[CYAN].b = maxLight / 2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3309      	adds	r3, #9
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3309      	adds	r3, #9
 8002df0:	1cfa      	adds	r2, r7, #3
 8002df2:	7812      	ldrb	r2, [r2, #0]
 8002df4:	0852      	lsrs	r2, r2, #1
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	705a      	strb	r2, [r3, #1]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3309      	adds	r3, #9
 8002dfe:	1cfa      	adds	r2, r7, #3
 8002e00:	7812      	ldrb	r2, [r2, #0]
 8002e02:	0852      	lsrs	r2, r2, #1
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	709a      	strb	r2, [r3, #2]
	colors[BLUE].r = 0;               colors[BLUE].g = 0;              colors[BLUE].b = maxLight;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	330c      	adds	r3, #12
 8002e14:	2200      	movs	r2, #0
 8002e16:	705a      	strb	r2, [r3, #1]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	1cfa      	adds	r2, r7, #3
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	709a      	strb	r2, [r3, #2]
	colors[MAGENTA].r = maxLight / 2; colors[MAGENTA].g = 0;           colors[MAGENTA].b = maxLight / 2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	330f      	adds	r3, #15
 8002e26:	1cfa      	adds	r2, r7, #3
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	0852      	lsrs	r2, r2, #1
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	330f      	adds	r3, #15
 8002e34:	2200      	movs	r2, #0
 8002e36:	705a      	strb	r2, [r3, #1]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	330f      	adds	r3, #15
 8002e3c:	1cfa      	adds	r2, r7, #3
 8002e3e:	7812      	ldrb	r2, [r2, #0]
 8002e40:	0852      	lsrs	r2, r2, #1
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	709a      	strb	r2, [r3, #2]
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <flameBallFrame>:



static void flameBallFrame(Color pixel[], TypeFlameBall typeFlameBall, TypeColor typeColor[4], uint8_t size, uint8_t maxLight)
{
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	b08f      	sub	sp, #60	; 0x3c
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	0008      	movs	r0, r1
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	230b      	movs	r3, #11
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	1c02      	adds	r2, r0, #0
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	230a      	movs	r3, #10
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	1c0a      	adds	r2, r1, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
	Led colors[CLR_CNT];
	Led selectColor[4];
	uint8_t numOfBalls;
	uint8_t lenOfBalls;

	getPreDefColors(colors, maxLight);
 8002e6e:	2348      	movs	r3, #72	; 0x48
 8002e70:	2208      	movs	r2, #8
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	19db      	adds	r3, r3, r7
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	2320      	movs	r3, #32
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	0011      	movs	r1, r2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff ff80 	bl	8002d84 <getPreDefColors>

	for (uint8_t i = 0; i < 4; i++) {
 8002e84:	2335      	movs	r3, #53	; 0x35
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e09c      	b.n	8002fc8 <flameBallFrame+0x178>
		switch (typeColor[i])
 8002e8e:	2335      	movs	r3, #53	; 0x35
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	18d3      	adds	r3, r2, r3
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b07      	cmp	r3, #7
 8002e9c:	d900      	bls.n	8002ea0 <flameBallFrame+0x50>
 8002e9e:	e08c      	b.n	8002fba <flameBallFrame+0x16a>
 8002ea0:	009a      	lsls	r2, r3, #2
 8002ea2:	4bd8      	ldr	r3, [pc, #864]	; (8003204 <flameBallFrame+0x3b4>)
 8002ea4:	18d3      	adds	r3, r2, r3
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	469f      	mov	pc, r3
		{
			case TYPE_COLOR_RED:     selectColor[i] = colors[RED]; break;
 8002eaa:	2335      	movs	r3, #53	; 0x35
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	2314      	movs	r3, #20
 8002eb2:	18f9      	adds	r1, r7, r3
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	2220      	movs	r2, #32
 8002ebc:	18ba      	adds	r2, r7, r2
 8002ebe:	18cb      	adds	r3, r1, r3
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f003 f81b 	bl	8005f00 <memcpy>
 8002eca:	e077      	b.n	8002fbc <flameBallFrame+0x16c>
			case TYPE_COLOR_YELLOW:  selectColor[i] = colors[YELLOW]; break;
 8002ecc:	2335      	movs	r3, #53	; 0x35
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	2314      	movs	r3, #20
 8002ed4:	18f9      	adds	r1, r7, r3
 8002ed6:	0013      	movs	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	2220      	movs	r2, #32
 8002ede:	18ba      	adds	r2, r7, r2
 8002ee0:	2003      	movs	r0, #3
 8002ee2:	18cb      	adds	r3, r1, r3
 8002ee4:	1811      	adds	r1, r2, r0
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f003 f809 	bl	8005f00 <memcpy>
 8002eee:	e065      	b.n	8002fbc <flameBallFrame+0x16c>
			case TYPE_COLOR_GREEN:   selectColor[i] = colors[GREEN]; break;
 8002ef0:	2335      	movs	r3, #53	; 0x35
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	2314      	movs	r3, #20
 8002ef8:	18f9      	adds	r1, r7, r3
 8002efa:	0013      	movs	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	2220      	movs	r2, #32
 8002f02:	18ba      	adds	r2, r7, r2
 8002f04:	2006      	movs	r0, #6
 8002f06:	18cb      	adds	r3, r1, r3
 8002f08:	1811      	adds	r1, r2, r0
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f002 fff7 	bl	8005f00 <memcpy>
 8002f12:	e053      	b.n	8002fbc <flameBallFrame+0x16c>
			case TYPE_COLOR_CYAN:    selectColor[i] = colors[CYAN]; break;
 8002f14:	2335      	movs	r3, #53	; 0x35
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	2314      	movs	r3, #20
 8002f1c:	18f9      	adds	r1, r7, r3
 8002f1e:	0013      	movs	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	189b      	adds	r3, r3, r2
 8002f24:	2220      	movs	r2, #32
 8002f26:	18ba      	adds	r2, r7, r2
 8002f28:	2009      	movs	r0, #9
 8002f2a:	18cb      	adds	r3, r1, r3
 8002f2c:	1811      	adds	r1, r2, r0
 8002f2e:	2203      	movs	r2, #3
 8002f30:	0018      	movs	r0, r3
 8002f32:	f002 ffe5 	bl	8005f00 <memcpy>
 8002f36:	e041      	b.n	8002fbc <flameBallFrame+0x16c>
			case TYPE_COLOR_BLUE:    selectColor[i] = colors[BLUE]; break;
 8002f38:	2335      	movs	r3, #53	; 0x35
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	2314      	movs	r3, #20
 8002f40:	18f9      	adds	r1, r7, r3
 8002f42:	0013      	movs	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	2220      	movs	r2, #32
 8002f4a:	18ba      	adds	r2, r7, r2
 8002f4c:	18cb      	adds	r3, r1, r3
 8002f4e:	320c      	adds	r2, #12
 8002f50:	0011      	movs	r1, r2
 8002f52:	2203      	movs	r2, #3
 8002f54:	0018      	movs	r0, r3
 8002f56:	f002 ffd3 	bl	8005f00 <memcpy>
 8002f5a:	e02f      	b.n	8002fbc <flameBallFrame+0x16c>
			case TYPE_COLOR_MAGENTA: selectColor[i] = colors[MAGENTA]; break;
 8002f5c:	2335      	movs	r3, #53	; 0x35
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	2314      	movs	r3, #20
 8002f64:	18f9      	adds	r1, r7, r3
 8002f66:	0013      	movs	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	189b      	adds	r3, r3, r2
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	18ba      	adds	r2, r7, r2
 8002f70:	200f      	movs	r0, #15
 8002f72:	18cb      	adds	r3, r1, r3
 8002f74:	1811      	adds	r1, r2, r0
 8002f76:	2203      	movs	r2, #3
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f002 ffc1 	bl	8005f00 <memcpy>
 8002f7e:	e01d      	b.n	8002fbc <flameBallFrame+0x16c>
			case TYPE_COLOR_RANDOM:  selectColor[i] = colors[rand() % CLR_CNT]; break;
 8002f80:	f002 ffd0 	bl	8005f24 <rand>
 8002f84:	0003      	movs	r3, r0
 8002f86:	2106      	movs	r1, #6
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7fd fa33 	bl	80003f4 <__aeabi_idivmod>
 8002f8e:	000b      	movs	r3, r1
 8002f90:	001c      	movs	r4, r3
 8002f92:	2335      	movs	r3, #53	; 0x35
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2214      	movs	r2, #20
 8002f9a:	18b8      	adds	r0, r7, r2
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	0052      	lsls	r2, r2, #1
 8002fa0:	18d2      	adds	r2, r2, r3
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	18f9      	adds	r1, r7, r3
 8002fa6:	0023      	movs	r3, r4
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	191b      	adds	r3, r3, r4
 8002fac:	1880      	adds	r0, r0, r2
 8002fae:	18cb      	adds	r3, r1, r3
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	f002 ffa4 	bl	8005f00 <memcpy>
 8002fb8:	e000      	b.n	8002fbc <flameBallFrame+0x16c>
			default:
				break;
 8002fba:	46c0      	nop			; (mov r8, r8)
	for (uint8_t i = 0; i < 4; i++) {
 8002fbc:	2135      	movs	r1, #53	; 0x35
 8002fbe:	187b      	adds	r3, r7, r1
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	3201      	adds	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	2335      	movs	r3, #53	; 0x35
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d800      	bhi.n	8002fd4 <flameBallFrame+0x184>
 8002fd2:	e75c      	b.n	8002e8e <flameBallFrame+0x3e>
		}
	}

	switch (typeFlameBall)
 8002fd4:	230b      	movs	r3, #11
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d83f      	bhi.n	800305e <flameBallFrame+0x20e>
 8002fde:	009a      	lsls	r2, r3, #2
 8002fe0:	4b89      	ldr	r3, [pc, #548]	; (8003208 <flameBallFrame+0x3b8>)
 8002fe2:	18d3      	adds	r3, r2, r3
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	469f      	mov	pc, r3
	{
		case FLAME_BALL_1_FULL:
			numOfBalls = 1;
 8002fe8:	2337      	movs	r3, #55	; 0x37
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
			lenOfBalls = size;
 8002ff0:	2336      	movs	r3, #54	; 0x36
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	220a      	movs	r2, #10
 8002ff6:	18ba      	adds	r2, r7, r2
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	701a      	strb	r2, [r3, #0]
			break;
 8002ffc:	e030      	b.n	8003060 <flameBallFrame+0x210>

		case FLAME_BALL_1_DIV2LEN:
			numOfBalls = 1;
 8002ffe:	2337      	movs	r3, #55	; 0x37
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
			lenOfBalls = size / 2;
 8003006:	2336      	movs	r3, #54	; 0x36
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	220a      	movs	r2, #10
 800300c:	18ba      	adds	r2, r7, r2
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	0852      	lsrs	r2, r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
			break;
 8003014:	e024      	b.n	8003060 <flameBallFrame+0x210>

		case FLAME_BALL_2_DIV2LEN:
			numOfBalls = 2;
 8003016:	2337      	movs	r3, #55	; 0x37
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	2202      	movs	r2, #2
 800301c:	701a      	strb	r2, [r3, #0]
			lenOfBalls = size / 2;
 800301e:	2336      	movs	r3, #54	; 0x36
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	220a      	movs	r2, #10
 8003024:	18ba      	adds	r2, r7, r2
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	0852      	lsrs	r2, r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
			break;
 800302c:	e018      	b.n	8003060 <flameBallFrame+0x210>

		case FLAME_BALL_2_DIV4LEN:
			numOfBalls = 2;
 800302e:	2337      	movs	r3, #55	; 0x37
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
			lenOfBalls = size / 4;
 8003036:	2336      	movs	r3, #54	; 0x36
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	220a      	movs	r2, #10
 800303c:	18ba      	adds	r2, r7, r2
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	0892      	lsrs	r2, r2, #2
 8003042:	701a      	strb	r2, [r3, #0]
			break;
 8003044:	e00c      	b.n	8003060 <flameBallFrame+0x210>

		case FLAME_BALL_4_DIV4LEN:
			numOfBalls = 4;
 8003046:	2337      	movs	r3, #55	; 0x37
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	2204      	movs	r2, #4
 800304c:	701a      	strb	r2, [r3, #0]
			lenOfBalls = size / 4;
 800304e:	2336      	movs	r3, #54	; 0x36
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	220a      	movs	r2, #10
 8003054:	18ba      	adds	r2, r7, r2
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	0892      	lsrs	r2, r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
			break;
 800305c:	e000      	b.n	8003060 <flameBallFrame+0x210>

		default:
			break;
 800305e:	46c0      	nop			; (mov r8, r8)
	}

	uint8_t indexColorBall = 0;
 8003060:	2334      	movs	r3, #52	; 0x34
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < size; i++) {
 8003068:	2333      	movs	r3, #51	; 0x33
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e0fa      	b.n	8003268 <flameBallFrame+0x418>
		if (i % (size / numOfBalls) == 0) {
 8003072:	230a      	movs	r3, #10
 8003074:	18fa      	adds	r2, r7, r3
 8003076:	2337      	movs	r3, #55	; 0x37
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	7812      	ldrb	r2, [r2, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	0019      	movs	r1, r3
 8003080:	0010      	movs	r0, r2
 8003082:	f7fd f847 	bl	8000114 <__udivsi3>
 8003086:	0003      	movs	r3, r0
 8003088:	b2da      	uxtb	r2, r3
 800308a:	2333      	movs	r3, #51	; 0x33
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	0011      	movs	r1, r2
 8003092:	0018      	movs	r0, r3
 8003094:	f7fd f8c4 	bl	8000220 <__aeabi_uidivmod>
 8003098:	000b      	movs	r3, r1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d000      	beq.n	80030a2 <flameBallFrame+0x252>
 80030a0:	e0b4      	b.n	800320c <flameBallFrame+0x3bc>
			uint8_t u;
			for (u = 0; u < lenOfBalls; u++) {
 80030a2:	2332      	movs	r3, #50	; 0x32
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e090      	b.n	80031ce <flameBallFrame+0x37e>
				pixel[i+u].r = selectColor[indexColorBall].r / lenOfBalls * (u+1);
 80030ac:	2634      	movs	r6, #52	; 0x34
 80030ae:	19bb      	adds	r3, r7, r6
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	2314      	movs	r3, #20
 80030b4:	18f9      	adds	r1, r7, r3
 80030b6:	0013      	movs	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	5c5a      	ldrb	r2, [r3, r1]
 80030be:	2136      	movs	r1, #54	; 0x36
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	0019      	movs	r1, r3
 80030c6:	0010      	movs	r0, r2
 80030c8:	f7fd f824 	bl	8000114 <__udivsi3>
 80030cc:	0003      	movs	r3, r0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	001a      	movs	r2, r3
 80030d2:	2532      	movs	r5, #50	; 0x32
 80030d4:	197b      	adds	r3, r7, r5
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	0018      	movs	r0, r3
 80030dc:	4350      	muls	r0, r2
 80030de:	0001      	movs	r1, r0
 80030e0:	2233      	movs	r2, #51	; 0x33
 80030e2:	18bb      	adds	r3, r7, r2
 80030e4:	781a      	ldrb	r2, [r3, #0]
 80030e6:	197b      	adds	r3, r7, r5
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	18d3      	adds	r3, r2, r3
 80030ec:	001a      	movs	r2, r3
 80030ee:	0013      	movs	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	189b      	adds	r3, r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	001a      	movs	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	189c      	adds	r4, r3, r2
 80030fc:	0008      	movs	r0, r1
 80030fe:	f7fe ff7b 	bl	8001ff8 <__aeabi_i2d>
 8003102:	0002      	movs	r2, r0
 8003104:	000b      	movs	r3, r1
 8003106:	6022      	str	r2, [r4, #0]
 8003108:	6063      	str	r3, [r4, #4]
				pixel[i+u].g = selectColor[indexColorBall].g / lenOfBalls * (u+1);
 800310a:	19bb      	adds	r3, r7, r6
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	2314      	movs	r3, #20
 8003110:	18f9      	adds	r1, r7, r3
 8003112:	0013      	movs	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	189b      	adds	r3, r3, r2
 8003118:	18cb      	adds	r3, r1, r3
 800311a:	3301      	adds	r3, #1
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	2136      	movs	r1, #54	; 0x36
 8003120:	187b      	adds	r3, r7, r1
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	0019      	movs	r1, r3
 8003126:	0010      	movs	r0, r2
 8003128:	f7fc fff4 	bl	8000114 <__udivsi3>
 800312c:	0003      	movs	r3, r0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	001a      	movs	r2, r3
 8003132:	197b      	adds	r3, r7, r5
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	0018      	movs	r0, r3
 800313a:	4350      	muls	r0, r2
 800313c:	0001      	movs	r1, r0
 800313e:	2233      	movs	r2, #51	; 0x33
 8003140:	18bb      	adds	r3, r7, r2
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	197b      	adds	r3, r7, r5
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	18d3      	adds	r3, r2, r3
 800314a:	001a      	movs	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	189b      	adds	r3, r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	001a      	movs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	189c      	adds	r4, r3, r2
 800315a:	0008      	movs	r0, r1
 800315c:	f7fe ff4c 	bl	8001ff8 <__aeabi_i2d>
 8003160:	0002      	movs	r2, r0
 8003162:	000b      	movs	r3, r1
 8003164:	60a2      	str	r2, [r4, #8]
 8003166:	60e3      	str	r3, [r4, #12]
				pixel[i+u].b = selectColor[indexColorBall].b / lenOfBalls * (u+1);
 8003168:	19bb      	adds	r3, r7, r6
 800316a:	781a      	ldrb	r2, [r3, #0]
 800316c:	2314      	movs	r3, #20
 800316e:	18f9      	adds	r1, r7, r3
 8003170:	0013      	movs	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	189b      	adds	r3, r3, r2
 8003176:	18cb      	adds	r3, r1, r3
 8003178:	3302      	adds	r3, #2
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	2136      	movs	r1, #54	; 0x36
 800317e:	187b      	adds	r3, r7, r1
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	0019      	movs	r1, r3
 8003184:	0010      	movs	r0, r2
 8003186:	f7fc ffc5 	bl	8000114 <__udivsi3>
 800318a:	0003      	movs	r3, r0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	001a      	movs	r2, r3
 8003190:	197b      	adds	r3, r7, r5
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4353      	muls	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	2233      	movs	r2, #51	; 0x33
 800319c:	18bb      	adds	r3, r7, r2
 800319e:	781a      	ldrb	r2, [r3, #0]
 80031a0:	197b      	adds	r3, r7, r5
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	18d3      	adds	r3, r2, r3
 80031a6:	001a      	movs	r2, r3
 80031a8:	0013      	movs	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	001a      	movs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	189c      	adds	r4, r3, r2
 80031b6:	0008      	movs	r0, r1
 80031b8:	f7fe ff1e 	bl	8001ff8 <__aeabi_i2d>
 80031bc:	0002      	movs	r2, r0
 80031be:	000b      	movs	r3, r1
 80031c0:	6122      	str	r2, [r4, #16]
 80031c2:	6163      	str	r3, [r4, #20]
			for (u = 0; u < lenOfBalls; u++) {
 80031c4:	197b      	adds	r3, r7, r5
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	197b      	adds	r3, r7, r5
 80031ca:	3201      	adds	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	2132      	movs	r1, #50	; 0x32
 80031d0:	187a      	adds	r2, r7, r1
 80031d2:	2336      	movs	r3, #54	; 0x36
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d200      	bcs.n	80031e0 <flameBallFrame+0x390>
 80031de:	e765      	b.n	80030ac <flameBallFrame+0x25c>
			}
			i += u - 1;
 80031e0:	187a      	adds	r2, r7, r1
 80031e2:	2133      	movs	r1, #51	; 0x33
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	7812      	ldrb	r2, [r2, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	18d3      	adds	r3, r2, r3
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	3a01      	subs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
			indexColorBall++;
 80031f4:	2134      	movs	r1, #52	; 0x34
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	3201      	adds	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e02c      	b.n	800325c <flameBallFrame+0x40c>
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	080074b8 	.word	0x080074b8
 8003208:	080074d8 	.word	0x080074d8
		} else {
			pixel[i].r = 0;
 800320c:	2033      	movs	r0, #51	; 0x33
 800320e:	183b      	adds	r3, r7, r0
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	0013      	movs	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	189b      	adds	r3, r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	001a      	movs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1899      	adds	r1, r3, r2
 8003220:	2200      	movs	r2, #0
 8003222:	2300      	movs	r3, #0
 8003224:	600a      	str	r2, [r1, #0]
 8003226:	604b      	str	r3, [r1, #4]
			pixel[i].g = 0;
 8003228:	183b      	adds	r3, r7, r0
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	0013      	movs	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	189b      	adds	r3, r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	001a      	movs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1899      	adds	r1, r3, r2
 800323a:	2200      	movs	r2, #0
 800323c:	2300      	movs	r3, #0
 800323e:	608a      	str	r2, [r1, #8]
 8003240:	60cb      	str	r3, [r1, #12]
			pixel[i].b = 0;
 8003242:	183b      	adds	r3, r7, r0
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	0013      	movs	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	189b      	adds	r3, r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	001a      	movs	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1899      	adds	r1, r3, r2
 8003254:	2200      	movs	r2, #0
 8003256:	2300      	movs	r3, #0
 8003258:	610a      	str	r2, [r1, #16]
 800325a:	614b      	str	r3, [r1, #20]
	for (uint8_t i = 0; i < size; i++) {
 800325c:	2133      	movs	r1, #51	; 0x33
 800325e:	187b      	adds	r3, r7, r1
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	187b      	adds	r3, r7, r1
 8003264:	3201      	adds	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	2333      	movs	r3, #51	; 0x33
 800326a:	18fa      	adds	r2, r7, r3
 800326c:	230a      	movs	r3, #10
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	7812      	ldrb	r2, [r2, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d200      	bcs.n	800327a <flameBallFrame+0x42a>
 8003278:	e6fb      	b.n	8003072 <flameBallFrame+0x222>
		}
	}
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b00f      	add	sp, #60	; 0x3c
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003284 <rainbowFrame>:



void rainbowFrame(Color pixel[], uint8_t size, uint8_t maxLight)
{
 8003284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003286:	b08b      	sub	sp, #44	; 0x2c
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	0008      	movs	r0, r1
 800328e:	0011      	movs	r1, r2
 8003290:	1cfb      	adds	r3, r7, #3
 8003292:	1c02      	adds	r2, r0, #0
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	1cbb      	adds	r3, r7, #2
 8003298:	1c0a      	adds	r2, r1, #0
 800329a:	701a      	strb	r2, [r3, #0]
	enum {NONE, RED, YELLOW, GREEN, CYAN, BLUE, MAGENTA, NONE2, COLOR_CNT};

	Led colors[] = {
 800329c:	210c      	movs	r1, #12
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	2200      	movs	r2, #0
 80032a8:	705a      	strb	r2, [r3, #1]
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	2200      	movs	r2, #0
 80032ae:	709a      	strb	r2, [r3, #2]
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	1cba      	adds	r2, r7, #2
 80032b4:	7812      	ldrb	r2, [r2, #0]
 80032b6:	70da      	strb	r2, [r3, #3]
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	2200      	movs	r2, #0
 80032bc:	711a      	strb	r2, [r3, #4]
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	2200      	movs	r2, #0
 80032c2:	715a      	strb	r2, [r3, #5]
 80032c4:	1cbb      	adds	r3, r7, #2
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	719a      	strb	r2, [r3, #6]
 80032d0:	1cbb      	adds	r3, r7, #2
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	187b      	adds	r3, r7, r1
 80032da:	71da      	strb	r2, [r3, #7]
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	2200      	movs	r2, #0
 80032e0:	721a      	strb	r2, [r3, #8]
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2200      	movs	r2, #0
 80032e6:	725a      	strb	r2, [r3, #9]
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	1cba      	adds	r2, r7, #2
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	729a      	strb	r2, [r3, #10]
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	2200      	movs	r2, #0
 80032f4:	72da      	strb	r2, [r3, #11]
 80032f6:	187b      	adds	r3, r7, r1
 80032f8:	2200      	movs	r2, #0
 80032fa:	731a      	strb	r2, [r3, #12]
 80032fc:	1cbb      	adds	r3, r7, #2
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	b2da      	uxtb	r2, r3
 8003304:	187b      	adds	r3, r7, r1
 8003306:	735a      	strb	r2, [r3, #13]
 8003308:	1cbb      	adds	r3, r7, #2
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	187b      	adds	r3, r7, r1
 8003312:	739a      	strb	r2, [r3, #14]
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2200      	movs	r2, #0
 8003318:	73da      	strb	r2, [r3, #15]
 800331a:	187b      	adds	r3, r7, r1
 800331c:	2200      	movs	r2, #0
 800331e:	741a      	strb	r2, [r3, #16]
 8003320:	187b      	adds	r3, r7, r1
 8003322:	1cba      	adds	r2, r7, #2
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	745a      	strb	r2, [r3, #17]
 8003328:	1cbb      	adds	r3, r7, #2
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	187b      	adds	r3, r7, r1
 8003332:	749a      	strb	r2, [r3, #18]
 8003334:	187b      	adds	r3, r7, r1
 8003336:	2200      	movs	r2, #0
 8003338:	74da      	strb	r2, [r3, #19]
 800333a:	1cbb      	adds	r3, r7, #2
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	b2da      	uxtb	r2, r3
 8003342:	187b      	adds	r3, r7, r1
 8003344:	751a      	strb	r2, [r3, #20]
 8003346:	187b      	adds	r3, r7, r1
 8003348:	2200      	movs	r2, #0
 800334a:	755a      	strb	r2, [r3, #21]
 800334c:	187b      	adds	r3, r7, r1
 800334e:	2200      	movs	r2, #0
 8003350:	759a      	strb	r2, [r3, #22]
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2200      	movs	r2, #0
 8003356:	75da      	strb	r2, [r3, #23]
		[BLUE].r = 0,               [BLUE].g = 0,              [BLUE].b = maxLight,
		[MAGENTA].r = maxLight / 2, [MAGENTA].g = 0,           [MAGENTA].b = maxLight / 2,
		[NONE2].r = 0,   			[NONE2].g = 0,  		   [NONE2].b = 0,
	};

	for (uint8_t i = 0; i < size; i++) {
 8003358:	2327      	movs	r3, #39	; 0x27
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e059      	b.n	8003416 <rainbowFrame+0x192>
		pixel[i].r = colors[i % COLOR_CNT].r;
 8003362:	2527      	movs	r5, #39	; 0x27
 8003364:	197b      	adds	r3, r7, r5
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2207      	movs	r2, #7
 800336a:	401a      	ands	r2, r3
 800336c:	260c      	movs	r6, #12
 800336e:	19b9      	adds	r1, r7, r6
 8003370:	0013      	movs	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	189b      	adds	r3, r3, r2
 8003376:	5c59      	ldrb	r1, [r3, r1]
 8003378:	197b      	adds	r3, r7, r5
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	0013      	movs	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	189b      	adds	r3, r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	001a      	movs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	189c      	adds	r4, r3, r2
 800338a:	0008      	movs	r0, r1
 800338c:	f7fe fe64 	bl	8002058 <__aeabi_ui2d>
 8003390:	0002      	movs	r2, r0
 8003392:	000b      	movs	r3, r1
 8003394:	6022      	str	r2, [r4, #0]
 8003396:	6063      	str	r3, [r4, #4]
		pixel[i].g = colors[i % COLOR_CNT].g;
 8003398:	0028      	movs	r0, r5
 800339a:	183b      	adds	r3, r7, r0
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2207      	movs	r2, #7
 80033a0:	401a      	ands	r2, r3
 80033a2:	19b9      	adds	r1, r7, r6
 80033a4:	0013      	movs	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	189b      	adds	r3, r3, r2
 80033aa:	18cb      	adds	r3, r1, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	7819      	ldrb	r1, [r3, #0]
 80033b0:	0005      	movs	r5, r0
 80033b2:	183b      	adds	r3, r7, r0
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	0013      	movs	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	001a      	movs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	189c      	adds	r4, r3, r2
 80033c4:	0008      	movs	r0, r1
 80033c6:	f7fe fe47 	bl	8002058 <__aeabi_ui2d>
 80033ca:	0002      	movs	r2, r0
 80033cc:	000b      	movs	r3, r1
 80033ce:	60a2      	str	r2, [r4, #8]
 80033d0:	60e3      	str	r3, [r4, #12]
		pixel[i].b = colors[i % COLOR_CNT].b;
 80033d2:	0028      	movs	r0, r5
 80033d4:	183b      	adds	r3, r7, r0
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2207      	movs	r2, #7
 80033da:	401a      	ands	r2, r3
 80033dc:	19b9      	adds	r1, r7, r6
 80033de:	0013      	movs	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	18cb      	adds	r3, r1, r3
 80033e6:	3302      	adds	r3, #2
 80033e8:	7819      	ldrb	r1, [r3, #0]
 80033ea:	0005      	movs	r5, r0
 80033ec:	183b      	adds	r3, r7, r0
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	0013      	movs	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	189b      	adds	r3, r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	001a      	movs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	189c      	adds	r4, r3, r2
 80033fe:	0008      	movs	r0, r1
 8003400:	f7fe fe2a 	bl	8002058 <__aeabi_ui2d>
 8003404:	0002      	movs	r2, r0
 8003406:	000b      	movs	r3, r1
 8003408:	6122      	str	r2, [r4, #16]
 800340a:	6163      	str	r3, [r4, #20]
	for (uint8_t i = 0; i < size; i++) {
 800340c:	197b      	adds	r3, r7, r5
 800340e:	781a      	ldrb	r2, [r3, #0]
 8003410:	197b      	adds	r3, r7, r5
 8003412:	3201      	adds	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	2327      	movs	r3, #39	; 0x27
 8003418:	18fa      	adds	r2, r7, r3
 800341a:	1cfb      	adds	r3, r7, #3
 800341c:	7812      	ldrb	r2, [r2, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d39e      	bcc.n	8003362 <rainbowFrame+0xde>
	}
}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b00b      	add	sp, #44	; 0x2c
 800342c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003430 <solidFrame>:



void solidFrame(Color pixel[], TypeColor typeColor, uint8_t size, uint8_t maxLight)
{
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	000c      	movs	r4, r1
 800343a:	0010      	movs	r0, r2
 800343c:	0019      	movs	r1, r3
 800343e:	1cfb      	adds	r3, r7, #3
 8003440:	1c22      	adds	r2, r4, #0
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	1cbb      	adds	r3, r7, #2
 8003446:	1c02      	adds	r2, r0, #0
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	1c7b      	adds	r3, r7, #1
 800344c:	1c0a      	adds	r2, r1, #0
 800344e:	701a      	strb	r2, [r3, #0]

	Led colors[CLR_CNT];
	Led selectColor;

	getPreDefColors(colors, maxLight);
 8003450:	1c7b      	adds	r3, r7, #1
 8003452:	781a      	ldrb	r2, [r3, #0]
 8003454:	230c      	movs	r3, #12
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	0011      	movs	r1, r2
 800345a:	0018      	movs	r0, r3
 800345c:	f7ff fc92 	bl	8002d84 <getPreDefColors>

	switch (typeColor)
 8003460:	1cfb      	adds	r3, r7, #3
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b07      	cmp	r3, #7
 8003466:	d85d      	bhi.n	8003524 <solidFrame+0xf4>
 8003468:	009a      	lsls	r2, r3, #2
 800346a:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <solidFrame+0x194>)
 800346c:	18d3      	adds	r3, r2, r3
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	469f      	mov	pc, r3
	{
		case TYPE_COLOR_RED:     selectColor = colors[RED]; break;
 8003472:	2308      	movs	r3, #8
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	220c      	movs	r2, #12
 8003478:	18ba      	adds	r2, r7, r2
 800347a:	8811      	ldrh	r1, [r2, #0]
 800347c:	8019      	strh	r1, [r3, #0]
 800347e:	7892      	ldrb	r2, [r2, #2]
 8003480:	709a      	strb	r2, [r3, #2]
 8003482:	e050      	b.n	8003526 <solidFrame+0xf6>
		case TYPE_COLOR_YELLOW:  selectColor = colors[YELLOW]; break;
 8003484:	2308      	movs	r3, #8
 8003486:	18f9      	adds	r1, r7, r3
 8003488:	230c      	movs	r3, #12
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2203      	movs	r2, #3
 800348e:	0008      	movs	r0, r1
 8003490:	189b      	adds	r3, r3, r2
 8003492:	2203      	movs	r2, #3
 8003494:	0019      	movs	r1, r3
 8003496:	f002 fd33 	bl	8005f00 <memcpy>
 800349a:	e044      	b.n	8003526 <solidFrame+0xf6>
		case TYPE_COLOR_GREEN:   selectColor = colors[GREEN]; break;
 800349c:	2308      	movs	r3, #8
 800349e:	18f9      	adds	r1, r7, r3
 80034a0:	230c      	movs	r3, #12
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2206      	movs	r2, #6
 80034a6:	0008      	movs	r0, r1
 80034a8:	189b      	adds	r3, r3, r2
 80034aa:	2203      	movs	r2, #3
 80034ac:	0019      	movs	r1, r3
 80034ae:	f002 fd27 	bl	8005f00 <memcpy>
 80034b2:	e038      	b.n	8003526 <solidFrame+0xf6>
		case TYPE_COLOR_CYAN:    selectColor = colors[CYAN]; break;
 80034b4:	2308      	movs	r3, #8
 80034b6:	18f9      	adds	r1, r7, r3
 80034b8:	230c      	movs	r3, #12
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2209      	movs	r2, #9
 80034be:	0008      	movs	r0, r1
 80034c0:	189b      	adds	r3, r3, r2
 80034c2:	2203      	movs	r2, #3
 80034c4:	0019      	movs	r1, r3
 80034c6:	f002 fd1b 	bl	8005f00 <memcpy>
 80034ca:	e02c      	b.n	8003526 <solidFrame+0xf6>
		case TYPE_COLOR_BLUE:    selectColor = colors[BLUE]; break;
 80034cc:	2308      	movs	r3, #8
 80034ce:	18fa      	adds	r2, r7, r3
 80034d0:	230c      	movs	r3, #12
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	330c      	adds	r3, #12
 80034d6:	8819      	ldrh	r1, [r3, #0]
 80034d8:	8011      	strh	r1, [r2, #0]
 80034da:	789b      	ldrb	r3, [r3, #2]
 80034dc:	7093      	strb	r3, [r2, #2]
 80034de:	e022      	b.n	8003526 <solidFrame+0xf6>
		case TYPE_COLOR_MAGENTA: selectColor = colors[MAGENTA]; break;
 80034e0:	2308      	movs	r3, #8
 80034e2:	18f9      	adds	r1, r7, r3
 80034e4:	230c      	movs	r3, #12
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	220f      	movs	r2, #15
 80034ea:	0008      	movs	r0, r1
 80034ec:	189b      	adds	r3, r3, r2
 80034ee:	2203      	movs	r2, #3
 80034f0:	0019      	movs	r1, r3
 80034f2:	f002 fd05 	bl	8005f00 <memcpy>
 80034f6:	e016      	b.n	8003526 <solidFrame+0xf6>
		case TYPE_COLOR_RANDOM:  selectColor = colors[rand() % CLR_CNT]; break;
 80034f8:	f002 fd14 	bl	8005f24 <rand>
 80034fc:	0003      	movs	r3, r0
 80034fe:	2106      	movs	r1, #6
 8003500:	0018      	movs	r0, r3
 8003502:	f7fc ff77 	bl	80003f4 <__aeabi_idivmod>
 8003506:	000b      	movs	r3, r1
 8003508:	0019      	movs	r1, r3
 800350a:	2308      	movs	r3, #8
 800350c:	18f8      	adds	r0, r7, r3
 800350e:	230c      	movs	r3, #12
 8003510:	18fa      	adds	r2, r7, r3
 8003512:	000b      	movs	r3, r1
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	185b      	adds	r3, r3, r1
 8003518:	18d3      	adds	r3, r2, r3
 800351a:	2203      	movs	r2, #3
 800351c:	0019      	movs	r1, r3
 800351e:	f002 fcef 	bl	8005f00 <memcpy>
 8003522:	e000      	b.n	8003526 <solidFrame+0xf6>
		default:
			break;
 8003524:	46c0      	nop			; (mov r8, r8)
	}

	for (uint8_t i = 0; i < size; i++) {
 8003526:	231f      	movs	r3, #31
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e03c      	b.n	80035aa <solidFrame+0x17a>
		pixel[i].r = selectColor.r;
 8003530:	2608      	movs	r6, #8
 8003532:	19bb      	adds	r3, r7, r6
 8003534:	7819      	ldrb	r1, [r3, #0]
 8003536:	251f      	movs	r5, #31
 8003538:	197b      	adds	r3, r7, r5
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	0013      	movs	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	189b      	adds	r3, r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	001a      	movs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	189c      	adds	r4, r3, r2
 800354a:	0008      	movs	r0, r1
 800354c:	f7fe fd84 	bl	8002058 <__aeabi_ui2d>
 8003550:	0002      	movs	r2, r0
 8003552:	000b      	movs	r3, r1
 8003554:	6022      	str	r2, [r4, #0]
 8003556:	6063      	str	r3, [r4, #4]
		pixel[i].g = selectColor.g;
 8003558:	19bb      	adds	r3, r7, r6
 800355a:	7859      	ldrb	r1, [r3, #1]
 800355c:	197b      	adds	r3, r7, r5
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	0013      	movs	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	189b      	adds	r3, r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	001a      	movs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	189c      	adds	r4, r3, r2
 800356e:	0008      	movs	r0, r1
 8003570:	f7fe fd72 	bl	8002058 <__aeabi_ui2d>
 8003574:	0002      	movs	r2, r0
 8003576:	000b      	movs	r3, r1
 8003578:	60a2      	str	r2, [r4, #8]
 800357a:	60e3      	str	r3, [r4, #12]
		pixel[i].b = selectColor.b;
 800357c:	19bb      	adds	r3, r7, r6
 800357e:	7899      	ldrb	r1, [r3, #2]
 8003580:	197b      	adds	r3, r7, r5
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	0013      	movs	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	189b      	adds	r3, r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	001a      	movs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	189c      	adds	r4, r3, r2
 8003592:	0008      	movs	r0, r1
 8003594:	f7fe fd60 	bl	8002058 <__aeabi_ui2d>
 8003598:	0002      	movs	r2, r0
 800359a:	000b      	movs	r3, r1
 800359c:	6122      	str	r2, [r4, #16]
 800359e:	6163      	str	r3, [r4, #20]
	for (uint8_t i = 0; i < size; i++) {
 80035a0:	197b      	adds	r3, r7, r5
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	197b      	adds	r3, r7, r5
 80035a6:	3201      	adds	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	231f      	movs	r3, #31
 80035ac:	18fa      	adds	r2, r7, r3
 80035ae:	1cbb      	adds	r3, r7, #2
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d3bb      	bcc.n	8003530 <solidFrame+0x100>
	}
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b009      	add	sp, #36	; 0x24
 80035c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	080074ec 	.word	0x080074ec

080035c8 <waveFrame>:



void waveFrame(Color pixel[], TypeColor typeColor[2], uint8_t size, uint8_t maxLight)
{
 80035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ca:	b08f      	sub	sp, #60	; 0x3c
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	0019      	movs	r1, r3
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	1dbb      	adds	r3, r7, #6
 80035da:	1c0a      	adds	r2, r1, #0
 80035dc:	701a      	strb	r2, [r3, #0]
	Led colors[CLR_CNT];
	Led selectColor[2];
	uint8_t halfSize = size / 2;
 80035de:	232c      	movs	r3, #44	; 0x2c
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	1dfa      	adds	r2, r7, #7
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	0852      	lsrs	r2, r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
	double coeficient;

	getPreDefColors(colors, maxLight);
 80035ea:	1dbb      	adds	r3, r7, #6
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	2318      	movs	r3, #24
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	0011      	movs	r1, r2
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff fbc5 	bl	8002d84 <getPreDefColors>

	for (uint8_t i = 0; i < 2; i++) {
 80035fa:	232f      	movs	r3, #47	; 0x2f
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e09c      	b.n	800373e <waveFrame+0x176>
		switch (typeColor[i])
 8003604:	232f      	movs	r3, #47	; 0x2f
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	18d3      	adds	r3, r2, r3
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b07      	cmp	r3, #7
 8003612:	d900      	bls.n	8003616 <waveFrame+0x4e>
 8003614:	e08c      	b.n	8003730 <waveFrame+0x168>
 8003616:	009a      	lsls	r2, r3, #2
 8003618:	4bbf      	ldr	r3, [pc, #764]	; (8003918 <waveFrame+0x350>)
 800361a:	18d3      	adds	r3, r2, r3
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	469f      	mov	pc, r3
		{
			case TYPE_COLOR_RED:     selectColor[i] = colors[RED]; break;
 8003620:	232f      	movs	r3, #47	; 0x2f
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	2310      	movs	r3, #16
 8003628:	18f9      	adds	r1, r7, r3
 800362a:	0013      	movs	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	189b      	adds	r3, r3, r2
 8003630:	2218      	movs	r2, #24
 8003632:	18ba      	adds	r2, r7, r2
 8003634:	18cb      	adds	r3, r1, r3
 8003636:	0011      	movs	r1, r2
 8003638:	2203      	movs	r2, #3
 800363a:	0018      	movs	r0, r3
 800363c:	f002 fc60 	bl	8005f00 <memcpy>
 8003640:	e077      	b.n	8003732 <waveFrame+0x16a>
			case TYPE_COLOR_YELLOW:  selectColor[i] = colors[YELLOW]; break;
 8003642:	232f      	movs	r3, #47	; 0x2f
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	781a      	ldrb	r2, [r3, #0]
 8003648:	2310      	movs	r3, #16
 800364a:	18f9      	adds	r1, r7, r3
 800364c:	0013      	movs	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	189b      	adds	r3, r3, r2
 8003652:	2218      	movs	r2, #24
 8003654:	18ba      	adds	r2, r7, r2
 8003656:	2003      	movs	r0, #3
 8003658:	18cb      	adds	r3, r1, r3
 800365a:	1811      	adds	r1, r2, r0
 800365c:	2203      	movs	r2, #3
 800365e:	0018      	movs	r0, r3
 8003660:	f002 fc4e 	bl	8005f00 <memcpy>
 8003664:	e065      	b.n	8003732 <waveFrame+0x16a>
			case TYPE_COLOR_GREEN:   selectColor[i] = colors[GREEN]; break;
 8003666:	232f      	movs	r3, #47	; 0x2f
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	2310      	movs	r3, #16
 800366e:	18f9      	adds	r1, r7, r3
 8003670:	0013      	movs	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	189b      	adds	r3, r3, r2
 8003676:	2218      	movs	r2, #24
 8003678:	18ba      	adds	r2, r7, r2
 800367a:	2006      	movs	r0, #6
 800367c:	18cb      	adds	r3, r1, r3
 800367e:	1811      	adds	r1, r2, r0
 8003680:	2203      	movs	r2, #3
 8003682:	0018      	movs	r0, r3
 8003684:	f002 fc3c 	bl	8005f00 <memcpy>
 8003688:	e053      	b.n	8003732 <waveFrame+0x16a>
			case TYPE_COLOR_CYAN:    selectColor[i] = colors[CYAN]; break;
 800368a:	232f      	movs	r3, #47	; 0x2f
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	2310      	movs	r3, #16
 8003692:	18f9      	adds	r1, r7, r3
 8003694:	0013      	movs	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	189b      	adds	r3, r3, r2
 800369a:	2218      	movs	r2, #24
 800369c:	18ba      	adds	r2, r7, r2
 800369e:	2009      	movs	r0, #9
 80036a0:	18cb      	adds	r3, r1, r3
 80036a2:	1811      	adds	r1, r2, r0
 80036a4:	2203      	movs	r2, #3
 80036a6:	0018      	movs	r0, r3
 80036a8:	f002 fc2a 	bl	8005f00 <memcpy>
 80036ac:	e041      	b.n	8003732 <waveFrame+0x16a>
			case TYPE_COLOR_BLUE:    selectColor[i] = colors[BLUE]; break;
 80036ae:	232f      	movs	r3, #47	; 0x2f
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	2310      	movs	r3, #16
 80036b6:	18f9      	adds	r1, r7, r3
 80036b8:	0013      	movs	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	2218      	movs	r2, #24
 80036c0:	18ba      	adds	r2, r7, r2
 80036c2:	18cb      	adds	r3, r1, r3
 80036c4:	320c      	adds	r2, #12
 80036c6:	0011      	movs	r1, r2
 80036c8:	2203      	movs	r2, #3
 80036ca:	0018      	movs	r0, r3
 80036cc:	f002 fc18 	bl	8005f00 <memcpy>
 80036d0:	e02f      	b.n	8003732 <waveFrame+0x16a>
			case TYPE_COLOR_MAGENTA: selectColor[i] = colors[MAGENTA]; break;
 80036d2:	232f      	movs	r3, #47	; 0x2f
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	2310      	movs	r3, #16
 80036da:	18f9      	adds	r1, r7, r3
 80036dc:	0013      	movs	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	189b      	adds	r3, r3, r2
 80036e2:	2218      	movs	r2, #24
 80036e4:	18ba      	adds	r2, r7, r2
 80036e6:	200f      	movs	r0, #15
 80036e8:	18cb      	adds	r3, r1, r3
 80036ea:	1811      	adds	r1, r2, r0
 80036ec:	2203      	movs	r2, #3
 80036ee:	0018      	movs	r0, r3
 80036f0:	f002 fc06 	bl	8005f00 <memcpy>
 80036f4:	e01d      	b.n	8003732 <waveFrame+0x16a>
			case TYPE_COLOR_RANDOM:  selectColor[i] = colors[rand() % CLR_CNT]; break;
 80036f6:	f002 fc15 	bl	8005f24 <rand>
 80036fa:	0003      	movs	r3, r0
 80036fc:	2106      	movs	r1, #6
 80036fe:	0018      	movs	r0, r3
 8003700:	f7fc fe78 	bl	80003f4 <__aeabi_idivmod>
 8003704:	000b      	movs	r3, r1
 8003706:	001c      	movs	r4, r3
 8003708:	232f      	movs	r3, #47	; 0x2f
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	18b8      	adds	r0, r7, r2
 8003712:	001a      	movs	r2, r3
 8003714:	0052      	lsls	r2, r2, #1
 8003716:	18d2      	adds	r2, r2, r3
 8003718:	2318      	movs	r3, #24
 800371a:	18f9      	adds	r1, r7, r3
 800371c:	0023      	movs	r3, r4
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	191b      	adds	r3, r3, r4
 8003722:	1880      	adds	r0, r0, r2
 8003724:	18cb      	adds	r3, r1, r3
 8003726:	2203      	movs	r2, #3
 8003728:	0019      	movs	r1, r3
 800372a:	f002 fbe9 	bl	8005f00 <memcpy>
 800372e:	e000      	b.n	8003732 <waveFrame+0x16a>
			default:
				break;
 8003730:	46c0      	nop			; (mov r8, r8)
	for (uint8_t i = 0; i < 2; i++) {
 8003732:	212f      	movs	r1, #47	; 0x2f
 8003734:	187b      	adds	r3, r7, r1
 8003736:	781a      	ldrb	r2, [r3, #0]
 8003738:	187b      	adds	r3, r7, r1
 800373a:	3201      	adds	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	232f      	movs	r3, #47	; 0x2f
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d800      	bhi.n	800374a <waveFrame+0x182>
 8003748:	e75c      	b.n	8003604 <waveFrame+0x3c>
		}
	}

	for (uint8_t i = 0; i < 2; i++) {
 800374a:	232e      	movs	r3, #46	; 0x2e
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e0d6      	b.n	8003902 <waveFrame+0x33a>
		for (uint8_t x = 0; x < halfSize; x++) {
 8003754:	232d      	movs	r3, #45	; 0x2d
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	e0c2      	b.n	80038e4 <waveFrame+0x31c>
			if (x < (halfSize / 2)) {
 800375e:	232c      	movs	r3, #44	; 0x2c
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	212d      	movs	r1, #45	; 0x2d
 800376a:	187a      	adds	r2, r7, r1
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d20a      	bcs.n	8003788 <waveFrame+0x1c0>
				coeficient =  x + 1;
 8003772:	187b      	adds	r3, r7, r1
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	3301      	adds	r3, #1
 8003778:	0018      	movs	r0, r3
 800377a:	f7fe fc3d 	bl	8001ff8 <__aeabi_i2d>
 800377e:	0002      	movs	r2, r0
 8003780:	000b      	movs	r3, r1
 8003782:	633a      	str	r2, [r7, #48]	; 0x30
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
 8003786:	e015      	b.n	80037b4 <waveFrame+0x1ec>
			}else{
				coeficient = (halfSize / 2) - (x - (halfSize / 2));
 8003788:	222c      	movs	r2, #44	; 0x2c
 800378a:	18bb      	adds	r3, r7, r2
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	0019      	movs	r1, r3
 8003794:	232d      	movs	r3, #45	; 0x2d
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	18ba      	adds	r2, r7, r2
 800379c:	7812      	ldrb	r2, [r2, #0]
 800379e:	0852      	lsrs	r2, r2, #1
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	1acb      	subs	r3, r1, r3
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fe fc26 	bl	8001ff8 <__aeabi_i2d>
 80037ac:	0002      	movs	r2, r0
 80037ae:	000b      	movs	r3, r1
 80037b0:	633a      	str	r2, [r7, #48]	; 0x30
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
			}
			pixel[x + i * halfSize].r = selectColor[i].r / (halfSize / 2) * coeficient;
 80037b4:	252e      	movs	r5, #46	; 0x2e
 80037b6:	197b      	adds	r3, r7, r5
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	2310      	movs	r3, #16
 80037bc:	18f9      	adds	r1, r7, r3
 80037be:	0013      	movs	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	5c5a      	ldrb	r2, [r3, r1]
 80037c6:	262c      	movs	r6, #44	; 0x2c
 80037c8:	19bb      	adds	r3, r7, r6
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	0019      	movs	r1, r3
 80037d2:	0010      	movs	r0, r2
 80037d4:	f7fc fc9e 	bl	8000114 <__udivsi3>
 80037d8:	0003      	movs	r3, r0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	0018      	movs	r0, r3
 80037de:	f7fe fc0b 	bl	8001ff8 <__aeabi_i2d>
 80037e2:	232d      	movs	r3, #45	; 0x2d
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	197b      	adds	r3, r7, r5
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	19bc      	adds	r4, r7, r6
 80037ee:	7824      	ldrb	r4, [r4, #0]
 80037f0:	4363      	muls	r3, r4
 80037f2:	18d3      	adds	r3, r2, r3
 80037f4:	001a      	movs	r2, r3
 80037f6:	0013      	movs	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	001a      	movs	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	189c      	adds	r4, r3, r2
 8003804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	f7fd fdc2 	bl	8001390 <__aeabi_dmul>
 800380c:	0002      	movs	r2, r0
 800380e:	000b      	movs	r3, r1
 8003810:	6022      	str	r2, [r4, #0]
 8003812:	6063      	str	r3, [r4, #4]
			pixel[x + i * halfSize].g = selectColor[i].g / (halfSize / 2) * coeficient;
 8003814:	002c      	movs	r4, r5
 8003816:	193b      	adds	r3, r7, r4
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	2110      	movs	r1, #16
 800381c:	1879      	adds	r1, r7, r1
 800381e:	0013      	movs	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	189b      	adds	r3, r3, r2
 8003824:	18cb      	adds	r3, r1, r3
 8003826:	3301      	adds	r3, #1
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	19bb      	adds	r3, r7, r6
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	0019      	movs	r1, r3
 8003834:	0010      	movs	r0, r2
 8003836:	f7fc fc6d 	bl	8000114 <__udivsi3>
 800383a:	0003      	movs	r3, r0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	0018      	movs	r0, r3
 8003840:	f7fe fbda 	bl	8001ff8 <__aeabi_i2d>
 8003844:	232d      	movs	r3, #45	; 0x2d
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	0025      	movs	r5, r4
 800384c:	193b      	adds	r3, r7, r4
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	19bc      	adds	r4, r7, r6
 8003852:	7824      	ldrb	r4, [r4, #0]
 8003854:	4363      	muls	r3, r4
 8003856:	18d3      	adds	r3, r2, r3
 8003858:	001a      	movs	r2, r3
 800385a:	0013      	movs	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	189b      	adds	r3, r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	001a      	movs	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	189c      	adds	r4, r3, r2
 8003868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	f7fd fd90 	bl	8001390 <__aeabi_dmul>
 8003870:	0002      	movs	r2, r0
 8003872:	000b      	movs	r3, r1
 8003874:	60a2      	str	r2, [r4, #8]
 8003876:	60e3      	str	r3, [r4, #12]
			pixel[x + i * halfSize].b = selectColor[i].b / (halfSize / 2) * coeficient;
 8003878:	002c      	movs	r4, r5
 800387a:	193b      	adds	r3, r7, r4
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	2110      	movs	r1, #16
 8003880:	1879      	adds	r1, r7, r1
 8003882:	0013      	movs	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	189b      	adds	r3, r3, r2
 8003888:	18cb      	adds	r3, r1, r3
 800388a:	3302      	adds	r3, #2
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	19bb      	adds	r3, r7, r6
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	0019      	movs	r1, r3
 8003898:	0010      	movs	r0, r2
 800389a:	f7fc fc3b 	bl	8000114 <__udivsi3>
 800389e:	0003      	movs	r3, r0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7fe fba8 	bl	8001ff8 <__aeabi_i2d>
 80038a8:	252d      	movs	r5, #45	; 0x2d
 80038aa:	197b      	adds	r3, r7, r5
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	193b      	adds	r3, r7, r4
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	19bc      	adds	r4, r7, r6
 80038b4:	7824      	ldrb	r4, [r4, #0]
 80038b6:	4363      	muls	r3, r4
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	001a      	movs	r2, r3
 80038bc:	0013      	movs	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	189b      	adds	r3, r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	001a      	movs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	189c      	adds	r4, r3, r2
 80038ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ce:	f7fd fd5f 	bl	8001390 <__aeabi_dmul>
 80038d2:	0002      	movs	r2, r0
 80038d4:	000b      	movs	r3, r1
 80038d6:	6122      	str	r2, [r4, #16]
 80038d8:	6163      	str	r3, [r4, #20]
		for (uint8_t x = 0; x < halfSize; x++) {
 80038da:	197b      	adds	r3, r7, r5
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	197b      	adds	r3, r7, r5
 80038e0:	3201      	adds	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	232d      	movs	r3, #45	; 0x2d
 80038e6:	18fa      	adds	r2, r7, r3
 80038e8:	232c      	movs	r3, #44	; 0x2c
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d200      	bcs.n	80038f6 <waveFrame+0x32e>
 80038f4:	e733      	b.n	800375e <waveFrame+0x196>
	for (uint8_t i = 0; i < 2; i++) {
 80038f6:	212e      	movs	r1, #46	; 0x2e
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	3201      	adds	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	232e      	movs	r3, #46	; 0x2e
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d800      	bhi.n	800390e <waveFrame+0x346>
 800390c:	e722      	b.n	8003754 <waveFrame+0x18c>
		}
	}
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b00f      	add	sp, #60	; 0x3c
 8003916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003918:	0800750c 	.word	0x0800750c

0800391c <createFrame>:



static void createFrame(Color pixel[], EffectSetting *effectSetting, uint8_t size, uint8_t maxLight)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b087      	sub	sp, #28
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	0019      	movs	r1, r3
 8003928:	1dfb      	adds	r3, r7, #7
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	1c0a      	adds	r2, r1, #0
 8003930:	701a      	strb	r2, [r3, #0]
	switch (effectSetting->typeFrame) {
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d02a      	beq.n	8003990 <createFrame+0x74>
 800393a:	dc34      	bgt.n	80039a6 <createFrame+0x8a>
 800393c:	2b02      	cmp	r3, #2
 800393e:	d01c      	beq.n	800397a <createFrame+0x5e>
 8003940:	dc31      	bgt.n	80039a6 <createFrame+0x8a>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <createFrame+0x30>
 8003946:	2b01      	cmp	r3, #1
 8003948:	d00e      	beq.n	8003968 <createFrame+0x4c>
		case TYPE_FRAME_WAVE:
			waveFrame(pixel, effectSetting->typeColor, size, maxLight);
			break;

		default:
			break;
 800394a:	e02c      	b.n	80039a6 <createFrame+0x8a>
			flameBallFrame(pixel, effectSetting->typeFlameBall, effectSetting->typeColor, size, maxLight);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	7a99      	ldrb	r1, [r3, #10]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	1d9a      	adds	r2, r3, #6
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	781c      	ldrb	r4, [r3, #0]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	1dbb      	adds	r3, r7, #6
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	0023      	movs	r3, r4
 8003962:	f7ff fa75 	bl	8002e50 <flameBallFrame>
			break;
 8003966:	e01f      	b.n	80039a8 <createFrame+0x8c>
			rainbowFrame(pixel, size, maxLight);
 8003968:	1dbb      	adds	r3, r7, #6
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	7819      	ldrb	r1, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	0018      	movs	r0, r3
 8003974:	f7ff fc86 	bl	8003284 <rainbowFrame>
			break;
 8003978:	e016      	b.n	80039a8 <createFrame+0x8c>
			solidFrame(pixel, effectSetting->typeColor[0], size, maxLight);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	7999      	ldrb	r1, [r3, #6]
 800397e:	1dbb      	adds	r3, r7, #6
 8003980:	781c      	ldrb	r4, [r3, #0]
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	0023      	movs	r3, r4
 800398a:	f7ff fd51 	bl	8003430 <solidFrame>
			break;
 800398e:	e00b      	b.n	80039a8 <createFrame+0x8c>
			waveFrame(pixel, effectSetting->typeColor, size, maxLight);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	1d99      	adds	r1, r3, #6
 8003994:	1dbb      	adds	r3, r7, #6
 8003996:	781c      	ldrb	r4, [r3, #0]
 8003998:	1dfb      	adds	r3, r7, #7
 800399a:	781a      	ldrb	r2, [r3, #0]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	0023      	movs	r3, r4
 80039a0:	f7ff fe12 	bl	80035c8 <waveFrame>
			break;
 80039a4:	e000      	b.n	80039a8 <createFrame+0x8c>
			break;
 80039a6:	46c0      	nop			; (mov r8, r8)
	}

	if (effectSetting->typeMove == TYPE_MOVE_FRAME_FORWARD) {
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	789b      	ldrb	r3, [r3, #2]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <createFrame+0xa2>
		reversLeds(pixel, size);
 80039b0:	1dfb      	adds	r3, r7, #7
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	0011      	movs	r1, r2
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7ff f86f 	bl	8002a9c <reversLeds>
	}
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b005      	add	sp, #20
 80039c4:	bd90      	pop	{r4, r7, pc}

080039c6 <moveFrame>:



static void moveFrame(Color pixels[], uint8_t size, TypeMove typeMove)
{
 80039c6:	b590      	push	{r4, r7, lr}
 80039c8:	b08b      	sub	sp, #44	; 0x2c
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	0008      	movs	r0, r1
 80039d0:	0011      	movs	r1, r2
 80039d2:	1cfb      	adds	r3, r7, #3
 80039d4:	1c02      	adds	r2, r0, #0
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	1cbb      	adds	r3, r7, #2
 80039da:	1c0a      	adds	r2, r1, #0
 80039dc:	701a      	strb	r2, [r3, #0]
	Color buffer;

	switch (typeMove) {
 80039de:	1cbb      	adds	r3, r7, #2
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <moveFrame+0x26>
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d044      	beq.n	8003a74 <moveFrame+0xae>
		case TYPE_MOVE_LIGHTING_BACK:
			//in progress
			break;
*/
		default:
			break;
 80039ea:	e087      	b.n	8003afc <moveFrame+0x136>
			buffer = pixels[0];
 80039ec:	2308      	movs	r3, #8
 80039ee:	18fa      	adds	r2, r7, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0010      	movs	r0, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	2318      	movs	r3, #24
 80039f8:	001a      	movs	r2, r3
 80039fa:	f002 fa81 	bl	8005f00 <memcpy>
			for (uint8_t i = 1; i < size; i++) {
 80039fe:	2327      	movs	r3, #39	; 0x27
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e01c      	b.n	8003a42 <moveFrame+0x7c>
				pixels[i-1] = pixels[i];
 8003a08:	2427      	movs	r4, #39	; 0x27
 8003a0a:	193b      	adds	r3, r7, r4
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	0013      	movs	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	189b      	adds	r3, r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	001a      	movs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	1899      	adds	r1, r3, r2
 8003a1c:	193b      	adds	r3, r7, r4
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	0013      	movs	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	189b      	adds	r3, r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	3b18      	subs	r3, #24
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	18d3      	adds	r3, r2, r3
 8003a2e:	0018      	movs	r0, r3
 8003a30:	2318      	movs	r3, #24
 8003a32:	001a      	movs	r2, r3
 8003a34:	f002 fa64 	bl	8005f00 <memcpy>
			for (uint8_t i = 1; i < size; i++) {
 8003a38:	193b      	adds	r3, r7, r4
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	3201      	adds	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	2327      	movs	r3, #39	; 0x27
 8003a44:	18fa      	adds	r2, r7, r3
 8003a46:	1cfb      	adds	r3, r7, #3
 8003a48:	7812      	ldrb	r2, [r2, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d3db      	bcc.n	8003a08 <moveFrame+0x42>
			pixels[size-1] = buffer;
 8003a50:	1cfb      	adds	r3, r7, #3
 8003a52:	781a      	ldrb	r2, [r3, #0]
 8003a54:	0013      	movs	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	189b      	adds	r3, r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	3b18      	subs	r3, #24
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	18d2      	adds	r2, r2, r3
 8003a62:	2308      	movs	r3, #8
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	0010      	movs	r0, r2
 8003a68:	0019      	movs	r1, r3
 8003a6a:	2318      	movs	r3, #24
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	f002 fa47 	bl	8005f00 <memcpy>
			break;
 8003a72:	e043      	b.n	8003afc <moveFrame+0x136>
			buffer = pixels[size-1];
 8003a74:	1cfb      	adds	r3, r7, #3
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	0013      	movs	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	189b      	adds	r3, r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	3b18      	subs	r3, #24
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	18d3      	adds	r3, r2, r3
 8003a86:	2208      	movs	r2, #8
 8003a88:	18ba      	adds	r2, r7, r2
 8003a8a:	0010      	movs	r0, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	2318      	movs	r3, #24
 8003a90:	001a      	movs	r2, r3
 8003a92:	f002 fa35 	bl	8005f00 <memcpy>
			for (uint8_t i = size-1; i > 0; i--) {
 8003a96:	2326      	movs	r3, #38	; 0x26
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	1cfa      	adds	r2, r7, #3
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	3a01      	subs	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	e01c      	b.n	8003ade <moveFrame+0x118>
				pixels[i] = pixels[i-1];
 8003aa4:	2426      	movs	r4, #38	; 0x26
 8003aa6:	193b      	adds	r3, r7, r4
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	0013      	movs	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	189b      	adds	r3, r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	3b18      	subs	r3, #24
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	18d1      	adds	r1, r2, r3
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	0013      	movs	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	0018      	movs	r0, r3
 8003acc:	2318      	movs	r3, #24
 8003ace:	001a      	movs	r2, r3
 8003ad0:	f002 fa16 	bl	8005f00 <memcpy>
			for (uint8_t i = size-1; i > 0; i--) {
 8003ad4:	193b      	adds	r3, r7, r4
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	3a01      	subs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	2326      	movs	r3, #38	; 0x26
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1dd      	bne.n	8003aa4 <moveFrame+0xde>
			pixels[0] = buffer;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	2308      	movs	r3, #8
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	0010      	movs	r0, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	2318      	movs	r3, #24
 8003af4:	001a      	movs	r2, r3
 8003af6:	f002 fa03 	bl	8005f00 <memcpy>
			break;
 8003afa:	46c0      	nop			; (mov r8, r8)
	}
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b00b      	add	sp, #44	; 0x2c
 8003b02:	bd90      	pop	{r4, r7, pc}

08003b04 <calcStepFrame>:
static void calcStepFrame(Color colorNow[],
						  Color colorTarget[],
						  Color colorStep[],
						  uint8_t maxSteps,
						  uint8_t size)
{
 8003b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b06:	b08d      	sub	sp, #52	; 0x34
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	001a      	movs	r2, r3
 8003b12:	1cfb      	adds	r3, r7, #3
 8003b14:	701a      	strb	r2, [r3, #0]
	Color diff;

	for (uint8_t i = 0; i < size; i++) {
 8003b16:	232f      	movs	r3, #47	; 0x2f
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e0b3      	b.n	8003c88 <calcStepFrame+0x184>
		diff.r = colorTarget[i].r - colorNow[i].r;
 8003b20:	262f      	movs	r6, #47	; 0x2f
 8003b22:	19bb      	adds	r3, r7, r6
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	0013      	movs	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	001a      	movs	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	19bb      	adds	r3, r7, r6
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	0013      	movs	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	189b      	adds	r3, r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	001a      	movs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	189b      	adds	r3, r3, r2
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f7fd fe8b 	bl	8001868 <__aeabi_dsub>
 8003b52:	0002      	movs	r2, r0
 8003b54:	000b      	movs	r3, r1
 8003b56:	2410      	movs	r4, #16
 8003b58:	1939      	adds	r1, r7, r4
 8003b5a:	600a      	str	r2, [r1, #0]
 8003b5c:	604b      	str	r3, [r1, #4]
		diff.g = colorTarget[i].g - colorNow[i].g;
 8003b5e:	19bb      	adds	r3, r7, r6
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	0013      	movs	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	6898      	ldr	r0, [r3, #8]
 8003b72:	68d9      	ldr	r1, [r3, #12]
 8003b74:	19bb      	adds	r3, r7, r6
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	0013      	movs	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	189b      	adds	r3, r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	001a      	movs	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	189b      	adds	r3, r3, r2
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f7fd fe6d 	bl	8001868 <__aeabi_dsub>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	000b      	movs	r3, r1
 8003b92:	1939      	adds	r1, r7, r4
 8003b94:	608a      	str	r2, [r1, #8]
 8003b96:	60cb      	str	r3, [r1, #12]
		diff.b = colorTarget[i].b - colorNow[i].b;
 8003b98:	19bb      	adds	r3, r7, r6
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	189b      	adds	r3, r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	189b      	adds	r3, r3, r2
 8003baa:	6918      	ldr	r0, [r3, #16]
 8003bac:	6959      	ldr	r1, [r3, #20]
 8003bae:	19bb      	adds	r3, r7, r6
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	0013      	movs	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	001a      	movs	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f7fd fe50 	bl	8001868 <__aeabi_dsub>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	000b      	movs	r3, r1
 8003bcc:	1939      	adds	r1, r7, r4
 8003bce:	610a      	str	r2, [r1, #16]
 8003bd0:	614b      	str	r3, [r1, #20]

		colorStep[i].r = diff.r / maxSteps;
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	681c      	ldr	r4, [r3, #0]
 8003bd6:	685d      	ldr	r5, [r3, #4]
 8003bd8:	1cfb      	adds	r3, r7, #3
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7fe fa0b 	bl	8001ff8 <__aeabi_i2d>
 8003be2:	19bb      	adds	r3, r7, r6
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	0013      	movs	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	189b      	adds	r3, r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	001a      	movs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	189e      	adds	r6, r3, r2
 8003bf4:	0002      	movs	r2, r0
 8003bf6:	000b      	movs	r3, r1
 8003bf8:	0020      	movs	r0, r4
 8003bfa:	0029      	movs	r1, r5
 8003bfc:	f7fc ffc6 	bl	8000b8c <__aeabi_ddiv>
 8003c00:	0002      	movs	r2, r0
 8003c02:	000b      	movs	r3, r1
 8003c04:	6032      	str	r2, [r6, #0]
 8003c06:	6073      	str	r3, [r6, #4]
		colorStep[i].g = diff.g / maxSteps;
 8003c08:	2410      	movs	r4, #16
 8003c0a:	193b      	adds	r3, r7, r4
 8003c0c:	689c      	ldr	r4, [r3, #8]
 8003c0e:	68dd      	ldr	r5, [r3, #12]
 8003c10:	1cfb      	adds	r3, r7, #3
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f7fe f9ef 	bl	8001ff8 <__aeabi_i2d>
 8003c1a:	262f      	movs	r6, #47	; 0x2f
 8003c1c:	19bb      	adds	r3, r7, r6
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	0013      	movs	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	189b      	adds	r3, r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	001a      	movs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	189e      	adds	r6, r3, r2
 8003c2e:	0002      	movs	r2, r0
 8003c30:	000b      	movs	r3, r1
 8003c32:	0020      	movs	r0, r4
 8003c34:	0029      	movs	r1, r5
 8003c36:	f7fc ffa9 	bl	8000b8c <__aeabi_ddiv>
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	000b      	movs	r3, r1
 8003c3e:	60b2      	str	r2, [r6, #8]
 8003c40:	60f3      	str	r3, [r6, #12]
		colorStep[i].b = diff.b / maxSteps;
 8003c42:	2410      	movs	r4, #16
 8003c44:	193b      	adds	r3, r7, r4
 8003c46:	691c      	ldr	r4, [r3, #16]
 8003c48:	695d      	ldr	r5, [r3, #20]
 8003c4a:	1cfb      	adds	r3, r7, #3
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7fe f9d2 	bl	8001ff8 <__aeabi_i2d>
 8003c54:	262f      	movs	r6, #47	; 0x2f
 8003c56:	19bb      	adds	r3, r7, r6
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	0013      	movs	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	189b      	adds	r3, r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	001a      	movs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	189e      	adds	r6, r3, r2
 8003c68:	0002      	movs	r2, r0
 8003c6a:	000b      	movs	r3, r1
 8003c6c:	0020      	movs	r0, r4
 8003c6e:	0029      	movs	r1, r5
 8003c70:	f7fc ff8c 	bl	8000b8c <__aeabi_ddiv>
 8003c74:	0002      	movs	r2, r0
 8003c76:	000b      	movs	r3, r1
 8003c78:	6132      	str	r2, [r6, #16]
 8003c7a:	6173      	str	r3, [r6, #20]
	for (uint8_t i = 0; i < size; i++) {
 8003c7c:	212f      	movs	r1, #47	; 0x2f
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	3201      	adds	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	232f      	movs	r3, #47	; 0x2f
 8003c8a:	18fa      	adds	r2, r7, r3
 8003c8c:	2348      	movs	r3, #72	; 0x48
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	7812      	ldrb	r2, [r2, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d200      	bcs.n	8003c9a <calcStepFrame+0x196>
 8003c98:	e742      	b.n	8003b20 <calcStepFrame+0x1c>
	}
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b00d      	add	sp, #52	; 0x34
 8003ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ca4 <updateFrame>:



static void updateFrame(Color colorNow[], Color colorStep[], uint8_t size)
{
 8003ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 8003cb2:	2317      	movs	r3, #23
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e07d      	b.n	8003db8 <updateFrame+0x114>
		colorNow[i].r += colorStep[i].r;
 8003cbc:	2617      	movs	r6, #23
 8003cbe:	19bb      	adds	r3, r7, r6
 8003cc0:	781a      	ldrb	r2, [r3, #0]
 8003cc2:	0013      	movs	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	189b      	adds	r3, r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	001a      	movs	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	19bb      	adds	r3, r7, r6
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	0013      	movs	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	189b      	adds	r3, r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	001a      	movs	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	681c      	ldr	r4, [r3, #0]
 8003ce8:	685d      	ldr	r5, [r3, #4]
 8003cea:	19bb      	adds	r3, r7, r6
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	0013      	movs	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	189e      	adds	r6, r3, r2
 8003cfc:	0022      	movs	r2, r4
 8003cfe:	002b      	movs	r3, r5
 8003d00:	f7fc fc08 	bl	8000514 <__aeabi_dadd>
 8003d04:	0002      	movs	r2, r0
 8003d06:	000b      	movs	r3, r1
 8003d08:	6032      	str	r2, [r6, #0]
 8003d0a:	6073      	str	r3, [r6, #4]
		colorNow[i].g += colorStep[i].g;
 8003d0c:	2617      	movs	r6, #23
 8003d0e:	19bb      	adds	r3, r7, r6
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	0013      	movs	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	6898      	ldr	r0, [r3, #8]
 8003d22:	68d9      	ldr	r1, [r3, #12]
 8003d24:	19bb      	adds	r3, r7, r6
 8003d26:	781a      	ldrb	r2, [r3, #0]
 8003d28:	0013      	movs	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	001a      	movs	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	689c      	ldr	r4, [r3, #8]
 8003d38:	68dd      	ldr	r5, [r3, #12]
 8003d3a:	19bb      	adds	r3, r7, r6
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	0013      	movs	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	001a      	movs	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	189e      	adds	r6, r3, r2
 8003d4c:	0022      	movs	r2, r4
 8003d4e:	002b      	movs	r3, r5
 8003d50:	f7fc fbe0 	bl	8000514 <__aeabi_dadd>
 8003d54:	0002      	movs	r2, r0
 8003d56:	000b      	movs	r3, r1
 8003d58:	60b2      	str	r2, [r6, #8]
 8003d5a:	60f3      	str	r3, [r6, #12]
		colorNow[i].b += colorStep[i].b;
 8003d5c:	2617      	movs	r6, #23
 8003d5e:	19bb      	adds	r3, r7, r6
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	0013      	movs	r3, r2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	6918      	ldr	r0, [r3, #16]
 8003d72:	6959      	ldr	r1, [r3, #20]
 8003d74:	19bb      	adds	r3, r7, r6
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	0013      	movs	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	189b      	adds	r3, r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	001a      	movs	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	691c      	ldr	r4, [r3, #16]
 8003d88:	695d      	ldr	r5, [r3, #20]
 8003d8a:	19bb      	adds	r3, r7, r6
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	0013      	movs	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	001a      	movs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	189e      	adds	r6, r3, r2
 8003d9c:	0022      	movs	r2, r4
 8003d9e:	002b      	movs	r3, r5
 8003da0:	f7fc fbb8 	bl	8000514 <__aeabi_dadd>
 8003da4:	0002      	movs	r2, r0
 8003da6:	000b      	movs	r3, r1
 8003da8:	6132      	str	r2, [r6, #16]
 8003daa:	6173      	str	r3, [r6, #20]
	for (uint8_t i = 0; i < size; i++) {
 8003dac:	2617      	movs	r6, #23
 8003dae:	19bb      	adds	r3, r7, r6
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	19bb      	adds	r3, r7, r6
 8003db4:	3201      	adds	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	2317      	movs	r3, #23
 8003dba:	18fa      	adds	r2, r7, r3
 8003dbc:	1dfb      	adds	r3, r7, #7
 8003dbe:	7812      	ldrb	r2, [r2, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d200      	bcs.n	8003dc8 <updateFrame+0x124>
 8003dc6:	e779      	b.n	8003cbc <updateFrame+0x18>
	}
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b007      	add	sp, #28
 8003dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dd2 <checkEqualFrames>:



static bool checkEqualFrames(Color A[], Color B[], uint8_t size)
{
 8003dd2:	b590      	push	{r4, r7, lr}
 8003dd4:	b087      	sub	sp, #28
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	1dfb      	adds	r3, r7, #7
 8003dde:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 8003de0:	2317      	movs	r3, #23
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	e056      	b.n	8003e98 <checkEqualFrames+0xc6>
		if (A[i].r != B[i].r ||
 8003dea:	2417      	movs	r4, #23
 8003dec:	193b      	adds	r3, r7, r4
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	0013      	movs	r3, r2
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	001a      	movs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	189b      	adds	r3, r3, r2
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	193b      	adds	r3, r7, r4
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	0013      	movs	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	189b      	adds	r3, r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	001a      	movs	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f7fc fb02 	bl	8000420 <__aeabi_dcmpeq>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d033      	beq.n	8003e88 <checkEqualFrames+0xb6>
			A[i].g != B[i].g ||
 8003e20:	193b      	adds	r3, r7, r4
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	0013      	movs	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	189b      	adds	r3, r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	189b      	adds	r3, r3, r2
 8003e32:	6898      	ldr	r0, [r3, #8]
 8003e34:	68d9      	ldr	r1, [r3, #12]
 8003e36:	193b      	adds	r3, r7, r4
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	001a      	movs	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	68db      	ldr	r3, [r3, #12]
		if (A[i].r != B[i].r ||
 8003e4c:	f7fc fae8 	bl	8000420 <__aeabi_dcmpeq>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d019      	beq.n	8003e88 <checkEqualFrames+0xb6>
			A[i].b != B[i].b) {
 8003e54:	193b      	adds	r3, r7, r4
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	0013      	movs	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	001a      	movs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	189b      	adds	r3, r3, r2
 8003e66:	6918      	ldr	r0, [r3, #16]
 8003e68:	6959      	ldr	r1, [r3, #20]
 8003e6a:	193b      	adds	r3, r7, r4
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	0013      	movs	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	001a      	movs	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	695b      	ldr	r3, [r3, #20]
			A[i].g != B[i].g ||
 8003e80:	f7fc face 	bl	8000420 <__aeabi_dcmpeq>
 8003e84:	1e03      	subs	r3, r0, #0
 8003e86:	d101      	bne.n	8003e8c <checkEqualFrames+0xba>
			return false;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e00d      	b.n	8003ea8 <checkEqualFrames+0xd6>
	for (uint8_t i = 0; i < size; i++) {
 8003e8c:	2117      	movs	r1, #23
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	3201      	adds	r2, #1
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	2317      	movs	r3, #23
 8003e9a:	18fa      	adds	r2, r7, r3
 8003e9c:	1dfb      	adds	r3, r7, #7
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d3a1      	bcc.n	8003dea <checkEqualFrames+0x18>
		}
	}

	return true;
 8003ea6:	2301      	movs	r3, #1
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b007      	add	sp, #28
 8003eae:	bd90      	pop	{r4, r7, pc}

08003eb0 <lightUpdate>:



void lightUpdate(EffectSetting *effectSetting, uint8_t light)
{
 8003eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb2:	b093      	sub	sp, #76	; 0x4c
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	000a      	movs	r2, r1
 8003eba:	1cfb      	adds	r3, r7, #3
 8003ebc:	701a      	strb	r2, [r3, #0]
	static Color colorStep[LED_SIZE];
	static uint8_t maxLight = 0;
	static uint16_t timeEffect = 0;

	Led led[LED_SIZE];
	uint8_t steps = 16;
 8003ebe:	243e      	movs	r4, #62	; 0x3e
 8003ec0:	193b      	adds	r3, r7, r4
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	701a      	strb	r2, [r3, #0]

	if (maxLight != light && maxLight != 0) {
 8003ec6:	4b6b      	ldr	r3, [pc, #428]	; (8004074 <lightUpdate+0x1c4>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	1cfa      	adds	r2, r7, #3
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d014      	beq.n	8003efc <lightUpdate+0x4c>
 8003ed2:	4b68      	ldr	r3, [pc, #416]	; (8004074 <lightUpdate+0x1c4>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d010      	beq.n	8003efc <lightUpdate+0x4c>
		changeLightIntensive(colorTarget, LED_SIZE, maxLight, light);
 8003eda:	4b66      	ldr	r3, [pc, #408]	; (8004074 <lightUpdate+0x1c4>)
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	1cfb      	adds	r3, r7, #3
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	4865      	ldr	r0, [pc, #404]	; (8004078 <lightUpdate+0x1c8>)
 8003ee4:	2110      	movs	r1, #16
 8003ee6:	f7fe fe39 	bl	8002b5c <changeLightIntensive>
		//changeLightIntensive(colorNow, LED_SIZE, maxLight, light);
		calcStepFrame(colorNow, colorTarget, colorStep, steps, LED_SIZE);
 8003eea:	193b      	adds	r3, r7, r4
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	4a63      	ldr	r2, [pc, #396]	; (800407c <lightUpdate+0x1cc>)
 8003ef0:	4961      	ldr	r1, [pc, #388]	; (8004078 <lightUpdate+0x1c8>)
 8003ef2:	4863      	ldr	r0, [pc, #396]	; (8004080 <lightUpdate+0x1d0>)
 8003ef4:	2410      	movs	r4, #16
 8003ef6:	9400      	str	r4, [sp, #0]
 8003ef8:	f7ff fe04 	bl	8003b04 <calcStepFrame>
	}

	maxLight = light;
 8003efc:	4b5d      	ldr	r3, [pc, #372]	; (8004074 <lightUpdate+0x1c4>)
 8003efe:	1cfa      	adds	r2, r7, #3
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	701a      	strb	r2, [r3, #0]

	if ((effectSetting->timeLifeColorEffect != 0 && timeEffect == 0)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	889b      	ldrh	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <lightUpdate+0x64>
 8003f0c:	4b5d      	ldr	r3, [pc, #372]	; (8004084 <lightUpdate+0x1d4>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <lightUpdate+0x6c>
	    || effectSetting->isNewSet == 1) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d11e      	bne.n	8003f5a <lightUpdate+0xaa>
		createFrame(colorTarget, effectSetting, LED_SIZE, maxLight);
 8003f1c:	4b55      	ldr	r3, [pc, #340]	; (8004074 <lightUpdate+0x1c4>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4855      	ldr	r0, [pc, #340]	; (8004078 <lightUpdate+0x1c8>)
 8003f24:	2210      	movs	r2, #16
 8003f26:	f7ff fcf9 	bl	800391c <createFrame>
		calcStepFrame(colorNow, colorTarget, colorStep, steps, LED_SIZE);
 8003f2a:	253e      	movs	r5, #62	; 0x3e
 8003f2c:	197b      	adds	r3, r7, r5
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	4a52      	ldr	r2, [pc, #328]	; (800407c <lightUpdate+0x1cc>)
 8003f32:	4951      	ldr	r1, [pc, #324]	; (8004078 <lightUpdate+0x1c8>)
 8003f34:	4852      	ldr	r0, [pc, #328]	; (8004080 <lightUpdate+0x1d0>)
 8003f36:	2410      	movs	r4, #16
 8003f38:	9400      	str	r4, [sp, #0]
 8003f3a:	f7ff fde3 	bl	8003b04 <calcStepFrame>
		timeEffect = steps * LED_SIZE * effectSetting->timeLifeColorEffect;
 8003f3e:	197b      	adds	r3, r7, r5
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	8892      	ldrh	r2, [r2, #4]
 8003f48:	4353      	muls	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <lightUpdate+0x1d4>)
 8003f52:	801a      	strh	r2, [r3, #0]
		effectSetting->isNewSet = 0;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
	}

	if (checkEqualFrames(colorNow, colorTarget, LED_SIZE)) {
 8003f5a:	4947      	ldr	r1, [pc, #284]	; (8004078 <lightUpdate+0x1c8>)
 8003f5c:	4b48      	ldr	r3, [pc, #288]	; (8004080 <lightUpdate+0x1d0>)
 8003f5e:	2210      	movs	r2, #16
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7ff ff36 	bl	8003dd2 <checkEqualFrames>
 8003f66:	1e03      	subs	r3, r0, #0
 8003f68:	d010      	beq.n	8003f8c <lightUpdate+0xdc>
		moveFrame(colorTarget, LED_SIZE, effectSetting->typeMove);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	789a      	ldrb	r2, [r3, #2]
 8003f6e:	4b42      	ldr	r3, [pc, #264]	; (8004078 <lightUpdate+0x1c8>)
 8003f70:	2110      	movs	r1, #16
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7ff fd27 	bl	80039c6 <moveFrame>
		calcStepFrame(colorNow, colorTarget, colorStep, steps, LED_SIZE);
 8003f78:	233e      	movs	r3, #62	; 0x3e
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4a3f      	ldr	r2, [pc, #252]	; (800407c <lightUpdate+0x1cc>)
 8003f80:	493d      	ldr	r1, [pc, #244]	; (8004078 <lightUpdate+0x1c8>)
 8003f82:	483f      	ldr	r0, [pc, #252]	; (8004080 <lightUpdate+0x1d0>)
 8003f84:	2410      	movs	r4, #16
 8003f86:	9400      	str	r4, [sp, #0]
 8003f88:	f7ff fdbc 	bl	8003b04 <calcStepFrame>
	}

	updateFrame(colorNow, colorStep, LED_SIZE);
 8003f8c:	493b      	ldr	r1, [pc, #236]	; (800407c <lightUpdate+0x1cc>)
 8003f8e:	4b3c      	ldr	r3, [pc, #240]	; (8004080 <lightUpdate+0x1d0>)
 8003f90:	2210      	movs	r2, #16
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff fe86 	bl	8003ca4 <updateFrame>

	for (uint8_t i = 0; i < LED_SIZE; i++) {
 8003f98:	233f      	movs	r3, #63	; 0x3f
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e053      	b.n	800404a <lightUpdate+0x19a>
		led[i].r = colorNow[i].r;
 8003fa2:	253f      	movs	r5, #63	; 0x3f
 8003fa4:	197b      	adds	r3, r7, r5
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	4935      	ldr	r1, [pc, #212]	; (8004080 <lightUpdate+0x1d0>)
 8003faa:	0013      	movs	r3, r2
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	18cb      	adds	r3, r1, r3
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	1979      	adds	r1, r7, r5
 8003fba:	780c      	ldrb	r4, [r1, #0]
 8003fbc:	0010      	movs	r0, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	f7fc fa8a 	bl	80004d8 <__aeabi_d2uiz>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	b2d9      	uxtb	r1, r3
 8003fc8:	260c      	movs	r6, #12
 8003fca:	19ba      	adds	r2, r7, r6
 8003fcc:	0023      	movs	r3, r4
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	191b      	adds	r3, r3, r4
 8003fd2:	5499      	strb	r1, [r3, r2]
		led[i].g = colorNow[i].g;
 8003fd4:	197b      	adds	r3, r7, r5
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	4929      	ldr	r1, [pc, #164]	; (8004080 <lightUpdate+0x1d0>)
 8003fda:	0013      	movs	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	18cb      	adds	r3, r1, r3
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	1979      	adds	r1, r7, r5
 8003fec:	780c      	ldrb	r4, [r1, #0]
 8003fee:	0010      	movs	r0, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	f7fc fa71 	bl	80004d8 <__aeabi_d2uiz>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	b2d9      	uxtb	r1, r3
 8003ffa:	19ba      	adds	r2, r7, r6
 8003ffc:	0023      	movs	r3, r4
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	191b      	adds	r3, r3, r4
 8004002:	18d3      	adds	r3, r2, r3
 8004004:	3301      	adds	r3, #1
 8004006:	1c0a      	adds	r2, r1, #0
 8004008:	701a      	strb	r2, [r3, #0]
		led[i].b = colorNow[i].b;
 800400a:	197b      	adds	r3, r7, r5
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	491c      	ldr	r1, [pc, #112]	; (8004080 <lightUpdate+0x1d0>)
 8004010:	0013      	movs	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	189b      	adds	r3, r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	18cb      	adds	r3, r1, r3
 800401a:	3310      	adds	r3, #16
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	1979      	adds	r1, r7, r5
 8004022:	780c      	ldrb	r4, [r1, #0]
 8004024:	0010      	movs	r0, r2
 8004026:	0019      	movs	r1, r3
 8004028:	f7fc fa56 	bl	80004d8 <__aeabi_d2uiz>
 800402c:	0003      	movs	r3, r0
 800402e:	b2d9      	uxtb	r1, r3
 8004030:	19ba      	adds	r2, r7, r6
 8004032:	0023      	movs	r3, r4
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	191b      	adds	r3, r3, r4
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	3302      	adds	r3, #2
 800403c:	1c0a      	adds	r2, r1, #0
 800403e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < LED_SIZE; i++) {
 8004040:	197b      	adds	r3, r7, r5
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	197b      	adds	r3, r7, r5
 8004046:	3201      	adds	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	233f      	movs	r3, #63	; 0x3f
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b0f      	cmp	r3, #15
 8004052:	d9a6      	bls.n	8003fa2 <lightUpdate+0xf2>
	}

	setLight(led);
 8004054:	230c      	movs	r3, #12
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	0018      	movs	r0, r3
 800405a:	f001 f949 	bl	80052f0 <setLight>
	timeEffect--;
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <lightUpdate+0x1d4>)
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <lightUpdate+0x1d4>)
 8004068:	801a      	strh	r2, [r3, #0]
}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b011      	add	sp, #68	; 0x44
 8004070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	2000019c 	.word	0x2000019c
 8004078:	200001a0 	.word	0x200001a0
 800407c:	200004a0 	.word	0x200004a0
 8004080:	20000320 	.word	0x20000320
 8004084:	20000620 	.word	0x20000620

08004088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	0002      	movs	r2, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	1dfb      	adds	r3, r7, #7
 8004094:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004096:	1dfb      	adds	r3, r7, #7
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b7f      	cmp	r3, #127	; 0x7f
 800409c:	d828      	bhi.n	80040f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800409e:	4a2f      	ldr	r2, [pc, #188]	; (800415c <__NVIC_SetPriority+0xd4>)
 80040a0:	1dfb      	adds	r3, r7, #7
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	33c0      	adds	r3, #192	; 0xc0
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	589b      	ldr	r3, [r3, r2]
 80040ae:	1dfa      	adds	r2, r7, #7
 80040b0:	7812      	ldrb	r2, [r2, #0]
 80040b2:	0011      	movs	r1, r2
 80040b4:	2203      	movs	r2, #3
 80040b6:	400a      	ands	r2, r1
 80040b8:	00d2      	lsls	r2, r2, #3
 80040ba:	21ff      	movs	r1, #255	; 0xff
 80040bc:	4091      	lsls	r1, r2
 80040be:	000a      	movs	r2, r1
 80040c0:	43d2      	mvns	r2, r2
 80040c2:	401a      	ands	r2, r3
 80040c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	401a      	ands	r2, r3
 80040ce:	1dfb      	adds	r3, r7, #7
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	0018      	movs	r0, r3
 80040d4:	2303      	movs	r3, #3
 80040d6:	4003      	ands	r3, r0
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040dc:	481f      	ldr	r0, [pc, #124]	; (800415c <__NVIC_SetPriority+0xd4>)
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b25b      	sxtb	r3, r3
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	430a      	orrs	r2, r1
 80040e8:	33c0      	adds	r3, #192	; 0xc0
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80040ee:	e031      	b.n	8004154 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040f0:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <__NVIC_SetPriority+0xd8>)
 80040f2:	1dfb      	adds	r3, r7, #7
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	0019      	movs	r1, r3
 80040f8:	230f      	movs	r3, #15
 80040fa:	400b      	ands	r3, r1
 80040fc:	3b08      	subs	r3, #8
 80040fe:	089b      	lsrs	r3, r3, #2
 8004100:	3306      	adds	r3, #6
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	3304      	adds	r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	1dfa      	adds	r2, r7, #7
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	0011      	movs	r1, r2
 8004110:	2203      	movs	r2, #3
 8004112:	400a      	ands	r2, r1
 8004114:	00d2      	lsls	r2, r2, #3
 8004116:	21ff      	movs	r1, #255	; 0xff
 8004118:	4091      	lsls	r1, r2
 800411a:	000a      	movs	r2, r1
 800411c:	43d2      	mvns	r2, r2
 800411e:	401a      	ands	r2, r3
 8004120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	22ff      	movs	r2, #255	; 0xff
 8004128:	401a      	ands	r2, r3
 800412a:	1dfb      	adds	r3, r7, #7
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	0018      	movs	r0, r3
 8004130:	2303      	movs	r3, #3
 8004132:	4003      	ands	r3, r0
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004138:	4809      	ldr	r0, [pc, #36]	; (8004160 <__NVIC_SetPriority+0xd8>)
 800413a:	1dfb      	adds	r3, r7, #7
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	001c      	movs	r4, r3
 8004140:	230f      	movs	r3, #15
 8004142:	4023      	ands	r3, r4
 8004144:	3b08      	subs	r3, #8
 8004146:	089b      	lsrs	r3, r3, #2
 8004148:	430a      	orrs	r2, r1
 800414a:	3306      	adds	r3, #6
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	18c3      	adds	r3, r0, r3
 8004150:	3304      	adds	r3, #4
 8004152:	601a      	str	r2, [r3, #0]
}
 8004154:	46c0      	nop			; (mov r8, r8)
 8004156:	46bd      	mov	sp, r7
 8004158:	b003      	add	sp, #12
 800415a:	bd90      	pop	{r4, r7, pc}
 800415c:	e000e100 	.word	0xe000e100
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <LL_RCC_HSI_Enable+0x18>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <LL_RCC_HSI_Enable+0x18>)
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	0049      	lsls	r1, r1, #1
 8004172:	430a      	orrs	r2, r1
 8004174:	601a      	str	r2, [r3, #0]
}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000

08004180 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <LL_RCC_HSI_IsReady+0x24>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	401a      	ands	r2, r3
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	429a      	cmp	r2, r3
 8004194:	d101      	bne.n	800419a <LL_RCC_HSI_IsReady+0x1a>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <LL_RCC_HSI_IsReady+0x1c>
 800419a:	2300      	movs	r3, #0
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	40021000 	.word	0x40021000

080041a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <LL_RCC_SetSysClkSource+0x24>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2207      	movs	r2, #7
 80041b6:	4393      	bics	r3, r2
 80041b8:	0019      	movs	r1, r3
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <LL_RCC_SetSysClkSource+0x24>)
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	430a      	orrs	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b002      	add	sp, #8
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	40021000 	.word	0x40021000

080041d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <LL_RCC_GetSysClkSource+0x14>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2238      	movs	r2, #56	; 0x38
 80041da:	4013      	ands	r3, r2
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	40021000 	.word	0x40021000

080041e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <LL_RCC_SetAHBPrescaler+0x24>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a06      	ldr	r2, [pc, #24]	; (8004210 <LL_RCC_SetAHBPrescaler+0x28>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	4b04      	ldr	r3, [pc, #16]	; (800420c <LL_RCC_SetAHBPrescaler+0x24>)
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	46bd      	mov	sp, r7
 8004206:	b002      	add	sp, #8
 8004208:	bd80      	pop	{r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	40021000 	.word	0x40021000
 8004210:	fffff0ff 	.word	0xfffff0ff

08004214 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <LL_RCC_SetAPB1Prescaler+0x24>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a06      	ldr	r2, [pc, #24]	; (800423c <LL_RCC_SetAPB1Prescaler+0x28>)
 8004222:	4013      	ands	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <LL_RCC_SetAPB1Prescaler+0x24>)
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	b002      	add	sp, #8
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	40021000 	.word	0x40021000
 800423c:	ffff8fff 	.word	0xffff8fff

08004240 <LL_APB1_GRP1_EnableClock>:
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8004248:	4b07      	ldr	r3, [pc, #28]	; (8004268 <LL_APB1_GRP1_EnableClock+0x28>)
 800424a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <LL_APB1_GRP1_EnableClock+0x28>)
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	430a      	orrs	r2, r1
 8004252:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <LL_APB1_GRP1_EnableClock+0x28>)
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4013      	ands	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800425e:	68fb      	ldr	r3, [r7, #12]
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b004      	add	sp, #16
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40021000 	.word	0x40021000

0800426c <LL_APB2_GRP1_EnableClock>:
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8004274:	4b07      	ldr	r3, [pc, #28]	; (8004294 <LL_APB2_GRP1_EnableClock+0x28>)
 8004276:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <LL_APB2_GRP1_EnableClock+0x28>)
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	430a      	orrs	r2, r1
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <LL_APB2_GRP1_EnableClock+0x28>)
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4013      	ands	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800428a:	68fb      	ldr	r3, [r7, #12]
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b004      	add	sp, #16
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <main>:
void SystemClockConfig(void);



int main(void)
{
 8004298:	b5b0      	push	{r4, r5, r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
	uint16_t adcValue;
	uint8_t maxLight;
	uint8_t modes = 0;
 800429e:	240e      	movs	r4, #14
 80042a0:	193b      	adds	r3, r7, r4
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]

	ButtonStruct buttonSwitchMode = {
 80042a6:	003b      	movs	r3, r7
 80042a8:	4a45      	ldr	r2, [pc, #276]	; (80043c0 <main+0x128>)
 80042aa:	ca23      	ldmia	r2!, {r0, r1, r5}
 80042ac:	c323      	stmia	r3!, {r0, r1, r5}
		  .pin = LL_GPIO_PIN_4,
		  .port = GPIOA,
		  .pressTicks = 0
	};

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80042ae:	2001      	movs	r0, #1
 80042b0:	f7ff ffdc 	bl	800426c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	055b      	lsls	r3, r3, #21
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7ff ffc1 	bl	8004240 <LL_APB1_GRP1_EnableClock>
	NVIC_SetPriority(SysTick_IRQn, 3);
 80042be:	2301      	movs	r3, #1
 80042c0:	425b      	negs	r3, r3
 80042c2:	2103      	movs	r1, #3
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff fedf 	bl	8004088 <__NVIC_SetPriority>
	SystemClockConfig();
 80042ca:	f000 f87f 	bl	80043cc <SystemClockConfig>
	lightSensorInit();
 80042ce:	f7fe fad1 	bl	8002874 <lightSensorInit>
	startLightMeasurment();
 80042d2:	f7fe fbb9 	bl	8002a48 <startLightMeasurment>
	debugInit();
 80042d6:	f000 fa33 	bl	8004740 <debugInit>
	initLight();
 80042da:	f000 ff51 	bl	8005180 <initLight>
	buttonInit();
 80042de:	f7fd ffef 	bl	80022c0 <buttonInit>

	effects[modes].isNewSet = 1;
 80042e2:	193b      	adds	r3, r7, r4
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	4937      	ldr	r1, [pc, #220]	; (80043c4 <main+0x12c>)
 80042e8:	0013      	movs	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	2201      	movs	r2, #1
 80042f2:	545a      	strb	r2, [r3, r1]
	debugTx("init ok\n");
 80042f4:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <main+0x130>)
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 fa00 	bl	80046fc <debugTx>
	while (1)
	{
		adcValue = getLightValue();
 80042fc:	250c      	movs	r5, #12
 80042fe:	197c      	adds	r4, r7, r5
 8004300:	f7fe fa90 	bl	8002824 <getLightValue>
 8004304:	0003      	movs	r3, r0
 8004306:	8023      	strh	r3, [r4, #0]

		if (adcValue > 400) {
 8004308:	197b      	adds	r3, r7, r5
 800430a:	881a      	ldrh	r2, [r3, #0]
 800430c:	23c8      	movs	r3, #200	; 0xc8
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	429a      	cmp	r2, r3
 8004312:	d904      	bls.n	800431e <main+0x86>
		  maxLight = 80;
 8004314:	230f      	movs	r3, #15
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	2250      	movs	r2, #80	; 0x50
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e019      	b.n	8004352 <main+0xba>
		} else if(adcValue > 300) {
 800431e:	230c      	movs	r3, #12
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	881a      	ldrh	r2, [r3, #0]
 8004324:	2396      	movs	r3, #150	; 0x96
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	429a      	cmp	r2, r3
 800432a:	d904      	bls.n	8004336 <main+0x9e>
		  maxLight = 64;
 800432c:	230f      	movs	r3, #15
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	2240      	movs	r2, #64	; 0x40
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e00d      	b.n	8004352 <main+0xba>
		} else  if(adcValue > 200){
 8004336:	230c      	movs	r3, #12
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	2bc8      	cmp	r3, #200	; 0xc8
 800433e:	d904      	bls.n	800434a <main+0xb2>
		  maxLight = 48;
 8004340:	230f      	movs	r3, #15
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	2230      	movs	r2, #48	; 0x30
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	e003      	b.n	8004352 <main+0xba>
		} else {
		  maxLight = 32;
 800434a:	230f      	movs	r3, #15
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	2220      	movs	r2, #32
 8004350:	701a      	strb	r2, [r3, #0]
		}

		if (buttonProcess(&buttonSwitchMode) == BUTTON_SHORT_CLICK) {
 8004352:	003b      	movs	r3, r7
 8004354:	0018      	movs	r0, r3
 8004356:	f7fd ffd4 	bl	8002302 <buttonProcess>
 800435a:	1e03      	subs	r3, r0, #0
 800435c:	d116      	bne.n	800438c <main+0xf4>
		  if(++modes >= NUM_OF_EFFECTS) modes = 0;
 800435e:	210e      	movs	r1, #14
 8004360:	187b      	adds	r3, r7, r1
 8004362:	187a      	adds	r2, r7, r1
 8004364:	7812      	ldrb	r2, [r2, #0]
 8004366:	3201      	adds	r2, #1
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	187b      	adds	r3, r7, r1
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b09      	cmp	r3, #9
 8004370:	d902      	bls.n	8004378 <main+0xe0>
 8004372:	187b      	adds	r3, r7, r1
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
		  effects[modes].isNewSet = 1;
 8004378:	230e      	movs	r3, #14
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	4911      	ldr	r1, [pc, #68]	; (80043c4 <main+0x12c>)
 8004380:	0013      	movs	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	189b      	adds	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	2201      	movs	r2, #1
 800438a:	545a      	strb	r2, [r3, r1]
		}

		lightUpdate(&effects[modes], maxLight);
 800438c:	230e      	movs	r3, #14
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	0013      	movs	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	189b      	adds	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <main+0x12c>)
 800439c:	189a      	adds	r2, r3, r2
 800439e:	230f      	movs	r3, #15
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	0019      	movs	r1, r3
 80043a6:	0010      	movs	r0, r2
 80043a8:	f7ff fd82 	bl	8003eb0 <lightUpdate>
		LL_mDelay(1);
 80043ac:	2001      	movs	r0, #1
 80043ae:	f001 fd4b 	bl	8005e48 <LL_mDelay>
		startLightMeasurment();
 80043b2:	f7fe fb49 	bl	8002a48 <startLightMeasurment>
		LL_mDelay(9);
 80043b6:	2009      	movs	r0, #9
 80043b8:	f001 fd46 	bl	8005e48 <LL_mDelay>
		adcValue = getLightValue();
 80043bc:	e79e      	b.n	80042fc <main+0x64>
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	0800741c 	.word	0x0800741c
 80043c4:	20000000 	.word	0x20000000
 80043c8:	08007410 	.word	0x08007410

080043cc <SystemClockConfig>:
	}
}

void SystemClockConfig(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 80043d0:	f7ff fec8 	bl	8004164 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	f7ff fed3 	bl	8004180 <LL_RCC_HSI_IsReady>
 80043da:	0003      	movs	r3, r0
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d1fa      	bne.n	80043d6 <SystemClockConfig+0xa>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80043e0:	2000      	movs	r0, #0
 80043e2:	f7ff ff01 	bl	80041e8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7ff fede 	bl	80041a8 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	f7ff feef 	bl	80041d0 <LL_RCC_GetSysClkSource>
 80043f2:	1e03      	subs	r3, r0, #0
 80043f4:	d1fb      	bne.n	80043ee <SystemClockConfig+0x22>
  {
  }
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7ff ff0c 	bl	8004214 <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(16000000);
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <SystemClockConfig+0x48>)
 80043fe:	0018      	movs	r0, r3
 8004400:	f001 fd12 	bl	8005e28 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <SystemClockConfig+0x48>)
 8004406:	0018      	movs	r0, r3
 8004408:	f001 fd42 	bl	8005e90 <LL_SetSystemCoreClock>
}
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	00f42400 	.word	0x00f42400

08004418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800441c:	e7fe      	b.n	800441c <NMI_Handler+0x4>

0800441e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004422:	e7fe      	b.n	8004422 <HardFault_Handler+0x4>

08004424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	af00      	add	r7, sp, #0
  return 1;
 8004446:	2301      	movs	r3, #1
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <_kill>:

int _kill(int pid, int sig)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004458:	f001 fd28 	bl	8005eac <__errno>
 800445c:	0003      	movs	r3, r0
 800445e:	2216      	movs	r2, #22
 8004460:	601a      	str	r2, [r3, #0]
  return -1;
 8004462:	2301      	movs	r3, #1
 8004464:	425b      	negs	r3, r3
}
 8004466:	0018      	movs	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	b002      	add	sp, #8
 800446c:	bd80      	pop	{r7, pc}

0800446e <_exit>:

void _exit (int status)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004476:	2301      	movs	r3, #1
 8004478:	425a      	negs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0011      	movs	r1, r2
 800447e:	0018      	movs	r0, r3
 8004480:	f7ff ffe5 	bl	800444e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004484:	e7fe      	b.n	8004484 <_exit+0x16>

08004486 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e00a      	b.n	80044ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004498:	e000      	b.n	800449c <_read+0x16>
 800449a:	bf00      	nop
 800449c:	0001      	movs	r1, r0
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	60ba      	str	r2, [r7, #8]
 80044a4:	b2ca      	uxtb	r2, r1
 80044a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	3301      	adds	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	dbf0      	blt.n	8004498 <_read+0x12>
  }

  return len;
 80044b6:	687b      	ldr	r3, [r7, #4]
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b006      	add	sp, #24
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	e009      	b.n	80044e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	60ba      	str	r2, [r7, #8]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	0018      	movs	r0, r3
 80044dc:	e000      	b.n	80044e0 <_write+0x20>
 80044de:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3301      	adds	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	dbf1      	blt.n	80044d2 <_write+0x12>
  }
  return len;
 80044ee:	687b      	ldr	r3, [r7, #4]
}
 80044f0:	0018      	movs	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b006      	add	sp, #24
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_close>:

int _close(int file)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004500:	2301      	movs	r3, #1
 8004502:	425b      	negs	r3, r3
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}

0800450c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2280      	movs	r2, #128	; 0x80
 800451a:	0192      	lsls	r2, r2, #6
 800451c:	605a      	str	r2, [r3, #4]
  return 0;
 800451e:	2300      	movs	r3, #0
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	b002      	add	sp, #8
 8004526:	bd80      	pop	{r7, pc}

08004528 <_isatty>:

int _isatty(int file)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004530:	2301      	movs	r3, #1
}
 8004532:	0018      	movs	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	b002      	add	sp, #8
 8004538:	bd80      	pop	{r7, pc}

0800453a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004546:	2300      	movs	r3, #0
}
 8004548:	0018      	movs	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	b004      	add	sp, #16
 800454e:	bd80      	pop	{r7, pc}

08004550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004558:	4a14      	ldr	r2, [pc, #80]	; (80045ac <_sbrk+0x5c>)
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <_sbrk+0x60>)
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <_sbrk+0x64>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <_sbrk+0x64>)
 800456e:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <_sbrk+0x68>)
 8004570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <_sbrk+0x64>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	18d3      	adds	r3, r2, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	429a      	cmp	r2, r3
 800457e:	d207      	bcs.n	8004590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004580:	f001 fc94 	bl	8005eac <__errno>
 8004584:	0003      	movs	r3, r0
 8004586:	220c      	movs	r2, #12
 8004588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800458a:	2301      	movs	r3, #1
 800458c:	425b      	negs	r3, r3
 800458e:	e009      	b.n	80045a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <_sbrk+0x64>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <_sbrk+0x64>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	18d2      	adds	r2, r2, r3
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <_sbrk+0x64>)
 80045a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80045a2:	68fb      	ldr	r3, [r7, #12]
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b006      	add	sp, #24
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20002000 	.word	0x20002000
 80045b0:	00000400 	.word	0x00000400
 80045b4:	20000624 	.word	0x20000624
 80045b8:	200007c0 	.word	0x200007c0

080045bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <LL_APB1_GRP1_EnableClock>:
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <LL_APB1_GRP1_EnableClock+0x28>)
 80045d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <LL_APB1_GRP1_EnableClock+0x28>)
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	430a      	orrs	r2, r1
 80045da:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <LL_APB1_GRP1_EnableClock+0x28>)
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	4013      	ands	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b004      	add	sp, #16
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000

080045f4 <LL_IOP_GRP1_EnableClock>:
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <LL_IOP_GRP1_EnableClock+0x28>)
 80045fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <LL_IOP_GRP1_EnableClock+0x28>)
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	430a      	orrs	r2, r1
 8004606:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8004608:	4b04      	ldr	r3, [pc, #16]	; (800461c <LL_IOP_GRP1_EnableClock+0x28>)
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4013      	ands	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	46c0      	nop			; (mov r8, r8)
 8004616:	46bd      	mov	sp, r7
 8004618:	b004      	add	sp, #16
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000

08004620 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2201      	movs	r2, #1
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	601a      	str	r2, [r3, #0]
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}

0800463c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	4a07      	ldr	r2, [pc, #28]	; (8004668 <LL_USART_ConfigAsyncMode+0x2c>)
 800464a:	401a      	ands	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	222a      	movs	r2, #42	; 0x2a
 8004656:	4393      	bics	r3, r2
 8004658:	001a      	movs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	609a      	str	r2, [r3, #8]
}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	46bd      	mov	sp, r7
 8004662:	b002      	add	sp, #8
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	ffffb7ff 	.word	0xffffb7ff

0800466c <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	2280      	movs	r2, #128	; 0x80
 800467a:	4013      	ands	r3, r2
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d101      	bne.n	8004684 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8004684:	2300      	movs	r3, #0
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b002      	add	sp, #8
 800468c:	bd80      	pop	{r7, pc}

0800468e <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	039b      	lsls	r3, r3, #14
 800469e:	401a      	ands	r2, r3
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	039b      	lsls	r3, r3, #14
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d101      	bne.n	80046ac <LL_USART_IsActiveFlag_TEACK+0x1e>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <LL_USART_IsActiveFlag_TEACK+0x20>
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b002      	add	sp, #8
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	03db      	lsls	r3, r3, #15
 80046c6:	401a      	ands	r2, r3
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	03db      	lsls	r3, r3, #15
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d101      	bne.n	80046d4 <LL_USART_IsActiveFlag_REACK+0x1e>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <LL_USART_IsActiveFlag_REACK+0x20>
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}

080046de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	000a      	movs	r2, r1
 80046e8:	1cfb      	adds	r3, r7, #3
 80046ea:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 80046ec:	1cfb      	adds	r3, r7, #3
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <debugTx>:
 *      Author: oleg
 */
#include "main.h"

void debugTx(char *data)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	for (; *data != '\0'; data++) {
 8004704:	e010      	b.n	8004728 <debugTx+0x2c>
		while(!LL_USART_IsActiveFlag_TXE_TXFNF(USART2));
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <debugTx+0x40>)
 800470a:	0018      	movs	r0, r3
 800470c:	f7ff ffae 	bl	800466c <LL_USART_IsActiveFlag_TXE_TXFNF>
 8004710:	1e03      	subs	r3, r0, #0
 8004712:	d0f9      	beq.n	8004708 <debugTx+0xc>
		LL_USART_TransmitData8(USART2, *data);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	4a08      	ldr	r2, [pc, #32]	; (800473c <debugTx+0x40>)
 800471a:	0019      	movs	r1, r3
 800471c:	0010      	movs	r0, r2
 800471e:	f7ff ffde 	bl	80046de <LL_USART_TransmitData8>
	for (; *data != '\0'; data++) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3301      	adds	r3, #1
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ea      	bne.n	8004706 <debugTx+0xa>
	}
}
 8004730:	46c0      	nop			; (mov r8, r8)
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	40004400 	.word	0x40004400

08004740 <debugInit>:

void debugInit(void)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b08f      	sub	sp, #60	; 0x3c
 8004744:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8004746:	2418      	movs	r4, #24
 8004748:	193b      	adds	r3, r7, r4
 800474a:	0018      	movs	r0, r3
 800474c:	2320      	movs	r3, #32
 800474e:	001a      	movs	r2, r3
 8004750:	2100      	movs	r1, #0
 8004752:	f001 fbde 	bl	8005f12 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004756:	003b      	movs	r3, r7
 8004758:	0018      	movs	r0, r3
 800475a:	2318      	movs	r3, #24
 800475c:	001a      	movs	r2, r3
 800475e:	2100      	movs	r1, #0
 8004760:	f001 fbd7 	bl	8005f12 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	029b      	lsls	r3, r3, #10
 8004768:	0018      	movs	r0, r3
 800476a:	f7ff ff2d 	bl	80045c8 <LL_APB1_GRP1_EnableClock>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800476e:	2001      	movs	r0, #1
 8004770:	f7ff ff40 	bl	80045f4 <LL_IOP_GRP1_EnableClock>
	/**USART2 GPIO Configuration
	PA2   ------> USART2_TX
	PA3   ------> USART2_RX
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004774:	003b      	movs	r3, r7
 8004776:	2204      	movs	r2, #4
 8004778:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800477a:	003b      	movs	r3, r7
 800477c:	2202      	movs	r2, #2
 800477e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004780:	003b      	movs	r3, r7
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004786:	003b      	movs	r3, r7
 8004788:	2200      	movs	r2, #0
 800478a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800478c:	003b      	movs	r3, r7
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004792:	003b      	movs	r3, r7
 8004794:	2201      	movs	r2, #1
 8004796:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004798:	003a      	movs	r2, r7
 800479a:	23a0      	movs	r3, #160	; 0xa0
 800479c:	05db      	lsls	r3, r3, #23
 800479e:	0011      	movs	r1, r2
 80047a0:	0018      	movs	r0, r3
 80047a2:	f001 f828 	bl	80057f6 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80047a6:	003b      	movs	r3, r7
 80047a8:	2208      	movs	r2, #8
 80047aa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80047ac:	003b      	movs	r3, r7
 80047ae:	2202      	movs	r2, #2
 80047b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80047b2:	003b      	movs	r3, r7
 80047b4:	2200      	movs	r2, #0
 80047b6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80047b8:	003b      	movs	r3, r7
 80047ba:	2200      	movs	r2, #0
 80047bc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80047be:	003b      	movs	r3, r7
 80047c0:	2200      	movs	r2, #0
 80047c2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80047c4:	003b      	movs	r3, r7
 80047c6:	2201      	movs	r2, #1
 80047c8:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ca:	003a      	movs	r2, r7
 80047cc:	23a0      	movs	r3, #160	; 0xa0
 80047ce:	05db      	lsls	r3, r3, #23
 80047d0:	0011      	movs	r1, r2
 80047d2:	0018      	movs	r0, r3
 80047d4:	f001 f80f 	bl	80057f6 <LL_GPIO_Init>

	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80047d8:	193b      	adds	r3, r7, r4
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
	USART_InitStruct.BaudRate = 115200;
 80047de:	193b      	adds	r3, r7, r4
 80047e0:	22e1      	movs	r2, #225	; 0xe1
 80047e2:	0252      	lsls	r2, r2, #9
 80047e4:	605a      	str	r2, [r3, #4]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80047e6:	0021      	movs	r1, r4
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80047ee:	187b      	adds	r3, r7, r1
 80047f0:	2200      	movs	r2, #0
 80047f2:	60da      	str	r2, [r3, #12]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80047fa:	187b      	adds	r3, r7, r1
 80047fc:	220c      	movs	r2, #12
 80047fe:	615a      	str	r2, [r3, #20]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004800:	187b      	adds	r3, r7, r1
 8004802:	2200      	movs	r2, #0
 8004804:	619a      	str	r2, [r3, #24]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004806:	187b      	adds	r3, r7, r1
 8004808:	2200      	movs	r2, #0
 800480a:	61da      	str	r2, [r3, #28]
	LL_USART_Init(USART2, &USART_InitStruct);
 800480c:	187b      	adds	r3, r7, r1
 800480e:	4a0f      	ldr	r2, [pc, #60]	; (800484c <debugInit+0x10c>)
 8004810:	0019      	movs	r1, r3
 8004812:	0010      	movs	r0, r2
 8004814:	f001 fa7c 	bl	8005d10 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART2);
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <debugInit+0x10c>)
 800481a:	0018      	movs	r0, r3
 800481c:	f7ff ff0e 	bl	800463c <LL_USART_ConfigAsyncMode>

	LL_USART_Enable(USART2);
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <debugInit+0x10c>)
 8004822:	0018      	movs	r0, r3
 8004824:	f7ff fefc 	bl	8004620 <LL_USART_Enable>

	/* Polling USART2 initialisation */
	while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <debugInit+0x10c>)
 800482c:	0018      	movs	r0, r3
 800482e:	f7ff ff2e 	bl	800468e <LL_USART_IsActiveFlag_TEACK>
 8004832:	1e03      	subs	r3, r0, #0
 8004834:	d0f9      	beq.n	800482a <debugInit+0xea>
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <debugInit+0x10c>)
 8004838:	0018      	movs	r0, r3
 800483a:	f7ff ff3c 	bl	80046b6 <LL_USART_IsActiveFlag_REACK>
 800483e:	1e03      	subs	r3, r0, #0
 8004840:	d0f3      	beq.n	800482a <debugInit+0xea>
	{
	}
}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46c0      	nop			; (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b00f      	add	sp, #60	; 0x3c
 800484a:	bd90      	pop	{r4, r7, pc}
 800484c:	40004400 	.word	0x40004400

08004850 <__NVIC_EnableIRQ>:
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	0002      	movs	r2, r0
 8004858:	1dfb      	adds	r3, r7, #7
 800485a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b7f      	cmp	r3, #127	; 0x7f
 8004862:	d809      	bhi.n	8004878 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004864:	1dfb      	adds	r3, r7, #7
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	001a      	movs	r2, r3
 800486a:	231f      	movs	r3, #31
 800486c:	401a      	ands	r2, r3
 800486e:	4b04      	ldr	r3, [pc, #16]	; (8004880 <__NVIC_EnableIRQ+0x30>)
 8004870:	2101      	movs	r1, #1
 8004872:	4091      	lsls	r1, r2
 8004874:	000a      	movs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b002      	add	sp, #8
 800487e:	bd80      	pop	{r7, pc}
 8004880:	e000e100 	.word	0xe000e100

08004884 <__NVIC_DisableIRQ>:
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	0002      	movs	r2, r0
 800488c:	1dfb      	adds	r3, r7, #7
 800488e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004890:	1dfb      	adds	r3, r7, #7
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b7f      	cmp	r3, #127	; 0x7f
 8004896:	d810      	bhi.n	80048ba <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004898:	1dfb      	adds	r3, r7, #7
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	001a      	movs	r2, r3
 800489e:	231f      	movs	r3, #31
 80048a0:	4013      	ands	r3, r2
 80048a2:	4908      	ldr	r1, [pc, #32]	; (80048c4 <__NVIC_DisableIRQ+0x40>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	0013      	movs	r3, r2
 80048aa:	2280      	movs	r2, #128	; 0x80
 80048ac:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048ae:	f3bf 8f4f 	dsb	sy
}
 80048b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80048b4:	f3bf 8f6f 	isb	sy
}
 80048b8:	46c0      	nop			; (mov r8, r8)
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b002      	add	sp, #8
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	e000e100 	.word	0xe000e100

080048c8 <__NVIC_SetPriority>:
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	0002      	movs	r2, r0
 80048d0:	6039      	str	r1, [r7, #0]
 80048d2:	1dfb      	adds	r3, r7, #7
 80048d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048d6:	1dfb      	adds	r3, r7, #7
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b7f      	cmp	r3, #127	; 0x7f
 80048dc:	d828      	bhi.n	8004930 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048de:	4a2f      	ldr	r2, [pc, #188]	; (800499c <__NVIC_SetPriority+0xd4>)
 80048e0:	1dfb      	adds	r3, r7, #7
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	33c0      	adds	r3, #192	; 0xc0
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	589b      	ldr	r3, [r3, r2]
 80048ee:	1dfa      	adds	r2, r7, #7
 80048f0:	7812      	ldrb	r2, [r2, #0]
 80048f2:	0011      	movs	r1, r2
 80048f4:	2203      	movs	r2, #3
 80048f6:	400a      	ands	r2, r1
 80048f8:	00d2      	lsls	r2, r2, #3
 80048fa:	21ff      	movs	r1, #255	; 0xff
 80048fc:	4091      	lsls	r1, r2
 80048fe:	000a      	movs	r2, r1
 8004900:	43d2      	mvns	r2, r2
 8004902:	401a      	ands	r2, r3
 8004904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	019b      	lsls	r3, r3, #6
 800490a:	22ff      	movs	r2, #255	; 0xff
 800490c:	401a      	ands	r2, r3
 800490e:	1dfb      	adds	r3, r7, #7
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	0018      	movs	r0, r3
 8004914:	2303      	movs	r3, #3
 8004916:	4003      	ands	r3, r0
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800491c:	481f      	ldr	r0, [pc, #124]	; (800499c <__NVIC_SetPriority+0xd4>)
 800491e:	1dfb      	adds	r3, r7, #7
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	b25b      	sxtb	r3, r3
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	430a      	orrs	r2, r1
 8004928:	33c0      	adds	r3, #192	; 0xc0
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	501a      	str	r2, [r3, r0]
}
 800492e:	e031      	b.n	8004994 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004930:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <__NVIC_SetPriority+0xd8>)
 8004932:	1dfb      	adds	r3, r7, #7
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	0019      	movs	r1, r3
 8004938:	230f      	movs	r3, #15
 800493a:	400b      	ands	r3, r1
 800493c:	3b08      	subs	r3, #8
 800493e:	089b      	lsrs	r3, r3, #2
 8004940:	3306      	adds	r3, #6
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	18d3      	adds	r3, r2, r3
 8004946:	3304      	adds	r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	1dfa      	adds	r2, r7, #7
 800494c:	7812      	ldrb	r2, [r2, #0]
 800494e:	0011      	movs	r1, r2
 8004950:	2203      	movs	r2, #3
 8004952:	400a      	ands	r2, r1
 8004954:	00d2      	lsls	r2, r2, #3
 8004956:	21ff      	movs	r1, #255	; 0xff
 8004958:	4091      	lsls	r1, r2
 800495a:	000a      	movs	r2, r1
 800495c:	43d2      	mvns	r2, r2
 800495e:	401a      	ands	r2, r3
 8004960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	019b      	lsls	r3, r3, #6
 8004966:	22ff      	movs	r2, #255	; 0xff
 8004968:	401a      	ands	r2, r3
 800496a:	1dfb      	adds	r3, r7, #7
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	0018      	movs	r0, r3
 8004970:	2303      	movs	r3, #3
 8004972:	4003      	ands	r3, r0
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004978:	4809      	ldr	r0, [pc, #36]	; (80049a0 <__NVIC_SetPriority+0xd8>)
 800497a:	1dfb      	adds	r3, r7, #7
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	001c      	movs	r4, r3
 8004980:	230f      	movs	r3, #15
 8004982:	4023      	ands	r3, r4
 8004984:	3b08      	subs	r3, #8
 8004986:	089b      	lsrs	r3, r3, #2
 8004988:	430a      	orrs	r2, r1
 800498a:	3306      	adds	r3, #6
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	18c3      	adds	r3, r0, r3
 8004990:	3304      	adds	r3, #4
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	46c0      	nop			; (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	b003      	add	sp, #12
 800499a:	bd90      	pop	{r4, r7, pc}
 800499c:	e000e100 	.word	0xe000e100
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <LL_DMAMUX_SetRequestID>:
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG((DMAMUX1_Channel0 + Channel)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4a09      	ldr	r2, [pc, #36]	; (80049dc <LL_DMAMUX_SetRequestID+0x38>)
 80049b6:	4694      	mov	ip, r2
 80049b8:	4463      	add	r3, ip
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	223f      	movs	r2, #63	; 0x3f
 80049be:	4393      	bics	r3, r2
 80049c0:	0019      	movs	r1, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4a05      	ldr	r2, [pc, #20]	; (80049dc <LL_DMAMUX_SetRequestID+0x38>)
 80049c8:	4694      	mov	ip, r2
 80049ca:	4463      	add	r3, ip
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]
}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	40020800 	.word	0x40020800

080049e0 <LL_DMA_EnableChannel>:
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80049ee:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <LL_DMA_EnableChannel+0x3c>)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	18d3      	adds	r3, r2, r3
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	001a      	movs	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	18d3      	adds	r3, r2, r3
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4907      	ldr	r1, [pc, #28]	; (8004a1c <LL_DMA_EnableChannel+0x3c>)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	18cb      	adds	r3, r1, r3
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	0019      	movs	r1, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	18cb      	adds	r3, r1, r3
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b004      	add	sp, #16
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	0800758c 	.word	0x0800758c

08004a20 <LL_DMA_DisableChannel>:
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004a2e:	4a0b      	ldr	r2, [pc, #44]	; (8004a5c <LL_DMA_DisableChannel+0x3c>)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	18d3      	adds	r3, r2, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	001a      	movs	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	18d3      	adds	r3, r2, r3
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4907      	ldr	r1, [pc, #28]	; (8004a5c <LL_DMA_DisableChannel+0x3c>)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	18cb      	adds	r3, r1, r3
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	0019      	movs	r1, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	18cb      	adds	r3, r1, r3
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	438a      	bics	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b004      	add	sp, #16
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	0800758c 	.word	0x0800758c

08004a60 <LL_DMA_SetDataTransferDirection>:
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8004a70:	4a0c      	ldr	r2, [pc, #48]	; (8004aa4 <LL_DMA_SetDataTransferDirection+0x44>)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	18d3      	adds	r3, r2, r3
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	001a      	movs	r2, r3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	18d3      	adds	r3, r2, r3
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <LL_DMA_SetDataTransferDirection+0x48>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	0019      	movs	r1, r3
 8004a86:	4a07      	ldr	r2, [pc, #28]	; (8004aa4 <LL_DMA_SetDataTransferDirection+0x44>)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	001a      	movs	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	18d3      	adds	r3, r2, r3
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b006      	add	sp, #24
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	0800758c 	.word	0x0800758c
 8004aa8:	ffffbfef 	.word	0xffffbfef

08004aac <LL_DMA_SetMode>:
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8004abc:	4a0c      	ldr	r2, [pc, #48]	; (8004af0 <LL_DMA_SetMode+0x44>)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	18d3      	adds	r3, r2, r3
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	001a      	movs	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2220      	movs	r2, #32
 8004ace:	4393      	bics	r3, r2
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <LL_DMA_SetMode+0x44>)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	18d3      	adds	r3, r2, r3
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	001a      	movs	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	18d3      	adds	r3, r2, r3
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b006      	add	sp, #24
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	0800758c 	.word	0x0800758c

08004af4 <LL_DMA_SetPeriphIncMode>:
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8004b04:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <LL_DMA_SetPeriphIncMode+0x44>)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	18d3      	adds	r3, r2, r3
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	001a      	movs	r2, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	18d3      	adds	r3, r2, r3
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2240      	movs	r2, #64	; 0x40
 8004b16:	4393      	bics	r3, r2
 8004b18:	0019      	movs	r1, r3
 8004b1a:	4a07      	ldr	r2, [pc, #28]	; (8004b38 <LL_DMA_SetPeriphIncMode+0x44>)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	18d3      	adds	r3, r2, r3
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	001a      	movs	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	18d3      	adds	r3, r2, r3
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b006      	add	sp, #24
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	0800758c 	.word	0x0800758c

08004b3c <LL_DMA_SetMemoryIncMode>:
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8004b4c:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <LL_DMA_SetMemoryIncMode+0x44>)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	18d3      	adds	r3, r2, r3
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	001a      	movs	r2, r3
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	18d3      	adds	r3, r2, r3
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	4393      	bics	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	4a07      	ldr	r2, [pc, #28]	; (8004b80 <LL_DMA_SetMemoryIncMode+0x44>)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	18d3      	adds	r3, r2, r3
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	001a      	movs	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	18d3      	adds	r3, r2, r3
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b006      	add	sp, #24
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	0800758c 	.word	0x0800758c

08004b84 <LL_DMA_SetPeriphSize>:
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8004b94:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <LL_DMA_SetPeriphSize+0x44>)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	18d3      	adds	r3, r2, r3
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <LL_DMA_SetPeriphSize+0x48>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <LL_DMA_SetPeriphSize+0x44>)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	18d3      	adds	r3, r2, r3
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	001a      	movs	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	18d3      	adds	r3, r2, r3
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b006      	add	sp, #24
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	0800758c 	.word	0x0800758c
 8004bcc:	fffffcff 	.word	0xfffffcff

08004bd0 <LL_DMA_SetMemorySize>:
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8004be0:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <LL_DMA_SetMemorySize+0x44>)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	18d3      	adds	r3, r2, r3
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	001a      	movs	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	18d3      	adds	r3, r2, r3
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <LL_DMA_SetMemorySize+0x48>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <LL_DMA_SetMemorySize+0x44>)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	18d3      	adds	r3, r2, r3
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	001a      	movs	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	18d3      	adds	r3, r2, r3
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b006      	add	sp, #24
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	0800758c 	.word	0x0800758c
 8004c18:	fffff3ff 	.word	0xfffff3ff

08004c1c <LL_DMA_SetChannelPriorityLevel>:
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8004c2c:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	18d3      	adds	r3, r2, r3
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	001a      	movs	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	18d3      	adds	r3, r2, r3
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	0019      	movs	r1, r3
 8004c42:	4a07      	ldr	r2, [pc, #28]	; (8004c60 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	18d3      	adds	r3, r2, r3
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	001a      	movs	r2, r3
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	18d3      	adds	r3, r2, r3
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]
}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b006      	add	sp, #24
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	0800758c 	.word	0x0800758c
 8004c64:	ffffcfff 	.word	0xffffcfff

08004c68 <LL_DMA_SetDataLength>:
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004c78:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <LL_DMA_SetDataLength+0x40>)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	18d3      	adds	r3, r2, r3
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	001a      	movs	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	18d3      	adds	r3, r2, r3
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	0419      	lsls	r1, r3, #16
 8004c8c:	4a06      	ldr	r2, [pc, #24]	; (8004ca8 <LL_DMA_SetDataLength+0x40>)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	18d3      	adds	r3, r2, r3
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	001a      	movs	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	18d3      	adds	r3, r2, r3
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	605a      	str	r2, [r3, #4]
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b006      	add	sp, #24
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	0800758c 	.word	0x0800758c

08004cac <LL_DMA_SetMemoryAddress>:
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8004cbc:	4a06      	ldr	r2, [pc, #24]	; (8004cd8 <LL_DMA_SetMemoryAddress+0x2c>)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	18d3      	adds	r3, r2, r3
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	18d3      	adds	r3, r2, r3
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	60da      	str	r2, [r3, #12]
}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b006      	add	sp, #24
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	0800758c 	.word	0x0800758c

08004cdc <LL_DMA_SetPeriphAddress>:
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8004cec:	4a06      	ldr	r2, [pc, #24]	; (8004d08 <LL_DMA_SetPeriphAddress+0x2c>)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	18d3      	adds	r3, r2, r3
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	18d3      	adds	r3, r2, r3
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	609a      	str	r2, [r3, #8]
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b006      	add	sp, #24
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	0800758c 	.word	0x0800758c

08004d0c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	0a9b      	lsrs	r3, r3, #10
 8004d1c:	4a0f      	ldr	r2, [pc, #60]	; (8004d5c <LL_DMA_SetPeriphRequest+0x50>)
 8004d1e:	405a      	eors	r2, r3
 8004d20:	0013      	movs	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	18d3      	adds	r3, r2, r3
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <LL_DMA_SetPeriphRequest+0x54>)
 8004d32:	4694      	mov	ip, r2
 8004d34:	4463      	add	r3, ip
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	223f      	movs	r2, #63	; 0x3f
 8004d3a:	4393      	bics	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	18d3      	adds	r3, r2, r3
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a06      	ldr	r2, [pc, #24]	; (8004d60 <LL_DMA_SetPeriphRequest+0x54>)
 8004d48:	4694      	mov	ip, r2
 8004d4a:	4463      	add	r3, ip
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b006      	add	sp, #24
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	00100080 	.word	0x00100080
 8004d60:	40020800 	.word	0x40020800

08004d64 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2202      	movs	r2, #2
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d101      	bne.n	8004d7c <LL_DMA_IsActiveFlag_TC1+0x18>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <LL_DMA_IsActiveFlag_TC1+0x1a>
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	0018      	movs	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b002      	add	sp, #8
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	605a      	str	r2, [r3, #4]
}
 8004d94:	46c0      	nop			; (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8004daa:	4a0b      	ldr	r2, [pc, #44]	; (8004dd8 <LL_DMA_EnableIT_TC+0x3c>)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	18d3      	adds	r3, r2, r3
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	001a      	movs	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	18d3      	adds	r3, r2, r3
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4907      	ldr	r1, [pc, #28]	; (8004dd8 <LL_DMA_EnableIT_TC+0x3c>)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	18cb      	adds	r3, r1, r3
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	18cb      	adds	r3, r1, r3
 8004dc8:	2102      	movs	r1, #2
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b004      	add	sp, #16
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	0800758c 	.word	0x0800758c

08004ddc <LL_AHB1_GRP1_EnableClock>:
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8004de4:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8004de6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4013      	ands	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b004      	add	sp, #16
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000

08004e08 <LL_APB1_GRP1_EnableClock>:
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <LL_APB1_GRP1_EnableClock+0x28>)
 8004e12:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <LL_APB1_GRP1_EnableClock+0x28>)
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <LL_APB1_GRP1_EnableClock+0x28>)
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4013      	ands	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b004      	add	sp, #16
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000

08004e34 <LL_IOP_GRP1_EnableClock>:
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8004e3c:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <LL_IOP_GRP1_EnableClock+0x28>)
 8004e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <LL_IOP_GRP1_EnableClock+0x28>)
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <LL_IOP_GRP1_EnableClock+0x28>)
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b004      	add	sp, #16
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40021000 	.word	0x40021000

08004e60 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	601a      	str	r2, [r3, #0]
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	4393      	bics	r3, r2
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b002      	add	sp, #8
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2270      	movs	r2, #112	; 0x70
 8004eaa:	4393      	bics	r3, r2
 8004eac:	001a      	movs	r2, r3
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b002      	add	sp, #8
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b002      	add	sp, #8
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}

08004eee <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	621a      	str	r2, [r3, #32]
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d02c      	beq.n	8004f78 <LL_TIM_OC_SetMode+0x6c>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d027      	beq.n	8004f74 <LL_TIM_OC_SetMode+0x68>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d022      	beq.n	8004f70 <LL_TIM_OC_SetMode+0x64>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d01d      	beq.n	8004f6c <LL_TIM_OC_SetMode+0x60>
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d016      	beq.n	8004f68 <LL_TIM_OC_SetMode+0x5c>
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d00f      	beq.n	8004f64 <LL_TIM_OC_SetMode+0x58>
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	015b      	lsls	r3, r3, #5
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d008      	beq.n	8004f60 <LL_TIM_OC_SetMode+0x54>
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	025b      	lsls	r3, r3, #9
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d101      	bne.n	8004f5c <LL_TIM_OC_SetMode+0x50>
 8004f58:	2307      	movs	r3, #7
 8004f5a:	e00e      	b.n	8004f7a <LL_TIM_OC_SetMode+0x6e>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	e00c      	b.n	8004f7a <LL_TIM_OC_SetMode+0x6e>
 8004f60:	2306      	movs	r3, #6
 8004f62:	e00a      	b.n	8004f7a <LL_TIM_OC_SetMode+0x6e>
 8004f64:	2305      	movs	r3, #5
 8004f66:	e008      	b.n	8004f7a <LL_TIM_OC_SetMode+0x6e>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	e006      	b.n	8004f7a <LL_TIM_OC_SetMode+0x6e>
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e004      	b.n	8004f7a <LL_TIM_OC_SetMode+0x6e>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e002      	b.n	8004f7a <LL_TIM_OC_SetMode+0x6e>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <LL_TIM_OC_SetMode+0x6e>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2017      	movs	r0, #23
 8004f7c:	183a      	adds	r2, r7, r0
 8004f7e:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3318      	adds	r3, #24
 8004f84:	0019      	movs	r1, r3
 8004f86:	183b      	adds	r3, r7, r0
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	4a0e      	ldr	r2, [pc, #56]	; (8004fc4 <LL_TIM_OC_SetMode+0xb8>)
 8004f8c:	5cd3      	ldrb	r3, [r2, r3]
 8004f8e:	18cb      	adds	r3, r1, r3
 8004f90:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	183a      	adds	r2, r7, r0
 8004f98:	7812      	ldrb	r2, [r2, #0]
 8004f9a:	490b      	ldr	r1, [pc, #44]	; (8004fc8 <LL_TIM_OC_SetMode+0xbc>)
 8004f9c:	5c8a      	ldrb	r2, [r1, r2]
 8004f9e:	0011      	movs	r1, r2
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <LL_TIM_OC_SetMode+0xc0>)
 8004fa2:	408a      	lsls	r2, r1
 8004fa4:	43d2      	mvns	r2, r2
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	183b      	adds	r3, r7, r0
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	4906      	ldr	r1, [pc, #24]	; (8004fc8 <LL_TIM_OC_SetMode+0xbc>)
 8004fae:	5ccb      	ldrb	r3, [r1, r3]
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	408b      	lsls	r3, r1
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	601a      	str	r2, [r3, #0]
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b006      	add	sp, #24
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	08007594 	.word	0x08007594
 8004fc8:	080075a0 	.word	0x080075a0
 8004fcc:	00010073 	.word	0x00010073

08004fd0 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d02c      	beq.n	800503c <LL_TIM_OC_SetPolarity+0x6c>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d027      	beq.n	8005038 <LL_TIM_OC_SetPolarity+0x68>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d022      	beq.n	8005034 <LL_TIM_OC_SetPolarity+0x64>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d01d      	beq.n	8005030 <LL_TIM_OC_SetPolarity+0x60>
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d016      	beq.n	800502c <LL_TIM_OC_SetPolarity+0x5c>
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	429a      	cmp	r2, r3
 8005006:	d00f      	beq.n	8005028 <LL_TIM_OC_SetPolarity+0x58>
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	015b      	lsls	r3, r3, #5
 800500e:	429a      	cmp	r2, r3
 8005010:	d008      	beq.n	8005024 <LL_TIM_OC_SetPolarity+0x54>
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	025b      	lsls	r3, r3, #9
 8005018:	429a      	cmp	r2, r3
 800501a:	d101      	bne.n	8005020 <LL_TIM_OC_SetPolarity+0x50>
 800501c:	2307      	movs	r3, #7
 800501e:	e00e      	b.n	800503e <LL_TIM_OC_SetPolarity+0x6e>
 8005020:	2308      	movs	r3, #8
 8005022:	e00c      	b.n	800503e <LL_TIM_OC_SetPolarity+0x6e>
 8005024:	2306      	movs	r3, #6
 8005026:	e00a      	b.n	800503e <LL_TIM_OC_SetPolarity+0x6e>
 8005028:	2305      	movs	r3, #5
 800502a:	e008      	b.n	800503e <LL_TIM_OC_SetPolarity+0x6e>
 800502c:	2304      	movs	r3, #4
 800502e:	e006      	b.n	800503e <LL_TIM_OC_SetPolarity+0x6e>
 8005030:	2303      	movs	r3, #3
 8005032:	e004      	b.n	800503e <LL_TIM_OC_SetPolarity+0x6e>
 8005034:	2302      	movs	r3, #2
 8005036:	e002      	b.n	800503e <LL_TIM_OC_SetPolarity+0x6e>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <LL_TIM_OC_SetPolarity+0x6e>
 800503c:	2300      	movs	r3, #0
 800503e:	2017      	movs	r0, #23
 8005040:	183a      	adds	r2, r7, r0
 8005042:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	183a      	adds	r2, r7, r0
 800504a:	7812      	ldrb	r2, [r2, #0]
 800504c:	490a      	ldr	r1, [pc, #40]	; (8005078 <LL_TIM_OC_SetPolarity+0xa8>)
 800504e:	5c8a      	ldrb	r2, [r1, r2]
 8005050:	0011      	movs	r1, r2
 8005052:	2202      	movs	r2, #2
 8005054:	408a      	lsls	r2, r1
 8005056:	43d2      	mvns	r2, r2
 8005058:	401a      	ands	r2, r3
 800505a:	183b      	adds	r3, r7, r0
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	4906      	ldr	r1, [pc, #24]	; (8005078 <LL_TIM_OC_SetPolarity+0xa8>)
 8005060:	5ccb      	ldrb	r3, [r1, r3]
 8005062:	0019      	movs	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	408b      	lsls	r3, r1
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	46bd      	mov	sp, r7
 8005072:	b006      	add	sp, #24
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	080075ac 	.word	0x080075ac

0800507c <LL_TIM_OC_SetIdleState>:
  *         @arg @ref LL_TIM_OCIDLESTATE_LOW
  *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d02c      	beq.n	80050e8 <LL_TIM_OC_SetIdleState+0x6c>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b04      	cmp	r3, #4
 8005092:	d027      	beq.n	80050e4 <LL_TIM_OC_SetIdleState+0x68>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b10      	cmp	r3, #16
 8005098:	d022      	beq.n	80050e0 <LL_TIM_OC_SetIdleState+0x64>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d01d      	beq.n	80050dc <LL_TIM_OC_SetIdleState+0x60>
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	2380      	movs	r3, #128	; 0x80
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d016      	beq.n	80050d8 <LL_TIM_OC_SetIdleState+0x5c>
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d00f      	beq.n	80050d4 <LL_TIM_OC_SetIdleState+0x58>
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	015b      	lsls	r3, r3, #5
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d008      	beq.n	80050d0 <LL_TIM_OC_SetIdleState+0x54>
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	025b      	lsls	r3, r3, #9
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d101      	bne.n	80050cc <LL_TIM_OC_SetIdleState+0x50>
 80050c8:	2307      	movs	r3, #7
 80050ca:	e00e      	b.n	80050ea <LL_TIM_OC_SetIdleState+0x6e>
 80050cc:	2308      	movs	r3, #8
 80050ce:	e00c      	b.n	80050ea <LL_TIM_OC_SetIdleState+0x6e>
 80050d0:	2306      	movs	r3, #6
 80050d2:	e00a      	b.n	80050ea <LL_TIM_OC_SetIdleState+0x6e>
 80050d4:	2305      	movs	r3, #5
 80050d6:	e008      	b.n	80050ea <LL_TIM_OC_SetIdleState+0x6e>
 80050d8:	2304      	movs	r3, #4
 80050da:	e006      	b.n	80050ea <LL_TIM_OC_SetIdleState+0x6e>
 80050dc:	2303      	movs	r3, #3
 80050de:	e004      	b.n	80050ea <LL_TIM_OC_SetIdleState+0x6e>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e002      	b.n	80050ea <LL_TIM_OC_SetIdleState+0x6e>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <LL_TIM_OC_SetIdleState+0x6e>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2017      	movs	r0, #23
 80050ec:	183a      	adds	r2, r7, r0
 80050ee:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iChannel]);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	183a      	adds	r2, r7, r0
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	490a      	ldr	r1, [pc, #40]	; (8005124 <LL_TIM_OC_SetIdleState+0xa8>)
 80050fa:	5c8a      	ldrb	r2, [r1, r2]
 80050fc:	0011      	movs	r1, r2
 80050fe:	2280      	movs	r2, #128	; 0x80
 8005100:	0052      	lsls	r2, r2, #1
 8005102:	408a      	lsls	r2, r1
 8005104:	43d2      	mvns	r2, r2
 8005106:	401a      	ands	r2, r3
 8005108:	183b      	adds	r3, r7, r0
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	4905      	ldr	r1, [pc, #20]	; (8005124 <LL_TIM_OC_SetIdleState+0xa8>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	0019      	movs	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	408b      	lsls	r3, r1
 8005116:	431a      	orrs	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	605a      	str	r2, [r3, #4]
}
 800511c:	46c0      	nop			; (mov r8, r8)
 800511e:	46bd      	mov	sp, r7
 8005120:	b006      	add	sp, #24
 8005122:	bd80      	pop	{r7, pc}
 8005124:	080075b8 	.word	0x080075b8

08005128 <LL_TIM_EnableDMAReq_CC2>:
  * @rmtoll DIER         CC2DE         LL_TIM_EnableDMAReq_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC2(TIM_TypeDef *TIMx)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2DE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2280      	movs	r2, #128	; 0x80
 8005136:	00d2      	lsls	r2, r2, #3
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60da      	str	r2, [r3, #12]
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <DMA1_Channel1_IRQHandler>:
static uint8_t isDmaTransferBusy = 0;



void DMA1_Channel1_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	if (LL_DMA_IsActiveFlag_TC1(DMA1)) {
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <DMA1_Channel1_IRQHandler+0x2c>)
 800514e:	0018      	movs	r0, r3
 8005150:	f7ff fe08 	bl	8004d64 <LL_DMA_IsActiveFlag_TC1>
 8005154:	1e03      	subs	r3, r0, #0
 8005156:	d00a      	beq.n	800516e <DMA1_Channel1_IRQHandler+0x26>
		LL_DMA_ClearFlag_TC1(DMA1);
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <DMA1_Channel1_IRQHandler+0x2c>)
 800515a:	0018      	movs	r0, r3
 800515c:	f7ff fe13 	bl	8004d86 <LL_DMA_ClearFlag_TC1>
		LL_TIM_DisableCounter(TIM3);
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <DMA1_Channel1_IRQHandler+0x30>)
 8005162:	0018      	movs	r0, r3
 8005164:	f7ff fe8a 	bl	8004e7c <LL_TIM_DisableCounter>
		isDmaTransferBusy = 0;
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <DMA1_Channel1_IRQHandler+0x34>)
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
	}
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40020000 	.word	0x40020000
 8005178:	40000400 	.word	0x40000400
 800517c:	200007aa 	.word	0x200007aa

08005180 <initLight>:



void initLight(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005186:	003b      	movs	r3, r7
 8005188:	0018      	movs	r0, r3
 800518a:	2318      	movs	r3, #24
 800518c:	001a      	movs	r2, r3
 800518e:	2100      	movs	r1, #0
 8005190:	f000 febf 	bl	8005f12 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8005194:	2002      	movs	r0, #2
 8005196:	f7ff fe37 	bl	8004e08 <LL_APB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800519a:	2001      	movs	r0, #1
 800519c:	f7ff fe1e 	bl	8004ddc <LL_AHB1_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80051a0:	2001      	movs	r0, #1
 80051a2:	f7ff fe47 	bl	8004e34 <LL_IOP_GRP1_EnableClock>

	/* TIM3_CH2 Init */

	LL_TIM_SetCounterMode(TIM3, LL_TIM_COUNTERMODE_UP);
 80051a6:	4b4d      	ldr	r3, [pc, #308]	; (80052dc <initLight+0x15c>)
 80051a8:	2100      	movs	r1, #0
 80051aa:	0018      	movs	r0, r3
 80051ac:	f7ff fe75 	bl	8004e9a <LL_TIM_SetCounterMode>
	LL_TIM_SetPrescaler(TIM3, 0);
 80051b0:	4b4a      	ldr	r3, [pc, #296]	; (80052dc <initLight+0x15c>)
 80051b2:	2100      	movs	r1, #0
 80051b4:	0018      	movs	r0, r3
 80051b6:	f7ff fe82 	bl	8004ebe <LL_TIM_SetPrescaler>
	LL_TIM_SetAutoReload(TIM3, LED_TIM_LEN);
 80051ba:	4b48      	ldr	r3, [pc, #288]	; (80052dc <initLight+0x15c>)
 80051bc:	2114      	movs	r1, #20
 80051be:	0018      	movs	r0, r3
 80051c0:	f7ff fe89 	bl	8004ed6 <LL_TIM_SetAutoReload>
	LL_TIM_EnableDMAReq_CC2(TIM3);
 80051c4:	4b45      	ldr	r3, [pc, #276]	; (80052dc <initLight+0x15c>)
 80051c6:	0018      	movs	r0, r3
 80051c8:	f7ff ffae 	bl	8005128 <LL_TIM_EnableDMAReq_CC2>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 80051cc:	4b43      	ldr	r3, [pc, #268]	; (80052dc <initLight+0x15c>)
 80051ce:	2110      	movs	r1, #16
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7ff fe8c 	bl	8004eee <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetMode(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 80051d6:	4b41      	ldr	r3, [pc, #260]	; (80052dc <initLight+0x15c>)
 80051d8:	2260      	movs	r2, #96	; 0x60
 80051da:	2110      	movs	r1, #16
 80051dc:	0018      	movs	r0, r3
 80051de:	f7ff fe95 	bl	8004f0c <LL_TIM_OC_SetMode>
	LL_TIM_OC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 80051e2:	4b3e      	ldr	r3, [pc, #248]	; (80052dc <initLight+0x15c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	2110      	movs	r1, #16
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7ff fef1 	bl	8004fd0 <LL_TIM_OC_SetPolarity>
	LL_TIM_OC_SetIdleState(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_OCIDLESTATE_LOW);
 80051ee:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <initLight+0x15c>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	2110      	movs	r1, #16
 80051f4:	0018      	movs	r0, r3
 80051f6:	f7ff ff41 	bl	800507c <LL_TIM_OC_SetIdleState>

	/* TIM3 DMA Init */
	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_TIM3_CH2);
 80051fa:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <initLight+0x160>)
 80051fc:	2221      	movs	r2, #33	; 0x21
 80051fe:	2100      	movs	r1, #0
 8005200:	0018      	movs	r0, r3
 8005202:	f7ff fd83 	bl	8004d0c <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8005206:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <initLight+0x160>)
 8005208:	2210      	movs	r2, #16
 800520a:	2100      	movs	r1, #0
 800520c:	0018      	movs	r0, r3
 800520e:	f7ff fc27 	bl	8004a60 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_VERYHIGH);
 8005212:	23c0      	movs	r3, #192	; 0xc0
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	4832      	ldr	r0, [pc, #200]	; (80052e0 <initLight+0x160>)
 8005218:	001a      	movs	r2, r3
 800521a:	2100      	movs	r1, #0
 800521c:	f7ff fcfe 	bl	8004c1c <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8005220:	4b2f      	ldr	r3, [pc, #188]	; (80052e0 <initLight+0x160>)
 8005222:	2200      	movs	r2, #0
 8005224:	2100      	movs	r1, #0
 8005226:	0018      	movs	r0, r3
 8005228:	f7ff fc40 	bl	8004aac <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800522c:	4b2c      	ldr	r3, [pc, #176]	; (80052e0 <initLight+0x160>)
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	0018      	movs	r0, r3
 8005234:	f7ff fc5e 	bl	8004af4 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8005238:	4b29      	ldr	r3, [pc, #164]	; (80052e0 <initLight+0x160>)
 800523a:	2280      	movs	r2, #128	; 0x80
 800523c:	2100      	movs	r1, #0
 800523e:	0018      	movs	r0, r3
 8005240:	f7ff fc7c 	bl	8004b3c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_WORD);
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4825      	ldr	r0, [pc, #148]	; (80052e0 <initLight+0x160>)
 800524a:	001a      	movs	r2, r3
 800524c:	2100      	movs	r1, #0
 800524e:	f7ff fc99 	bl	8004b84 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8005252:	4b23      	ldr	r3, [pc, #140]	; (80052e0 <initLight+0x160>)
 8005254:	2200      	movs	r2, #0
 8005256:	2100      	movs	r1, #0
 8005258:	0018      	movs	r0, r3
 800525a:	f7ff fcb9 	bl	8004bd0 <LL_DMA_SetMemorySize>
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&TIM3->CCR2);
 800525e:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <initLight+0x164>)
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <initLight+0x160>)
 8005262:	2100      	movs	r1, #0
 8005264:	0018      	movs	r0, r3
 8005266:	f7ff fd39 	bl	8004cdc <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&ws2812bTimData[0]);
 800526a:	4b1f      	ldr	r3, [pc, #124]	; (80052e8 <initLight+0x168>)
 800526c:	481c      	ldr	r0, [pc, #112]	; (80052e0 <initLight+0x160>)
 800526e:	001a      	movs	r2, r3
 8005270:	2100      	movs	r1, #0
 8005272:	f7ff fd1b 	bl	8004cac <LL_DMA_SetMemoryAddress>
	LL_DMAMUX_SetRequestID(DMAMUX1, LL_DMAMUX_CHANNEL_0, LL_DMAMUX_REQ_TIM3_CH2);
 8005276:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <initLight+0x16c>)
 8005278:	2221      	movs	r2, #33	; 0x21
 800527a:	2100      	movs	r1, #0
 800527c:	0018      	movs	r0, r3
 800527e:	f7ff fb91 	bl	80049a4 <LL_DMAMUX_SetRequestID>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8005282:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <initLight+0x160>)
 8005284:	2100      	movs	r1, #0
 8005286:	0018      	movs	r0, r3
 8005288:	f7ff fd88 	bl	8004d9c <LL_DMA_EnableIT_TC>
    NVIC_DisableIRQ(DMA1_Channel1_IRQn);
 800528c:	2009      	movs	r0, #9
 800528e:	f7ff faf9 	bl	8004884 <__NVIC_DisableIRQ>
    NVIC_SetPriority(DMA1_Channel1_IRQn, 2);
 8005292:	2102      	movs	r1, #2
 8005294:	2009      	movs	r0, #9
 8005296:	f7ff fb17 	bl	80048c8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800529a:	2009      	movs	r0, #9
 800529c:	f7ff fad8 	bl	8004850 <__NVIC_EnableIRQ>

	/**TIM3 GPIO Configuration
	PA7   ------> TIM3_CH2
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80052a0:	003b      	movs	r3, r7
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80052a6:	003b      	movs	r3, r7
 80052a8:	2202      	movs	r2, #2
 80052aa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80052ac:	003b      	movs	r3, r7
 80052ae:	2203      	movs	r2, #3
 80052b0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80052b2:	003b      	movs	r3, r7
 80052b4:	2201      	movs	r2, #1
 80052b6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80052b8:	003b      	movs	r3, r7
 80052ba:	2200      	movs	r2, #0
 80052bc:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80052be:	003b      	movs	r3, r7
 80052c0:	2201      	movs	r2, #1
 80052c2:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052c4:	003a      	movs	r2, r7
 80052c6:	23a0      	movs	r3, #160	; 0xa0
 80052c8:	05db      	lsls	r3, r3, #23
 80052ca:	0011      	movs	r1, r2
 80052cc:	0018      	movs	r0, r3
 80052ce:	f000 fa92 	bl	80057f6 <LL_GPIO_Init>
}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b006      	add	sp, #24
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40020000 	.word	0x40020000
 80052e4:	40000438 	.word	0x40000438
 80052e8:	20000628 	.word	0x20000628
 80052ec:	40020800 	.word	0x40020800

080052f0 <setLight>:



void setLight(Led ledArray[])
{
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	uint8_t bitMask [] = {128, 64, 32, 16, 8, 4, 2, 1};
 80052f8:	2308      	movs	r3, #8
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	4a64      	ldr	r2, [pc, #400]	; (8005490 <setLight+0x1a0>)
 80052fe:	ca03      	ldmia	r2!, {r0, r1}
 8005300:	c303      	stmia	r3!, {r0, r1}

	while(isDmaTransferBusy);
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	4b63      	ldr	r3, [pc, #396]	; (8005494 <setLight+0x1a4>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1fb      	bne.n	8005304 <setLight+0x14>
	isDmaTransferBusy = 1;
 800530c:	4b61      	ldr	r3, [pc, #388]	; (8005494 <setLight+0x1a4>)
 800530e:	2201      	movs	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]

	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 8005312:	4b61      	ldr	r3, [pc, #388]	; (8005498 <setLight+0x1a8>)
 8005314:	2100      	movs	r1, #0
 8005316:	0018      	movs	r0, r3
 8005318:	f7ff fb82 	bl	8004a20 <LL_DMA_DisableChannel>
	for (uint8_t i = 0; i < LED_SIZE; i++) {
 800531c:	2317      	movs	r3, #23
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e094      	b.n	8005450 <setLight+0x160>
		for (uint8_t x = 0; x <  BITS_PER_COLOR; x++) {
 8005326:	2316      	movs	r3, #22
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e083      	b.n	8005438 <setLight+0x148>
			uint16_t indG = BITS_PER_LED * i + x;
 8005330:	2017      	movs	r0, #23
 8005332:	183b      	adds	r3, r7, r0
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	2218      	movs	r2, #24
 800533a:	4353      	muls	r3, r2
 800533c:	b299      	uxth	r1, r3
 800533e:	2416      	movs	r4, #22
 8005340:	193b      	adds	r3, r7, r4
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	b29a      	uxth	r2, r3
 8005346:	2314      	movs	r3, #20
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	188a      	adds	r2, r1, r2
 800534c:	801a      	strh	r2, [r3, #0]
			uint16_t indR = BITS_PER_LED * i + x + BITS_PER_COLOR;
 800534e:	0001      	movs	r1, r0
 8005350:	187b      	adds	r3, r7, r1
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	2218      	movs	r2, #24
 8005358:	4353      	muls	r3, r2
 800535a:	b29a      	uxth	r2, r3
 800535c:	0020      	movs	r0, r4
 800535e:	183b      	adds	r3, r7, r0
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	18d3      	adds	r3, r2, r3
 8005366:	b29a      	uxth	r2, r3
 8005368:	2312      	movs	r3, #18
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	3208      	adds	r2, #8
 800536e:	801a      	strh	r2, [r3, #0]
			uint16_t indB = BITS_PER_LED * i + x + BITS_PER_COLOR * 2;
 8005370:	187b      	adds	r3, r7, r1
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	2218      	movs	r2, #24
 8005378:	4353      	muls	r3, r2
 800537a:	b29a      	uxth	r2, r3
 800537c:	183b      	adds	r3, r7, r0
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	18d3      	adds	r3, r2, r3
 8005384:	b29a      	uxth	r2, r3
 8005386:	2310      	movs	r3, #16
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	3210      	adds	r2, #16
 800538c:	801a      	strh	r2, [r3, #0]

			ws2812bTimData[indG] = ledArray[i].g & bitMask[x] ? LED_TIM_LONG : LED_TIM_SHORT;
 800538e:	187b      	adds	r3, r7, r1
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	0013      	movs	r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	189b      	adds	r3, r3, r2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	18d3      	adds	r3, r2, r3
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	183a      	adds	r2, r7, r0
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	2108      	movs	r1, #8
 80053a4:	1879      	adds	r1, r7, r1
 80053a6:	5c8a      	ldrb	r2, [r1, r2]
 80053a8:	4013      	ands	r3, r2
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <setLight+0xc4>
 80053b0:	210c      	movs	r1, #12
 80053b2:	e000      	b.n	80053b6 <setLight+0xc6>
 80053b4:	2106      	movs	r1, #6
 80053b6:	2314      	movs	r3, #20
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	4a37      	ldr	r2, [pc, #220]	; (800549c <setLight+0x1ac>)
 80053be:	54d1      	strb	r1, [r2, r3]
			ws2812bTimData[indR] = ledArray[i].r & bitMask[x] ? LED_TIM_LONG : LED_TIM_SHORT;
 80053c0:	2317      	movs	r3, #23
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	0013      	movs	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	18d3      	adds	r3, r2, r3
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2216      	movs	r2, #22
 80053d4:	18ba      	adds	r2, r7, r2
 80053d6:	7812      	ldrb	r2, [r2, #0]
 80053d8:	2108      	movs	r1, #8
 80053da:	1879      	adds	r1, r7, r1
 80053dc:	5c8a      	ldrb	r2, [r1, r2]
 80053de:	4013      	ands	r3, r2
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <setLight+0xfa>
 80053e6:	210c      	movs	r1, #12
 80053e8:	e000      	b.n	80053ec <setLight+0xfc>
 80053ea:	2106      	movs	r1, #6
 80053ec:	2312      	movs	r3, #18
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	4a2a      	ldr	r2, [pc, #168]	; (800549c <setLight+0x1ac>)
 80053f4:	54d1      	strb	r1, [r2, r3]
			ws2812bTimData[indB] = ledArray[i].b & bitMask[x] ? LED_TIM_LONG : LED_TIM_SHORT;
 80053f6:	2317      	movs	r3, #23
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	781a      	ldrb	r2, [r3, #0]
 80053fc:	0013      	movs	r3, r2
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	189b      	adds	r3, r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	18d3      	adds	r3, r2, r3
 8005406:	789b      	ldrb	r3, [r3, #2]
 8005408:	2216      	movs	r2, #22
 800540a:	18ba      	adds	r2, r7, r2
 800540c:	7812      	ldrb	r2, [r2, #0]
 800540e:	2108      	movs	r1, #8
 8005410:	1879      	adds	r1, r7, r1
 8005412:	5c8a      	ldrb	r2, [r1, r2]
 8005414:	4013      	ands	r3, r2
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <setLight+0x130>
 800541c:	210c      	movs	r1, #12
 800541e:	e000      	b.n	8005422 <setLight+0x132>
 8005420:	2106      	movs	r1, #6
 8005422:	2310      	movs	r3, #16
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	4a1c      	ldr	r2, [pc, #112]	; (800549c <setLight+0x1ac>)
 800542a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t x = 0; x <  BITS_PER_COLOR; x++) {
 800542c:	2116      	movs	r1, #22
 800542e:	187b      	adds	r3, r7, r1
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	187b      	adds	r3, r7, r1
 8005434:	3201      	adds	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	2316      	movs	r3, #22
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b07      	cmp	r3, #7
 8005440:	d800      	bhi.n	8005444 <setLight+0x154>
 8005442:	e775      	b.n	8005330 <setLight+0x40>
	for (uint8_t i = 0; i < LED_SIZE; i++) {
 8005444:	2117      	movs	r1, #23
 8005446:	187b      	adds	r3, r7, r1
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	187b      	adds	r3, r7, r1
 800544c:	3201      	adds	r2, #1
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	2317      	movs	r3, #23
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b0f      	cmp	r3, #15
 8005458:	d800      	bhi.n	800545c <setLight+0x16c>
 800545a:	e764      	b.n	8005326 <setLight+0x36>
		}
	}
	LL_TIM_EnableCounter(TIM3);
 800545c:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <setLight+0x1b0>)
 800545e:	0018      	movs	r0, r3
 8005460:	f7ff fcfe 	bl	8004e60 <LL_TIM_EnableCounter>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&ws2812bTimData[0]);
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <setLight+0x1ac>)
 8005466:	480c      	ldr	r0, [pc, #48]	; (8005498 <setLight+0x1a8>)
 8005468:	001a      	movs	r2, r3
 800546a:	2100      	movs	r1, #0
 800546c:	f7ff fc1e 	bl	8004cac <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, SIZE_TIM_DATA+2);
 8005470:	23c1      	movs	r3, #193	; 0xc1
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4808      	ldr	r0, [pc, #32]	; (8005498 <setLight+0x1a8>)
 8005476:	001a      	movs	r2, r3
 8005478:	2100      	movs	r1, #0
 800547a:	f7ff fbf5 	bl	8004c68 <LL_DMA_SetDataLength>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <setLight+0x1a8>)
 8005480:	2100      	movs	r1, #0
 8005482:	0018      	movs	r0, r3
 8005484:	f7ff faac 	bl	80049e0 <LL_DMA_EnableChannel>
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b007      	add	sp, #28
 800548e:	bd90      	pop	{r4, r7, pc}
 8005490:	08007428 	.word	0x08007428
 8005494:	200007aa 	.word	0x200007aa
 8005498:	40020000 	.word	0x40020000
 800549c:	20000628 	.word	0x20000628
 80054a0:	40000400 	.word	0x40000400

080054a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80054a4:	480d      	ldr	r0, [pc, #52]	; (80054dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80054a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80054a8:	f7ff f888 	bl	80045bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054ac:	480c      	ldr	r0, [pc, #48]	; (80054e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80054ae:	490d      	ldr	r1, [pc, #52]	; (80054e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80054b0:	4a0d      	ldr	r2, [pc, #52]	; (80054e8 <LoopForever+0xe>)
  movs r3, #0
 80054b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054b4:	e002      	b.n	80054bc <LoopCopyDataInit>

080054b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054ba:	3304      	adds	r3, #4

080054bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054c0:	d3f9      	bcc.n	80054b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054c2:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80054c4:	4c0a      	ldr	r4, [pc, #40]	; (80054f0 <LoopForever+0x16>)
  movs r3, #0
 80054c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054c8:	e001      	b.n	80054ce <LoopFillZerobss>

080054ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054cc:	3204      	adds	r2, #4

080054ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054d0:	d3fb      	bcc.n	80054ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80054d2:	f000 fcf1 	bl	8005eb8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80054d6:	f7fe fedf 	bl	8004298 <main>

080054da <LoopForever>:

LoopForever:
  b LoopForever
 80054da:	e7fe      	b.n	80054da <LoopForever>
  ldr   r0, =_estack
 80054dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80054e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054e4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80054e8:	08007744 	.word	0x08007744
  ldr r2, =_sbss
 80054ec:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80054f0:	200007bc 	.word	0x200007bc

080054f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80054f4:	e7fe      	b.n	80054f4 <ADC1_IRQHandler>

080054f6 <LL_ADC_REG_GetSequencerConfigurable>:
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	039b      	lsls	r3, r3, #14
 8005506:	4013      	ands	r3, r2
}
 8005508:	0018      	movs	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	b002      	add	sp, #8
 800550e:	bd80      	pop	{r7, pc}

08005510 <LL_ADC_REG_SetSequencerLength>:
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	46bd      	mov	sp, r7
 800552a:	b002      	add	sp, #8
 800552c:	bd80      	pop	{r7, pc}

0800552e <LL_ADC_IsEnabled>:
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2201      	movs	r2, #1
 800553c:	4013      	ands	r3, r2
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <LL_ADC_IsEnabled+0x18>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <LL_ADC_IsEnabled+0x1a>
 8005546:	2300      	movs	r3, #0
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b002      	add	sp, #8
 800554e:	bd80      	pop	{r7, pc}

08005550 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *pADC_InitStruct)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800555a:	230f      	movs	r3, #15
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	0018      	movs	r0, r3
 8005566:	f7ff ffe2 	bl	800552e <LL_ADC_IsEnabled>
 800556a:	1e03      	subs	r3, r0, #0
 800556c:	d118      	bne.n	80055a0 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	4a11      	ldr	r2, [pc, #68]	; (80055b8 <LL_ADC_Init+0x68>)
 8005574:	401a      	ands	r2, r3
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	4319      	orrs	r1, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	430b      	orrs	r3, r1
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]
               pADC_InitStruct->Resolution
               | pADC_InitStruct->DataAlignment
               | pADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	089a      	lsrs	r2, r3, #2
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]
 800559e:	e003      	b.n	80055a8 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80055a0:	230f      	movs	r3, #15
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	2201      	movs	r2, #1
 80055a6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80055a8:	230f      	movs	r3, #15
 80055aa:	18fb      	adds	r3, r7, r3
 80055ac:	781b      	ldrb	r3, [r3, #0]
}
 80055ae:	0018      	movs	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b004      	add	sp, #16
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	ffff3fc7 	.word	0xffff3fc7

080055bc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80055c6:	230f      	movs	r3, #15
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(pADC_RegInitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(pADC_RegInitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7ff ff90 	bl	80054f6 <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(pADC_RegInitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0018      	movs	r0, r3
 80055da:	f7ff ff8c 	bl	80054f6 <LL_ADC_REG_GetSequencerConfigurable>
                 || (pADC_RegInitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	0018      	movs	r0, r3
 80055e2:	f7ff ffa4 	bl	800552e <LL_ADC_IsEnabled>
 80055e6:	1e03      	subs	r3, r0, #0
 80055e8:	d13f      	bne.n	800566a <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	0018      	movs	r0, r3
 80055ee:	f7ff ff82 	bl	80054f6 <LL_ADC_REG_GetSequencerConfigurable>
 80055f2:	1e03      	subs	r3, r0, #0
 80055f4:	d003      	beq.n	80055fe <LL_ADC_REG_Init+0x42>
        || (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2bf0      	cmp	r3, #240	; 0xf0
 80055fc:	d015      	beq.n	800562a <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <LL_ADC_REG_Init+0xc4>)
 8005604:	401a      	ands	r2, r3
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6819      	ldr	r1, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	4319      	orrs	r1, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4319      	orrs	r1, r3
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	4319      	orrs	r1, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	430b      	orrs	r3, r1
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]
 8005628:	e011      	b.n	800564e <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4a14      	ldr	r2, [pc, #80]	; (8005680 <LL_ADC_REG_Init+0xc4>)
 8005630:	401a      	ands	r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6819      	ldr	r1, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	4319      	orrs	r1, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	4319      	orrs	r1, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	430b      	orrs	r3, r1
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	0018      	movs	r0, r3
 8005652:	f7ff ff50 	bl	80054f6 <LL_ADC_REG_GetSequencerConfigurable>
 8005656:	1e03      	subs	r3, r0, #0
 8005658:	d00b      	beq.n	8005672 <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f7ff ff54 	bl	8005510 <LL_ADC_REG_SetSequencerLength>
 8005668:	e003      	b.n	8005672 <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800566a:	230f      	movs	r3, #15
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8005672:	230f      	movs	r3, #15
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	781b      	ldrb	r3, [r3, #0]
}
 8005678:	0018      	movs	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	b004      	add	sp, #16
 800567e:	bd80      	pop	{r7, pc}
 8005680:	fffec23c 	.word	0xfffec23c

08005684 <LL_GPIO_SetPinMode>:
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	435b      	muls	r3, r3
 8005698:	001a      	movs	r2, r3
 800569a:	0013      	movs	r3, r2
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	189b      	adds	r3, r3, r2
 80056a0:	43db      	mvns	r3, r3
 80056a2:	400b      	ands	r3, r1
 80056a4:	001a      	movs	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	435b      	muls	r3, r3
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	434b      	muls	r3, r1
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	46c0      	nop			; (mov r8, r8)
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b004      	add	sp, #16
 80056ba:	bd80      	pop	{r7, pc}

080056bc <LL_GPIO_SetPinOutputType>:
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	43d2      	mvns	r2, r2
 80056d0:	401a      	ands	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	434b      	muls	r3, r1
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	605a      	str	r2, [r3, #4]
}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b004      	add	sp, #16
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <LL_GPIO_SetPinSpeed>:
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6899      	ldr	r1, [r3, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	435b      	muls	r3, r3
 80056fa:	001a      	movs	r2, r3
 80056fc:	0013      	movs	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	189b      	adds	r3, r3, r2
 8005702:	43db      	mvns	r3, r3
 8005704:	400b      	ands	r3, r1
 8005706:	001a      	movs	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	435b      	muls	r3, r3
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	434b      	muls	r3, r1
 8005710:	431a      	orrs	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	609a      	str	r2, [r3, #8]
}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	46bd      	mov	sp, r7
 800571a:	b004      	add	sp, #16
 800571c:	bd80      	pop	{r7, pc}

0800571e <LL_GPIO_SetPinPull>:
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	68d9      	ldr	r1, [r3, #12]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	435b      	muls	r3, r3
 8005732:	001a      	movs	r2, r3
 8005734:	0013      	movs	r3, r2
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	189b      	adds	r3, r3, r2
 800573a:	43db      	mvns	r3, r3
 800573c:	400b      	ands	r3, r1
 800573e:	001a      	movs	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	435b      	muls	r3, r3
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	434b      	muls	r3, r1
 8005748:	431a      	orrs	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	60da      	str	r2, [r3, #12]
}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b004      	add	sp, #16
 8005754:	bd80      	pop	{r7, pc}

08005756 <LL_GPIO_SetAFPin_0_7>:
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a19      	ldr	r1, [r3, #32]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	435b      	muls	r3, r3
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4353      	muls	r3, r2
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	435a      	muls	r2, r3
 8005772:	0013      	movs	r3, r2
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	43db      	mvns	r3, r3
 800577a:	400b      	ands	r3, r1
 800577c:	001a      	movs	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	435b      	muls	r3, r3
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	434b      	muls	r3, r1
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	434b      	muls	r3, r1
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	434b      	muls	r3, r1
 800578e:	431a      	orrs	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	46bd      	mov	sp, r7
 8005798:	b004      	add	sp, #16
 800579a:	bd80      	pop	{r7, pc}

0800579c <LL_GPIO_SetAFPin_8_15>:
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	0a12      	lsrs	r2, r2, #8
 80057b4:	4353      	muls	r3, r2
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	0a12      	lsrs	r2, r2, #8
 80057ba:	4353      	muls	r3, r2
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	0a12      	lsrs	r2, r2, #8
 80057c0:	435a      	muls	r2, r3
 80057c2:	0013      	movs	r3, r2
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	1a9b      	subs	r3, r3, r2
 80057c8:	43db      	mvns	r3, r3
 80057ca:	400b      	ands	r3, r1
 80057cc:	001a      	movs	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	0a09      	lsrs	r1, r1, #8
 80057d6:	434b      	muls	r3, r1
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	0a09      	lsrs	r1, r1, #8
 80057dc:	434b      	muls	r3, r1
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	0a09      	lsrs	r1, r1, #8
 80057e2:	434b      	muls	r3, r1
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	434b      	muls	r3, r1
 80057e8:	431a      	orrs	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b004      	add	sp, #16
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005804:	e047      	b.n	8005896 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2101      	movs	r1, #1
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4091      	lsls	r1, r2
 8005810:	000a      	movs	r2, r1
 8005812:	4013      	ands	r3, r2
 8005814:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d039      	beq.n	8005890 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d003      	beq.n	800582c <LL_GPIO_Init+0x36>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d10d      	bne.n	8005848 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	0018      	movs	r0, r3
 8005836:	f7ff ff56 	bl	80056e6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	0018      	movs	r0, r3
 8005844:	f7ff ff3a 	bl	80056bc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	0018      	movs	r0, r3
 8005852:	f7ff ff64 	bl	800571e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d111      	bne.n	8005882 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2bff      	cmp	r3, #255	; 0xff
 8005862:	d807      	bhi.n	8005874 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	0018      	movs	r0, r3
 800586e:	f7ff ff72 	bl	8005756 <LL_GPIO_SetAFPin_0_7>
 8005872:	e006      	b.n	8005882 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff ff8d 	bl	800579c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	0018      	movs	r0, r3
 800588c:	f7ff fefa 	bl	8005684 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	40da      	lsrs	r2, r3
 800589e:	1e13      	subs	r3, r2, #0
 80058a0:	d1b1      	bne.n	8005806 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b004      	add	sp, #16
 80058aa:	bd80      	pop	{r7, pc}

080058ac <LL_RCC_HSI_IsReady>:
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <LL_RCC_HSI_IsReady+0x24>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	2380      	movs	r3, #128	; 0x80
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	401a      	ands	r2, r3
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	429a      	cmp	r2, r3
 80058c0:	d101      	bne.n	80058c6 <LL_RCC_HSI_IsReady+0x1a>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <LL_RCC_HSI_IsReady+0x1c>
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	40021000 	.word	0x40021000

080058d4 <LL_RCC_LSE_IsReady>:
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <LL_RCC_LSE_IsReady+0x1c>)
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	2202      	movs	r2, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d101      	bne.n	80058e8 <LL_RCC_LSE_IsReady+0x14>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <LL_RCC_LSE_IsReady+0x16>
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	0018      	movs	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40021000 	.word	0x40021000

080058f4 <LL_RCC_GetSysClkSource>:
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80058f8:	4b03      	ldr	r3, [pc, #12]	; (8005908 <LL_RCC_GetSysClkSource+0x14>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2238      	movs	r2, #56	; 0x38
 80058fe:	4013      	ands	r3, r2
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	40021000 	.word	0x40021000

0800590c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005910:	4b03      	ldr	r3, [pc, #12]	; (8005920 <LL_RCC_GetAHBPrescaler+0x14>)
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	23f0      	movs	r3, #240	; 0xf0
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	4013      	ands	r3, r2
}
 800591a:	0018      	movs	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40021000 	.word	0x40021000

08005924 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <LL_RCC_GetAPB1Prescaler+0x14>)
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	23e0      	movs	r3, #224	; 0xe0
 800592e:	01db      	lsls	r3, r3, #7
 8005930:	4013      	ands	r3, r2
}
 8005932:	0018      	movs	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40021000 	.word	0x40021000

0800593c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <LL_RCC_GetUSARTClockSource+0x20>)
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	401a      	ands	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	041b      	lsls	r3, r3, #16
 8005950:	4313      	orrs	r3, r2
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b002      	add	sp, #8
 8005958:	bd80      	pop	{r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	40021000 	.word	0x40021000

08005960 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <LL_RCC_PLL_GetN+0x14>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	0a1b      	lsrs	r3, r3, #8
 800596a:	227f      	movs	r2, #127	; 0x7f
 800596c:	4013      	ands	r3, r2
}
 800596e:	0018      	movs	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40021000 	.word	0x40021000

08005978 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <LL_RCC_PLL_GetR+0x14>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	0f5b      	lsrs	r3, r3, #29
 8005982:	075b      	lsls	r3, r3, #29
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	40021000 	.word	0x40021000

08005990 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005994:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <LL_RCC_PLL_GetMainSource+0x14>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2203      	movs	r2, #3
 800599a:	4013      	ands	r3, r2
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	40021000 	.word	0x40021000

080059a8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80059ac:	4b03      	ldr	r3, [pc, #12]	; (80059bc <LL_RCC_PLL_GetDivider+0x14>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2270      	movs	r2, #112	; 0x70
 80059b2:	4013      	ands	r3, r2
}
 80059b4:	0018      	movs	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	40021000 	.word	0x40021000

080059c0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80059c8:	f000 f866 	bl	8005a98 <RCC_GetSystemClockFreq>
 80059cc:	0002      	movs	r2, r0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 f88c 	bl	8005af4 <RCC_GetHCLKClockFreq>
 80059dc:	0002      	movs	r2, r0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f000 f89c 	bl	8005b24 <RCC_GetPCLK1ClockFreq>
 80059ec:	0002      	movs	r2, r0
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	609a      	str	r2, [r3, #8]
}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b002      	add	sp, #8
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d137      	bne.n	8005a7e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f7ff ff93 	bl	800593c <LL_RCC_GetUSARTClockSource>
 8005a16:	0003      	movs	r3, r0
 8005a18:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <LL_RCC_GetUSARTClockFreq+0x8c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d016      	beq.n	8005a4c <LL_RCC_GetUSARTClockFreq+0x50>
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <LL_RCC_GetUSARTClockFreq+0x8c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d81c      	bhi.n	8005a5e <LL_RCC_GetUSARTClockFreq+0x62>
 8005a24:	4a19      	ldr	r2, [pc, #100]	; (8005a8c <LL_RCC_GetUSARTClockFreq+0x90>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <LL_RCC_GetUSARTClockFreq+0x36>
 8005a2a:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <LL_RCC_GetUSARTClockFreq+0x94>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d005      	beq.n	8005a3c <LL_RCC_GetUSARTClockFreq+0x40>
 8005a30:	e015      	b.n	8005a5e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005a32:	f000 f831 	bl	8005a98 <RCC_GetSystemClockFreq>
 8005a36:	0003      	movs	r3, r0
 8005a38:	60fb      	str	r3, [r7, #12]
        break;
 8005a3a:	e020      	b.n	8005a7e <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8005a3c:	f7ff ff36 	bl	80058ac <LL_RCC_HSI_IsReady>
 8005a40:	0003      	movs	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d118      	bne.n	8005a78 <LL_RCC_GetUSARTClockFreq+0x7c>
        {
          usart_frequency = HSI_VALUE;
 8005a46:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <LL_RCC_GetUSARTClockFreq+0x98>)
 8005a48:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005a4a:	e015      	b.n	8005a78 <LL_RCC_GetUSARTClockFreq+0x7c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8005a4c:	f7ff ff42 	bl	80058d4 <LL_RCC_LSE_IsReady>
 8005a50:	0003      	movs	r3, r0
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d112      	bne.n	8005a7c <LL_RCC_GetUSARTClockFreq+0x80>
        {
          usart_frequency = LSE_VALUE;
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005a5c:	e00e      	b.n	8005a7c <LL_RCC_GetUSARTClockFreq+0x80>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005a5e:	f000 f81b 	bl	8005a98 <RCC_GetSystemClockFreq>
 8005a62:	0003      	movs	r3, r0
 8005a64:	0018      	movs	r0, r3
 8005a66:	f000 f845 	bl	8005af4 <RCC_GetHCLKClockFreq>
 8005a6a:	0003      	movs	r3, r0
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 f859 	bl	8005b24 <RCC_GetPCLK1ClockFreq>
 8005a72:	0003      	movs	r3, r0
 8005a74:	60fb      	str	r3, [r7, #12]
        break;
 8005a76:	e002      	b.n	8005a7e <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8005a78:	46c0      	nop			; (mov r8, r8)
 8005a7a:	e000      	b.n	8005a7e <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8005a7c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b004      	add	sp, #16
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	00030003 	.word	0x00030003
 8005a8c:	00030001 	.word	0x00030001
 8005a90:	00030002 	.word	0x00030002
 8005a94:	00f42400 	.word	0x00f42400

08005a98 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005a9e:	f7ff ff29 	bl	80058f4 <LL_RCC_GetSysClkSource>
 8005aa2:	0003      	movs	r3, r0
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d002      	beq.n	8005aae <RCC_GetSystemClockFreq+0x16>
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d003      	beq.n	8005ab4 <RCC_GetSystemClockFreq+0x1c>
 8005aac:	e007      	b.n	8005abe <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005aae:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <RCC_GetSystemClockFreq+0x50>)
 8005ab0:	607b      	str	r3, [r7, #4]
      break;
 8005ab2:	e014      	b.n	8005ade <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005ab4:	f000 f84c 	bl	8005b50 <RCC_PLL_GetFreqDomain_SYS>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	607b      	str	r3, [r7, #4]
      break;
 8005abc:	e00f      	b.n	8005ade <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <RCC_GetSystemClockFreq+0x54>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	0adb      	lsrs	r3, r3, #11
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2201      	movs	r2, #1
 8005aca:	409a      	lsls	r2, r3
 8005acc:	0013      	movs	r3, r2
 8005ace:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	4807      	ldr	r0, [pc, #28]	; (8005af0 <RCC_GetSystemClockFreq+0x58>)
 8005ad4:	f7fa fb1e 	bl	8000114 <__udivsi3>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	607b      	str	r3, [r7, #4]
      break;
 8005adc:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8005ade:	687b      	ldr	r3, [r7, #4]
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	007a1200 	.word	0x007a1200
 8005aec:	40021000 	.word	0x40021000
 8005af0:	00f42400 	.word	0x00f42400

08005af4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005afc:	f7ff ff06 	bl	800590c <LL_RCC_GetAHBPrescaler>
 8005b00:	0003      	movs	r3, r0
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	220f      	movs	r2, #15
 8005b06:	401a      	ands	r2, r3
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <RCC_GetHCLKClockFreq+0x2c>)
 8005b0a:	0092      	lsls	r2, r2, #2
 8005b0c:	58d3      	ldr	r3, [r2, r3]
 8005b0e:	221f      	movs	r2, #31
 8005b10:	4013      	ands	r3, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	40da      	lsrs	r2, r3
 8005b16:	0013      	movs	r3, r2
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	0800752c 	.word	0x0800752c

08005b24 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005b2c:	f7ff fefa 	bl	8005924 <LL_RCC_GetAPB1Prescaler>
 8005b30:	0003      	movs	r3, r0
 8005b32:	0b1a      	lsrs	r2, r3, #12
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <RCC_GetPCLK1ClockFreq+0x28>)
 8005b36:	0092      	lsls	r2, r2, #2
 8005b38:	58d3      	ldr	r3, [r2, r3]
 8005b3a:	221f      	movs	r2, #31
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	40da      	lsrs	r2, r3
 8005b42:	0013      	movs	r3, r2
}
 8005b44:	0018      	movs	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	b002      	add	sp, #8
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	0800756c 	.word	0x0800756c

08005b50 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005b56:	f7ff ff1b 	bl	8005990 <LL_RCC_PLL_GetMainSource>
 8005b5a:	0003      	movs	r3, r0
 8005b5c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d003      	beq.n	8005b6c <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d003      	beq.n	8005b72 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8005b6a:	e005      	b.n	8005b78 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8005b6e:	607b      	str	r3, [r7, #4]
      break;
 8005b70:	e005      	b.n	8005b7e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005b72:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8005b74:	607b      	str	r3, [r7, #4]
      break;
 8005b76:	e002      	b.n	8005b7e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8005b78:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8005b7a:	607b      	str	r3, [r7, #4]
      break;
 8005b7c:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005b7e:	f7ff feef 	bl	8005960 <LL_RCC_PLL_GetN>
 8005b82:	0002      	movs	r2, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4353      	muls	r3, r2
 8005b88:	001c      	movs	r4, r3
 8005b8a:	f7ff ff0d 	bl	80059a8 <LL_RCC_PLL_GetDivider>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	3301      	adds	r3, #1
 8005b94:	0019      	movs	r1, r3
 8005b96:	0020      	movs	r0, r4
 8005b98:	f7fa fabc 	bl	8000114 <__udivsi3>
 8005b9c:	0003      	movs	r3, r0
 8005b9e:	001c      	movs	r4, r3
 8005ba0:	f7ff feea 	bl	8005978 <LL_RCC_PLL_GetR>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	0f5b      	lsrs	r3, r3, #29
 8005ba8:	3301      	adds	r3, #1
 8005baa:	0019      	movs	r1, r3
 8005bac:	0020      	movs	r0, r4
 8005bae:	f7fa fab1 	bl	8000114 <__udivsi3>
 8005bb2:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b003      	add	sp, #12
 8005bba:	bd90      	pop	{r4, r7, pc}
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	007a1200 	.word	0x007a1200

08005bc4 <LL_USART_IsEnabled>:
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <LL_USART_IsEnabled+0x18>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <LL_USART_IsEnabled+0x1a>
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	0018      	movs	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b002      	add	sp, #8
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <LL_USART_SetPrescaler>:
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	220f      	movs	r2, #15
 8005bf6:	4393      	bics	r3, r2
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	b292      	uxth	r2, r2
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	46bd      	mov	sp, r7
 8005c06:	b002      	add	sp, #8
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <LL_USART_SetStopBitsLength>:
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4a05      	ldr	r2, [pc, #20]	; (8005c30 <LL_USART_SetStopBitsLength+0x24>)
 8005c1c:	401a      	ands	r2, r3
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	605a      	str	r2, [r3, #4]
}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b002      	add	sp, #8
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	ffffcfff 	.word	0xffffcfff

08005c34 <LL_USART_SetHWFlowCtrl>:
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <LL_USART_SetHWFlowCtrl+0x24>)
 8005c44:	401a      	ands	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	609a      	str	r2, [r3, #8]
}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b002      	add	sp, #8
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	fffffcff 	.word	0xfffffcff

08005c5c <LL_USART_SetBaudRate>:
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b0b      	cmp	r3, #11
 8005c6e:	d846      	bhi.n	8005cfe <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d043      	beq.n	8005cfe <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d126      	bne.n	8005cce <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	001a      	movs	r2, r3
 8005c86:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <LL_USART_SetBaudRate+0xac>)
 8005c88:	0092      	lsls	r2, r2, #2
 8005c8a:	58d3      	ldr	r3, [r2, r3]
 8005c8c:	0019      	movs	r1, r3
 8005c8e:	68b8      	ldr	r0, [r7, #8]
 8005c90:	f7fa fa40 	bl	8000114 <__udivsi3>
 8005c94:	0003      	movs	r3, r0
 8005c96:	005a      	lsls	r2, r3, #1
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	18d3      	adds	r3, r2, r3
 8005c9e:	6a39      	ldr	r1, [r7, #32]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7fa fa37 	bl	8000114 <__udivsi3>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4a17      	ldr	r2, [pc, #92]	; (8005d0c <LL_USART_SetBaudRate+0xb0>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	001a      	movs	r2, r3
 8005cbc:	2307      	movs	r3, #7
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	60da      	str	r2, [r3, #12]
}
 8005ccc:	e017      	b.n	8005cfe <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <LL_USART_SetBaudRate+0xac>)
 8005cd6:	0092      	lsls	r2, r2, #2
 8005cd8:	58d3      	ldr	r3, [r2, r3]
 8005cda:	0019      	movs	r1, r3
 8005cdc:	68b8      	ldr	r0, [r7, #8]
 8005cde:	f7fa fa19 	bl	8000114 <__udivsi3>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	001a      	movs	r2, r3
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	18d3      	adds	r3, r2, r3
 8005cec:	6a39      	ldr	r1, [r7, #32]
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f7fa fa10 	bl	8000114 <__udivsi3>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	60da      	str	r2, [r3, #12]
}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b006      	add	sp, #24
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	080075c4 	.word	0x080075c4
 8005d0c:	0000fff0 	.word	0x0000fff0

08005d10 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b08b      	sub	sp, #44	; 0x2c
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005d1a:	231f      	movs	r3, #31
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f7ff ff4b 	bl	8005bc4 <LL_USART_IsEnabled>
 8005d2e:	1e03      	subs	r3, r0, #0
 8005d30:	d153      	bne.n	8005dda <LL_USART_Init+0xca>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2c      	ldr	r2, [pc, #176]	; (8005de8 <LL_USART_Init+0xd8>)
 8005d38:	401a      	ands	r2, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6899      	ldr	r1, [r3, #8]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	4319      	orrs	r1, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	4319      	orrs	r1, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0011      	movs	r1, r2
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f7ff ff54 	bl	8005c0c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	0011      	movs	r1, r2
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f7ff ff61 	bl	8005c34 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <LL_USART_Init+0xdc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d105      	bne.n	8005d86 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005d7a:	2003      	movs	r0, #3
 8005d7c:	f7ff fe3e 	bl	80059fc <LL_RCC_GetUSARTClockFreq>
 8005d80:	0003      	movs	r3, r0
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	e00b      	b.n	8005d9e <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <LL_USART_Init+0xe0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d107      	bne.n	8005d9e <LL_USART_Init+0x8e>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8005d8e:	240c      	movs	r4, #12
 8005d90:	193b      	adds	r3, r7, r4
 8005d92:	0018      	movs	r0, r3
 8005d94:	f7ff fe14 	bl	80059c0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8005d98:	193b      	adds	r3, r7, r4
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d013      	beq.n	8005dcc <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00f      	beq.n	8005dcc <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8005dac:	231f      	movs	r3, #31
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	69dc      	ldr	r4, [r3, #28]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	69b9      	ldr	r1, [r7, #24]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	0023      	movs	r3, r4
 8005dc8:	f7ff ff48 	bl	8005c5c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	0011      	movs	r1, r2
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f7ff ff06 	bl	8005be6 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005dda:	231f      	movs	r3, #31
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	781b      	ldrb	r3, [r3, #0]
}
 8005de0:	0018      	movs	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b009      	add	sp, #36	; 0x24
 8005de6:	bd90      	pop	{r4, r7, pc}
 8005de8:	efff69f3 	.word	0xefff69f3
 8005dec:	40013800 	.word	0x40013800
 8005df0:	40004400 	.word	0x40004400

08005df4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fa f987 	bl	8000114 <__udivsi3>
 8005e06:	0003      	movs	r3, r0
 8005e08:	001a      	movs	r2, r3
 8005e0a:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <LL_InitTick+0x30>)
 8005e0c:	3a01      	subs	r2, #1
 8005e0e:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005e10:	4b04      	ldr	r3, [pc, #16]	; (8005e24 <LL_InitTick+0x30>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e16:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <LL_InitTick+0x30>)
 8005e18:	2205      	movs	r2, #5
 8005e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8005e1c:	46c0      	nop			; (mov r8, r8)
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b002      	add	sp, #8
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	e000e010 	.word	0xe000e010

08005e28 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8005e30:	23fa      	movs	r3, #250	; 0xfa
 8005e32:	009a      	lsls	r2, r3, #2
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0011      	movs	r1, r2
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f7ff ffdb 	bl	8005df4 <LL_InitTick>
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b002      	add	sp, #8
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005e50:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <LL_mDelay+0x44>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005e56:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	d00c      	beq.n	8005e7c <LL_mDelay+0x34>
  {
    tmpDelay ++;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8005e68:	e008      	b.n	8005e7c <LL_mDelay+0x34>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005e6a:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <LL_mDelay+0x44>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	025b      	lsls	r3, r3, #9
 8005e72:	4013      	ands	r3, r2
 8005e74:	d002      	beq.n	8005e7c <LL_mDelay+0x34>
    {
      tmpDelay --;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f3      	bne.n	8005e6a <LL_mDelay+0x22>
    }
  }
}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	46c0      	nop			; (mov r8, r8)
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b004      	add	sp, #16
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	e000e010 	.word	0xe000e010

08005e90 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005e98:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <LL_SetSystemCoreClock+0x18>)
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b002      	add	sp, #8
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	20000078 	.word	0x20000078

08005eac <__errno>:
 8005eac:	4b01      	ldr	r3, [pc, #4]	; (8005eb4 <__errno+0x8>)
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	4770      	bx	lr
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	2000007c 	.word	0x2000007c

08005eb8 <__libc_init_array>:
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	2600      	movs	r6, #0
 8005ebc:	4d0c      	ldr	r5, [pc, #48]	; (8005ef0 <__libc_init_array+0x38>)
 8005ebe:	4c0d      	ldr	r4, [pc, #52]	; (8005ef4 <__libc_init_array+0x3c>)
 8005ec0:	1b64      	subs	r4, r4, r5
 8005ec2:	10a4      	asrs	r4, r4, #2
 8005ec4:	42a6      	cmp	r6, r4
 8005ec6:	d109      	bne.n	8005edc <__libc_init_array+0x24>
 8005ec8:	2600      	movs	r6, #0
 8005eca:	f001 fa7d 	bl	80073c8 <_init>
 8005ece:	4d0a      	ldr	r5, [pc, #40]	; (8005ef8 <__libc_init_array+0x40>)
 8005ed0:	4c0a      	ldr	r4, [pc, #40]	; (8005efc <__libc_init_array+0x44>)
 8005ed2:	1b64      	subs	r4, r4, r5
 8005ed4:	10a4      	asrs	r4, r4, #2
 8005ed6:	42a6      	cmp	r6, r4
 8005ed8:	d105      	bne.n	8005ee6 <__libc_init_array+0x2e>
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	00b3      	lsls	r3, r6, #2
 8005ede:	58eb      	ldr	r3, [r5, r3]
 8005ee0:	4798      	blx	r3
 8005ee2:	3601      	adds	r6, #1
 8005ee4:	e7ee      	b.n	8005ec4 <__libc_init_array+0xc>
 8005ee6:	00b3      	lsls	r3, r6, #2
 8005ee8:	58eb      	ldr	r3, [r5, r3]
 8005eea:	4798      	blx	r3
 8005eec:	3601      	adds	r6, #1
 8005eee:	e7f2      	b.n	8005ed6 <__libc_init_array+0x1e>
 8005ef0:	0800773c 	.word	0x0800773c
 8005ef4:	0800773c 	.word	0x0800773c
 8005ef8:	0800773c 	.word	0x0800773c
 8005efc:	08007740 	.word	0x08007740

08005f00 <memcpy>:
 8005f00:	2300      	movs	r3, #0
 8005f02:	b510      	push	{r4, lr}
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d100      	bne.n	8005f0a <memcpy+0xa>
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	5ccc      	ldrb	r4, [r1, r3]
 8005f0c:	54c4      	strb	r4, [r0, r3]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	e7f8      	b.n	8005f04 <memcpy+0x4>

08005f12 <memset>:
 8005f12:	0003      	movs	r3, r0
 8005f14:	1882      	adds	r2, r0, r2
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d100      	bne.n	8005f1c <memset+0xa>
 8005f1a:	4770      	bx	lr
 8005f1c:	7019      	strb	r1, [r3, #0]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	e7f9      	b.n	8005f16 <memset+0x4>
	...

08005f24 <rand>:
 8005f24:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <rand+0x5c>)
 8005f26:	b510      	push	{r4, lr}
 8005f28:	681c      	ldr	r4, [r3, #0]
 8005f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d116      	bne.n	8005f5e <rand+0x3a>
 8005f30:	2018      	movs	r0, #24
 8005f32:	f000 f883 	bl	800603c <malloc>
 8005f36:	1e02      	subs	r2, r0, #0
 8005f38:	63a0      	str	r0, [r4, #56]	; 0x38
 8005f3a:	d104      	bne.n	8005f46 <rand+0x22>
 8005f3c:	214e      	movs	r1, #78	; 0x4e
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <rand+0x60>)
 8005f40:	4811      	ldr	r0, [pc, #68]	; (8005f88 <rand+0x64>)
 8005f42:	f000 f84d 	bl	8005fe0 <__assert_func>
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <rand+0x68>)
 8005f48:	2100      	movs	r1, #0
 8005f4a:	6003      	str	r3, [r0, #0]
 8005f4c:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <rand+0x6c>)
 8005f4e:	6043      	str	r3, [r0, #4]
 8005f50:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <rand+0x70>)
 8005f52:	6083      	str	r3, [r0, #8]
 8005f54:	230b      	movs	r3, #11
 8005f56:	8183      	strh	r3, [r0, #12]
 8005f58:	2001      	movs	r0, #1
 8005f5a:	6110      	str	r0, [r2, #16]
 8005f5c:	6151      	str	r1, [r2, #20]
 8005f5e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005f60:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <rand+0x74>)
 8005f62:	6920      	ldr	r0, [r4, #16]
 8005f64:	6961      	ldr	r1, [r4, #20]
 8005f66:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <rand+0x78>)
 8005f68:	f7fa fa88 	bl	800047c <__aeabi_lmul>
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	2300      	movs	r3, #0
 8005f70:	1880      	adds	r0, r0, r2
 8005f72:	4159      	adcs	r1, r3
 8005f74:	6120      	str	r0, [r4, #16]
 8005f76:	6161      	str	r1, [r4, #20]
 8005f78:	0048      	lsls	r0, r1, #1
 8005f7a:	0840      	lsrs	r0, r0, #1
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	2000007c 	.word	0x2000007c
 8005f84:	080075f8 	.word	0x080075f8
 8005f88:	0800760f 	.word	0x0800760f
 8005f8c:	abcd330e 	.word	0xabcd330e
 8005f90:	e66d1234 	.word	0xe66d1234
 8005f94:	0005deec 	.word	0x0005deec
 8005f98:	4c957f2d 	.word	0x4c957f2d
 8005f9c:	5851f42d 	.word	0x5851f42d

08005fa0 <siprintf>:
 8005fa0:	b40e      	push	{r1, r2, r3}
 8005fa2:	b500      	push	{lr}
 8005fa4:	490b      	ldr	r1, [pc, #44]	; (8005fd4 <siprintf+0x34>)
 8005fa6:	b09c      	sub	sp, #112	; 0x70
 8005fa8:	ab1d      	add	r3, sp, #116	; 0x74
 8005faa:	9002      	str	r0, [sp, #8]
 8005fac:	9006      	str	r0, [sp, #24]
 8005fae:	9107      	str	r1, [sp, #28]
 8005fb0:	9104      	str	r1, [sp, #16]
 8005fb2:	4809      	ldr	r0, [pc, #36]	; (8005fd8 <siprintf+0x38>)
 8005fb4:	4909      	ldr	r1, [pc, #36]	; (8005fdc <siprintf+0x3c>)
 8005fb6:	cb04      	ldmia	r3!, {r2}
 8005fb8:	9105      	str	r1, [sp, #20]
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	a902      	add	r1, sp, #8
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	f000 f98a 	bl	80062d8 <_svfiprintf_r>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9a02      	ldr	r2, [sp, #8]
 8005fc8:	7013      	strb	r3, [r2, #0]
 8005fca:	b01c      	add	sp, #112	; 0x70
 8005fcc:	bc08      	pop	{r3}
 8005fce:	b003      	add	sp, #12
 8005fd0:	4718      	bx	r3
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	7fffffff 	.word	0x7fffffff
 8005fd8:	2000007c 	.word	0x2000007c
 8005fdc:	ffff0208 	.word	0xffff0208

08005fe0 <__assert_func>:
 8005fe0:	b530      	push	{r4, r5, lr}
 8005fe2:	0014      	movs	r4, r2
 8005fe4:	001a      	movs	r2, r3
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <__assert_func+0x2c>)
 8005fe8:	0005      	movs	r5, r0
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b085      	sub	sp, #20
 8005fee:	68d8      	ldr	r0, [r3, #12]
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <__assert_func+0x30>)
 8005ff2:	2c00      	cmp	r4, #0
 8005ff4:	d101      	bne.n	8005ffa <__assert_func+0x1a>
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <__assert_func+0x34>)
 8005ff8:	001c      	movs	r4, r3
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	9100      	str	r1, [sp, #0]
 8005ffe:	002b      	movs	r3, r5
 8006000:	4905      	ldr	r1, [pc, #20]	; (8006018 <__assert_func+0x38>)
 8006002:	9402      	str	r4, [sp, #8]
 8006004:	f000 f80a 	bl	800601c <fiprintf>
 8006008:	f000 fe2a 	bl	8006c60 <abort>
 800600c:	2000007c 	.word	0x2000007c
 8006010:	0800766a 	.word	0x0800766a
 8006014:	080076a5 	.word	0x080076a5
 8006018:	08007677 	.word	0x08007677

0800601c <fiprintf>:
 800601c:	b40e      	push	{r1, r2, r3}
 800601e:	b503      	push	{r0, r1, lr}
 8006020:	0001      	movs	r1, r0
 8006022:	ab03      	add	r3, sp, #12
 8006024:	4804      	ldr	r0, [pc, #16]	; (8006038 <fiprintf+0x1c>)
 8006026:	cb04      	ldmia	r3!, {r2}
 8006028:	6800      	ldr	r0, [r0, #0]
 800602a:	9301      	str	r3, [sp, #4]
 800602c:	f000 fa7c 	bl	8006528 <_vfiprintf_r>
 8006030:	b002      	add	sp, #8
 8006032:	bc08      	pop	{r3}
 8006034:	b003      	add	sp, #12
 8006036:	4718      	bx	r3
 8006038:	2000007c 	.word	0x2000007c

0800603c <malloc>:
 800603c:	b510      	push	{r4, lr}
 800603e:	4b03      	ldr	r3, [pc, #12]	; (800604c <malloc+0x10>)
 8006040:	0001      	movs	r1, r0
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	f000 f870 	bl	8006128 <_malloc_r>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	2000007c 	.word	0x2000007c

08006050 <_free_r>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	0005      	movs	r5, r0
 8006054:	2900      	cmp	r1, #0
 8006056:	d010      	beq.n	800607a <_free_r+0x2a>
 8006058:	1f0c      	subs	r4, r1, #4
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	da00      	bge.n	8006062 <_free_r+0x12>
 8006060:	18e4      	adds	r4, r4, r3
 8006062:	0028      	movs	r0, r5
 8006064:	f001 f860 	bl	8007128 <__malloc_lock>
 8006068:	4a1d      	ldr	r2, [pc, #116]	; (80060e0 <_free_r+0x90>)
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <_free_r+0x2c>
 8006070:	6063      	str	r3, [r4, #4]
 8006072:	6014      	str	r4, [r2, #0]
 8006074:	0028      	movs	r0, r5
 8006076:	f001 f85f 	bl	8007138 <__malloc_unlock>
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	42a3      	cmp	r3, r4
 800607e:	d908      	bls.n	8006092 <_free_r+0x42>
 8006080:	6821      	ldr	r1, [r4, #0]
 8006082:	1860      	adds	r0, r4, r1
 8006084:	4283      	cmp	r3, r0
 8006086:	d1f3      	bne.n	8006070 <_free_r+0x20>
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	1841      	adds	r1, r0, r1
 800608e:	6021      	str	r1, [r4, #0]
 8006090:	e7ee      	b.n	8006070 <_free_r+0x20>
 8006092:	001a      	movs	r2, r3
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <_free_r+0x4e>
 800609a:	42a3      	cmp	r3, r4
 800609c:	d9f9      	bls.n	8006092 <_free_r+0x42>
 800609e:	6811      	ldr	r1, [r2, #0]
 80060a0:	1850      	adds	r0, r2, r1
 80060a2:	42a0      	cmp	r0, r4
 80060a4:	d10b      	bne.n	80060be <_free_r+0x6e>
 80060a6:	6820      	ldr	r0, [r4, #0]
 80060a8:	1809      	adds	r1, r1, r0
 80060aa:	1850      	adds	r0, r2, r1
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	4283      	cmp	r3, r0
 80060b0:	d1e0      	bne.n	8006074 <_free_r+0x24>
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	1841      	adds	r1, r0, r1
 80060b8:	6011      	str	r1, [r2, #0]
 80060ba:	6053      	str	r3, [r2, #4]
 80060bc:	e7da      	b.n	8006074 <_free_r+0x24>
 80060be:	42a0      	cmp	r0, r4
 80060c0:	d902      	bls.n	80060c8 <_free_r+0x78>
 80060c2:	230c      	movs	r3, #12
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	e7d5      	b.n	8006074 <_free_r+0x24>
 80060c8:	6821      	ldr	r1, [r4, #0]
 80060ca:	1860      	adds	r0, r4, r1
 80060cc:	4283      	cmp	r3, r0
 80060ce:	d103      	bne.n	80060d8 <_free_r+0x88>
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	1841      	adds	r1, r0, r1
 80060d6:	6021      	str	r1, [r4, #0]
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	6054      	str	r4, [r2, #4]
 80060dc:	e7ca      	b.n	8006074 <_free_r+0x24>
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	200007ac 	.word	0x200007ac

080060e4 <sbrk_aligned>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4e0f      	ldr	r6, [pc, #60]	; (8006124 <sbrk_aligned+0x40>)
 80060e8:	000d      	movs	r5, r1
 80060ea:	6831      	ldr	r1, [r6, #0]
 80060ec:	0004      	movs	r4, r0
 80060ee:	2900      	cmp	r1, #0
 80060f0:	d102      	bne.n	80060f8 <sbrk_aligned+0x14>
 80060f2:	f000 fcd5 	bl	8006aa0 <_sbrk_r>
 80060f6:	6030      	str	r0, [r6, #0]
 80060f8:	0029      	movs	r1, r5
 80060fa:	0020      	movs	r0, r4
 80060fc:	f000 fcd0 	bl	8006aa0 <_sbrk_r>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d00a      	beq.n	800611a <sbrk_aligned+0x36>
 8006104:	2303      	movs	r3, #3
 8006106:	1cc5      	adds	r5, r0, #3
 8006108:	439d      	bics	r5, r3
 800610a:	42a8      	cmp	r0, r5
 800610c:	d007      	beq.n	800611e <sbrk_aligned+0x3a>
 800610e:	1a29      	subs	r1, r5, r0
 8006110:	0020      	movs	r0, r4
 8006112:	f000 fcc5 	bl	8006aa0 <_sbrk_r>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	d101      	bne.n	800611e <sbrk_aligned+0x3a>
 800611a:	2501      	movs	r5, #1
 800611c:	426d      	negs	r5, r5
 800611e:	0028      	movs	r0, r5
 8006120:	bd70      	pop	{r4, r5, r6, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	200007b0 	.word	0x200007b0

08006128 <_malloc_r>:
 8006128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800612a:	2203      	movs	r2, #3
 800612c:	1ccb      	adds	r3, r1, #3
 800612e:	4393      	bics	r3, r2
 8006130:	3308      	adds	r3, #8
 8006132:	0006      	movs	r6, r0
 8006134:	001f      	movs	r7, r3
 8006136:	2b0c      	cmp	r3, #12
 8006138:	d232      	bcs.n	80061a0 <_malloc_r+0x78>
 800613a:	270c      	movs	r7, #12
 800613c:	42b9      	cmp	r1, r7
 800613e:	d831      	bhi.n	80061a4 <_malloc_r+0x7c>
 8006140:	0030      	movs	r0, r6
 8006142:	f000 fff1 	bl	8007128 <__malloc_lock>
 8006146:	4d32      	ldr	r5, [pc, #200]	; (8006210 <_malloc_r+0xe8>)
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	001c      	movs	r4, r3
 800614c:	2c00      	cmp	r4, #0
 800614e:	d12e      	bne.n	80061ae <_malloc_r+0x86>
 8006150:	0039      	movs	r1, r7
 8006152:	0030      	movs	r0, r6
 8006154:	f7ff ffc6 	bl	80060e4 <sbrk_aligned>
 8006158:	0004      	movs	r4, r0
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	d11e      	bne.n	800619c <_malloc_r+0x74>
 800615e:	682c      	ldr	r4, [r5, #0]
 8006160:	0025      	movs	r5, r4
 8006162:	2d00      	cmp	r5, #0
 8006164:	d14a      	bne.n	80061fc <_malloc_r+0xd4>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	0029      	movs	r1, r5
 800616a:	18e3      	adds	r3, r4, r3
 800616c:	0030      	movs	r0, r6
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	f000 fc96 	bl	8006aa0 <_sbrk_r>
 8006174:	9b01      	ldr	r3, [sp, #4]
 8006176:	4283      	cmp	r3, r0
 8006178:	d143      	bne.n	8006202 <_malloc_r+0xda>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	3703      	adds	r7, #3
 800617e:	1aff      	subs	r7, r7, r3
 8006180:	2303      	movs	r3, #3
 8006182:	439f      	bics	r7, r3
 8006184:	3708      	adds	r7, #8
 8006186:	2f0c      	cmp	r7, #12
 8006188:	d200      	bcs.n	800618c <_malloc_r+0x64>
 800618a:	270c      	movs	r7, #12
 800618c:	0039      	movs	r1, r7
 800618e:	0030      	movs	r0, r6
 8006190:	f7ff ffa8 	bl	80060e4 <sbrk_aligned>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d034      	beq.n	8006202 <_malloc_r+0xda>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	19df      	adds	r7, r3, r7
 800619c:	6027      	str	r7, [r4, #0]
 800619e:	e013      	b.n	80061c8 <_malloc_r+0xa0>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	dacb      	bge.n	800613c <_malloc_r+0x14>
 80061a4:	230c      	movs	r3, #12
 80061a6:	2500      	movs	r5, #0
 80061a8:	6033      	str	r3, [r6, #0]
 80061aa:	0028      	movs	r0, r5
 80061ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	1bd1      	subs	r1, r2, r7
 80061b2:	d420      	bmi.n	80061f6 <_malloc_r+0xce>
 80061b4:	290b      	cmp	r1, #11
 80061b6:	d917      	bls.n	80061e8 <_malloc_r+0xc0>
 80061b8:	19e2      	adds	r2, r4, r7
 80061ba:	6027      	str	r7, [r4, #0]
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d111      	bne.n	80061e4 <_malloc_r+0xbc>
 80061c0:	602a      	str	r2, [r5, #0]
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	6053      	str	r3, [r2, #4]
 80061c8:	0030      	movs	r0, r6
 80061ca:	0025      	movs	r5, r4
 80061cc:	f000 ffb4 	bl	8007138 <__malloc_unlock>
 80061d0:	2207      	movs	r2, #7
 80061d2:	350b      	adds	r5, #11
 80061d4:	1d23      	adds	r3, r4, #4
 80061d6:	4395      	bics	r5, r2
 80061d8:	1aea      	subs	r2, r5, r3
 80061da:	429d      	cmp	r5, r3
 80061dc:	d0e5      	beq.n	80061aa <_malloc_r+0x82>
 80061de:	1b5b      	subs	r3, r3, r5
 80061e0:	50a3      	str	r3, [r4, r2]
 80061e2:	e7e2      	b.n	80061aa <_malloc_r+0x82>
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	e7ec      	b.n	80061c2 <_malloc_r+0x9a>
 80061e8:	6862      	ldr	r2, [r4, #4]
 80061ea:	42a3      	cmp	r3, r4
 80061ec:	d101      	bne.n	80061f2 <_malloc_r+0xca>
 80061ee:	602a      	str	r2, [r5, #0]
 80061f0:	e7ea      	b.n	80061c8 <_malloc_r+0xa0>
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	e7e8      	b.n	80061c8 <_malloc_r+0xa0>
 80061f6:	0023      	movs	r3, r4
 80061f8:	6864      	ldr	r4, [r4, #4]
 80061fa:	e7a7      	b.n	800614c <_malloc_r+0x24>
 80061fc:	002c      	movs	r4, r5
 80061fe:	686d      	ldr	r5, [r5, #4]
 8006200:	e7af      	b.n	8006162 <_malloc_r+0x3a>
 8006202:	230c      	movs	r3, #12
 8006204:	0030      	movs	r0, r6
 8006206:	6033      	str	r3, [r6, #0]
 8006208:	f000 ff96 	bl	8007138 <__malloc_unlock>
 800620c:	e7cd      	b.n	80061aa <_malloc_r+0x82>
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	200007ac 	.word	0x200007ac

08006214 <__ssputs_r>:
 8006214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006216:	688e      	ldr	r6, [r1, #8]
 8006218:	b085      	sub	sp, #20
 800621a:	0007      	movs	r7, r0
 800621c:	000c      	movs	r4, r1
 800621e:	9203      	str	r2, [sp, #12]
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	429e      	cmp	r6, r3
 8006224:	d83c      	bhi.n	80062a0 <__ssputs_r+0x8c>
 8006226:	2390      	movs	r3, #144	; 0x90
 8006228:	898a      	ldrh	r2, [r1, #12]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	421a      	tst	r2, r3
 800622e:	d034      	beq.n	800629a <__ssputs_r+0x86>
 8006230:	6909      	ldr	r1, [r1, #16]
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	6960      	ldr	r0, [r4, #20]
 8006236:	1a5b      	subs	r3, r3, r1
 8006238:	9302      	str	r3, [sp, #8]
 800623a:	2303      	movs	r3, #3
 800623c:	4343      	muls	r3, r0
 800623e:	0fdd      	lsrs	r5, r3, #31
 8006240:	18ed      	adds	r5, r5, r3
 8006242:	9b01      	ldr	r3, [sp, #4]
 8006244:	9802      	ldr	r0, [sp, #8]
 8006246:	3301      	adds	r3, #1
 8006248:	181b      	adds	r3, r3, r0
 800624a:	106d      	asrs	r5, r5, #1
 800624c:	42ab      	cmp	r3, r5
 800624e:	d900      	bls.n	8006252 <__ssputs_r+0x3e>
 8006250:	001d      	movs	r5, r3
 8006252:	0553      	lsls	r3, r2, #21
 8006254:	d532      	bpl.n	80062bc <__ssputs_r+0xa8>
 8006256:	0029      	movs	r1, r5
 8006258:	0038      	movs	r0, r7
 800625a:	f7ff ff65 	bl	8006128 <_malloc_r>
 800625e:	1e06      	subs	r6, r0, #0
 8006260:	d109      	bne.n	8006276 <__ssputs_r+0x62>
 8006262:	230c      	movs	r3, #12
 8006264:	603b      	str	r3, [r7, #0]
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	2001      	movs	r0, #1
 800626a:	89a2      	ldrh	r2, [r4, #12]
 800626c:	4240      	negs	r0, r0
 800626e:	4313      	orrs	r3, r2
 8006270:	81a3      	strh	r3, [r4, #12]
 8006272:	b005      	add	sp, #20
 8006274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006276:	9a02      	ldr	r2, [sp, #8]
 8006278:	6921      	ldr	r1, [r4, #16]
 800627a:	f7ff fe41 	bl	8005f00 <memcpy>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <__ssputs_r+0xc0>)
 8006282:	401a      	ands	r2, r3
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	4313      	orrs	r3, r2
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	9b02      	ldr	r3, [sp, #8]
 800628c:	6126      	str	r6, [r4, #16]
 800628e:	18f6      	adds	r6, r6, r3
 8006290:	6026      	str	r6, [r4, #0]
 8006292:	6165      	str	r5, [r4, #20]
 8006294:	9e01      	ldr	r6, [sp, #4]
 8006296:	1aed      	subs	r5, r5, r3
 8006298:	60a5      	str	r5, [r4, #8]
 800629a:	9b01      	ldr	r3, [sp, #4]
 800629c:	429e      	cmp	r6, r3
 800629e:	d900      	bls.n	80062a2 <__ssputs_r+0x8e>
 80062a0:	9e01      	ldr	r6, [sp, #4]
 80062a2:	0032      	movs	r2, r6
 80062a4:	9903      	ldr	r1, [sp, #12]
 80062a6:	6820      	ldr	r0, [r4, #0]
 80062a8:	f000 ff2b 	bl	8007102 <memmove>
 80062ac:	68a3      	ldr	r3, [r4, #8]
 80062ae:	2000      	movs	r0, #0
 80062b0:	1b9b      	subs	r3, r3, r6
 80062b2:	60a3      	str	r3, [r4, #8]
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	199e      	adds	r6, r3, r6
 80062b8:	6026      	str	r6, [r4, #0]
 80062ba:	e7da      	b.n	8006272 <__ssputs_r+0x5e>
 80062bc:	002a      	movs	r2, r5
 80062be:	0038      	movs	r0, r7
 80062c0:	f000 ff42 	bl	8007148 <_realloc_r>
 80062c4:	1e06      	subs	r6, r0, #0
 80062c6:	d1e0      	bne.n	800628a <__ssputs_r+0x76>
 80062c8:	0038      	movs	r0, r7
 80062ca:	6921      	ldr	r1, [r4, #16]
 80062cc:	f7ff fec0 	bl	8006050 <_free_r>
 80062d0:	e7c7      	b.n	8006262 <__ssputs_r+0x4e>
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	fffffb7f 	.word	0xfffffb7f

080062d8 <_svfiprintf_r>:
 80062d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062da:	b0a1      	sub	sp, #132	; 0x84
 80062dc:	9003      	str	r0, [sp, #12]
 80062de:	001d      	movs	r5, r3
 80062e0:	898b      	ldrh	r3, [r1, #12]
 80062e2:	000f      	movs	r7, r1
 80062e4:	0016      	movs	r6, r2
 80062e6:	061b      	lsls	r3, r3, #24
 80062e8:	d511      	bpl.n	800630e <_svfiprintf_r+0x36>
 80062ea:	690b      	ldr	r3, [r1, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10e      	bne.n	800630e <_svfiprintf_r+0x36>
 80062f0:	2140      	movs	r1, #64	; 0x40
 80062f2:	f7ff ff19 	bl	8006128 <_malloc_r>
 80062f6:	6038      	str	r0, [r7, #0]
 80062f8:	6138      	str	r0, [r7, #16]
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d105      	bne.n	800630a <_svfiprintf_r+0x32>
 80062fe:	230c      	movs	r3, #12
 8006300:	9a03      	ldr	r2, [sp, #12]
 8006302:	3801      	subs	r0, #1
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	b021      	add	sp, #132	; 0x84
 8006308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800630a:	2340      	movs	r3, #64	; 0x40
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	2300      	movs	r3, #0
 8006310:	ac08      	add	r4, sp, #32
 8006312:	6163      	str	r3, [r4, #20]
 8006314:	3320      	adds	r3, #32
 8006316:	7663      	strb	r3, [r4, #25]
 8006318:	3310      	adds	r3, #16
 800631a:	76a3      	strb	r3, [r4, #26]
 800631c:	9507      	str	r5, [sp, #28]
 800631e:	0035      	movs	r5, r6
 8006320:	782b      	ldrb	r3, [r5, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <_svfiprintf_r+0x52>
 8006326:	2b25      	cmp	r3, #37	; 0x25
 8006328:	d147      	bne.n	80063ba <_svfiprintf_r+0xe2>
 800632a:	1bab      	subs	r3, r5, r6
 800632c:	9305      	str	r3, [sp, #20]
 800632e:	42b5      	cmp	r5, r6
 8006330:	d00c      	beq.n	800634c <_svfiprintf_r+0x74>
 8006332:	0032      	movs	r2, r6
 8006334:	0039      	movs	r1, r7
 8006336:	9803      	ldr	r0, [sp, #12]
 8006338:	f7ff ff6c 	bl	8006214 <__ssputs_r>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d100      	bne.n	8006342 <_svfiprintf_r+0x6a>
 8006340:	e0ae      	b.n	80064a0 <_svfiprintf_r+0x1c8>
 8006342:	6962      	ldr	r2, [r4, #20]
 8006344:	9b05      	ldr	r3, [sp, #20]
 8006346:	4694      	mov	ip, r2
 8006348:	4463      	add	r3, ip
 800634a:	6163      	str	r3, [r4, #20]
 800634c:	782b      	ldrb	r3, [r5, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d100      	bne.n	8006354 <_svfiprintf_r+0x7c>
 8006352:	e0a5      	b.n	80064a0 <_svfiprintf_r+0x1c8>
 8006354:	2201      	movs	r2, #1
 8006356:	2300      	movs	r3, #0
 8006358:	4252      	negs	r2, r2
 800635a:	6062      	str	r2, [r4, #4]
 800635c:	a904      	add	r1, sp, #16
 800635e:	3254      	adds	r2, #84	; 0x54
 8006360:	1852      	adds	r2, r2, r1
 8006362:	1c6e      	adds	r6, r5, #1
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	60e3      	str	r3, [r4, #12]
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	7013      	strb	r3, [r2, #0]
 800636c:	65a3      	str	r3, [r4, #88]	; 0x58
 800636e:	2205      	movs	r2, #5
 8006370:	7831      	ldrb	r1, [r6, #0]
 8006372:	4854      	ldr	r0, [pc, #336]	; (80064c4 <_svfiprintf_r+0x1ec>)
 8006374:	f000 feba 	bl	80070ec <memchr>
 8006378:	1c75      	adds	r5, r6, #1
 800637a:	2800      	cmp	r0, #0
 800637c:	d11f      	bne.n	80063be <_svfiprintf_r+0xe6>
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	06d3      	lsls	r3, r2, #27
 8006382:	d504      	bpl.n	800638e <_svfiprintf_r+0xb6>
 8006384:	2353      	movs	r3, #83	; 0x53
 8006386:	a904      	add	r1, sp, #16
 8006388:	185b      	adds	r3, r3, r1
 800638a:	2120      	movs	r1, #32
 800638c:	7019      	strb	r1, [r3, #0]
 800638e:	0713      	lsls	r3, r2, #28
 8006390:	d504      	bpl.n	800639c <_svfiprintf_r+0xc4>
 8006392:	2353      	movs	r3, #83	; 0x53
 8006394:	a904      	add	r1, sp, #16
 8006396:	185b      	adds	r3, r3, r1
 8006398:	212b      	movs	r1, #43	; 0x2b
 800639a:	7019      	strb	r1, [r3, #0]
 800639c:	7833      	ldrb	r3, [r6, #0]
 800639e:	2b2a      	cmp	r3, #42	; 0x2a
 80063a0:	d016      	beq.n	80063d0 <_svfiprintf_r+0xf8>
 80063a2:	0035      	movs	r5, r6
 80063a4:	2100      	movs	r1, #0
 80063a6:	200a      	movs	r0, #10
 80063a8:	68e3      	ldr	r3, [r4, #12]
 80063aa:	782a      	ldrb	r2, [r5, #0]
 80063ac:	1c6e      	adds	r6, r5, #1
 80063ae:	3a30      	subs	r2, #48	; 0x30
 80063b0:	2a09      	cmp	r2, #9
 80063b2:	d94e      	bls.n	8006452 <_svfiprintf_r+0x17a>
 80063b4:	2900      	cmp	r1, #0
 80063b6:	d111      	bne.n	80063dc <_svfiprintf_r+0x104>
 80063b8:	e017      	b.n	80063ea <_svfiprintf_r+0x112>
 80063ba:	3501      	adds	r5, #1
 80063bc:	e7b0      	b.n	8006320 <_svfiprintf_r+0x48>
 80063be:	4b41      	ldr	r3, [pc, #260]	; (80064c4 <_svfiprintf_r+0x1ec>)
 80063c0:	6822      	ldr	r2, [r4, #0]
 80063c2:	1ac0      	subs	r0, r0, r3
 80063c4:	2301      	movs	r3, #1
 80063c6:	4083      	lsls	r3, r0
 80063c8:	4313      	orrs	r3, r2
 80063ca:	002e      	movs	r6, r5
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	e7ce      	b.n	800636e <_svfiprintf_r+0x96>
 80063d0:	9b07      	ldr	r3, [sp, #28]
 80063d2:	1d19      	adds	r1, r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	9107      	str	r1, [sp, #28]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	db01      	blt.n	80063e0 <_svfiprintf_r+0x108>
 80063dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80063de:	e004      	b.n	80063ea <_svfiprintf_r+0x112>
 80063e0:	425b      	negs	r3, r3
 80063e2:	60e3      	str	r3, [r4, #12]
 80063e4:	2302      	movs	r3, #2
 80063e6:	4313      	orrs	r3, r2
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	782b      	ldrb	r3, [r5, #0]
 80063ec:	2b2e      	cmp	r3, #46	; 0x2e
 80063ee:	d10a      	bne.n	8006406 <_svfiprintf_r+0x12e>
 80063f0:	786b      	ldrb	r3, [r5, #1]
 80063f2:	2b2a      	cmp	r3, #42	; 0x2a
 80063f4:	d135      	bne.n	8006462 <_svfiprintf_r+0x18a>
 80063f6:	9b07      	ldr	r3, [sp, #28]
 80063f8:	3502      	adds	r5, #2
 80063fa:	1d1a      	adds	r2, r3, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	9207      	str	r2, [sp, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	db2b      	blt.n	800645c <_svfiprintf_r+0x184>
 8006404:	9309      	str	r3, [sp, #36]	; 0x24
 8006406:	4e30      	ldr	r6, [pc, #192]	; (80064c8 <_svfiprintf_r+0x1f0>)
 8006408:	2203      	movs	r2, #3
 800640a:	0030      	movs	r0, r6
 800640c:	7829      	ldrb	r1, [r5, #0]
 800640e:	f000 fe6d 	bl	80070ec <memchr>
 8006412:	2800      	cmp	r0, #0
 8006414:	d006      	beq.n	8006424 <_svfiprintf_r+0x14c>
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	1b80      	subs	r0, r0, r6
 800641a:	4083      	lsls	r3, r0
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	3501      	adds	r5, #1
 8006420:	4313      	orrs	r3, r2
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	7829      	ldrb	r1, [r5, #0]
 8006426:	2206      	movs	r2, #6
 8006428:	4828      	ldr	r0, [pc, #160]	; (80064cc <_svfiprintf_r+0x1f4>)
 800642a:	1c6e      	adds	r6, r5, #1
 800642c:	7621      	strb	r1, [r4, #24]
 800642e:	f000 fe5d 	bl	80070ec <memchr>
 8006432:	2800      	cmp	r0, #0
 8006434:	d03c      	beq.n	80064b0 <_svfiprintf_r+0x1d8>
 8006436:	4b26      	ldr	r3, [pc, #152]	; (80064d0 <_svfiprintf_r+0x1f8>)
 8006438:	2b00      	cmp	r3, #0
 800643a:	d125      	bne.n	8006488 <_svfiprintf_r+0x1b0>
 800643c:	2207      	movs	r2, #7
 800643e:	9b07      	ldr	r3, [sp, #28]
 8006440:	3307      	adds	r3, #7
 8006442:	4393      	bics	r3, r2
 8006444:	3308      	adds	r3, #8
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	6963      	ldr	r3, [r4, #20]
 800644a:	9a04      	ldr	r2, [sp, #16]
 800644c:	189b      	adds	r3, r3, r2
 800644e:	6163      	str	r3, [r4, #20]
 8006450:	e765      	b.n	800631e <_svfiprintf_r+0x46>
 8006452:	4343      	muls	r3, r0
 8006454:	0035      	movs	r5, r6
 8006456:	2101      	movs	r1, #1
 8006458:	189b      	adds	r3, r3, r2
 800645a:	e7a6      	b.n	80063aa <_svfiprintf_r+0xd2>
 800645c:	2301      	movs	r3, #1
 800645e:	425b      	negs	r3, r3
 8006460:	e7d0      	b.n	8006404 <_svfiprintf_r+0x12c>
 8006462:	2300      	movs	r3, #0
 8006464:	200a      	movs	r0, #10
 8006466:	001a      	movs	r2, r3
 8006468:	3501      	adds	r5, #1
 800646a:	6063      	str	r3, [r4, #4]
 800646c:	7829      	ldrb	r1, [r5, #0]
 800646e:	1c6e      	adds	r6, r5, #1
 8006470:	3930      	subs	r1, #48	; 0x30
 8006472:	2909      	cmp	r1, #9
 8006474:	d903      	bls.n	800647e <_svfiprintf_r+0x1a6>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0c5      	beq.n	8006406 <_svfiprintf_r+0x12e>
 800647a:	9209      	str	r2, [sp, #36]	; 0x24
 800647c:	e7c3      	b.n	8006406 <_svfiprintf_r+0x12e>
 800647e:	4342      	muls	r2, r0
 8006480:	0035      	movs	r5, r6
 8006482:	2301      	movs	r3, #1
 8006484:	1852      	adds	r2, r2, r1
 8006486:	e7f1      	b.n	800646c <_svfiprintf_r+0x194>
 8006488:	ab07      	add	r3, sp, #28
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	003a      	movs	r2, r7
 800648e:	0021      	movs	r1, r4
 8006490:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <_svfiprintf_r+0x1fc>)
 8006492:	9803      	ldr	r0, [sp, #12]
 8006494:	e000      	b.n	8006498 <_svfiprintf_r+0x1c0>
 8006496:	bf00      	nop
 8006498:	9004      	str	r0, [sp, #16]
 800649a:	9b04      	ldr	r3, [sp, #16]
 800649c:	3301      	adds	r3, #1
 800649e:	d1d3      	bne.n	8006448 <_svfiprintf_r+0x170>
 80064a0:	89bb      	ldrh	r3, [r7, #12]
 80064a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80064a4:	065b      	lsls	r3, r3, #25
 80064a6:	d400      	bmi.n	80064aa <_svfiprintf_r+0x1d2>
 80064a8:	e72d      	b.n	8006306 <_svfiprintf_r+0x2e>
 80064aa:	2001      	movs	r0, #1
 80064ac:	4240      	negs	r0, r0
 80064ae:	e72a      	b.n	8006306 <_svfiprintf_r+0x2e>
 80064b0:	ab07      	add	r3, sp, #28
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	003a      	movs	r2, r7
 80064b6:	0021      	movs	r1, r4
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <_svfiprintf_r+0x1fc>)
 80064ba:	9803      	ldr	r0, [sp, #12]
 80064bc:	f000 f9de 	bl	800687c <_printf_i>
 80064c0:	e7ea      	b.n	8006498 <_svfiprintf_r+0x1c0>
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	080076a6 	.word	0x080076a6
 80064c8:	080076ac 	.word	0x080076ac
 80064cc:	080076b0 	.word	0x080076b0
 80064d0:	00000000 	.word	0x00000000
 80064d4:	08006215 	.word	0x08006215

080064d8 <__sfputc_r>:
 80064d8:	6893      	ldr	r3, [r2, #8]
 80064da:	b510      	push	{r4, lr}
 80064dc:	3b01      	subs	r3, #1
 80064de:	6093      	str	r3, [r2, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	da04      	bge.n	80064ee <__sfputc_r+0x16>
 80064e4:	6994      	ldr	r4, [r2, #24]
 80064e6:	42a3      	cmp	r3, r4
 80064e8:	db07      	blt.n	80064fa <__sfputc_r+0x22>
 80064ea:	290a      	cmp	r1, #10
 80064ec:	d005      	beq.n	80064fa <__sfputc_r+0x22>
 80064ee:	6813      	ldr	r3, [r2, #0]
 80064f0:	1c58      	adds	r0, r3, #1
 80064f2:	6010      	str	r0, [r2, #0]
 80064f4:	7019      	strb	r1, [r3, #0]
 80064f6:	0008      	movs	r0, r1
 80064f8:	bd10      	pop	{r4, pc}
 80064fa:	f000 fae3 	bl	8006ac4 <__swbuf_r>
 80064fe:	0001      	movs	r1, r0
 8006500:	e7f9      	b.n	80064f6 <__sfputc_r+0x1e>

08006502 <__sfputs_r>:
 8006502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006504:	0006      	movs	r6, r0
 8006506:	000f      	movs	r7, r1
 8006508:	0014      	movs	r4, r2
 800650a:	18d5      	adds	r5, r2, r3
 800650c:	42ac      	cmp	r4, r5
 800650e:	d101      	bne.n	8006514 <__sfputs_r+0x12>
 8006510:	2000      	movs	r0, #0
 8006512:	e007      	b.n	8006524 <__sfputs_r+0x22>
 8006514:	7821      	ldrb	r1, [r4, #0]
 8006516:	003a      	movs	r2, r7
 8006518:	0030      	movs	r0, r6
 800651a:	f7ff ffdd 	bl	80064d8 <__sfputc_r>
 800651e:	3401      	adds	r4, #1
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d1f3      	bne.n	800650c <__sfputs_r+0xa>
 8006524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006528 <_vfiprintf_r>:
 8006528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652a:	b0a1      	sub	sp, #132	; 0x84
 800652c:	0006      	movs	r6, r0
 800652e:	000c      	movs	r4, r1
 8006530:	001f      	movs	r7, r3
 8006532:	9203      	str	r2, [sp, #12]
 8006534:	2800      	cmp	r0, #0
 8006536:	d004      	beq.n	8006542 <_vfiprintf_r+0x1a>
 8006538:	6983      	ldr	r3, [r0, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <_vfiprintf_r+0x1a>
 800653e:	f000 fcc5 	bl	8006ecc <__sinit>
 8006542:	4b8e      	ldr	r3, [pc, #568]	; (800677c <_vfiprintf_r+0x254>)
 8006544:	429c      	cmp	r4, r3
 8006546:	d11c      	bne.n	8006582 <_vfiprintf_r+0x5a>
 8006548:	6874      	ldr	r4, [r6, #4]
 800654a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800654c:	07db      	lsls	r3, r3, #31
 800654e:	d405      	bmi.n	800655c <_vfiprintf_r+0x34>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	059b      	lsls	r3, r3, #22
 8006554:	d402      	bmi.n	800655c <_vfiprintf_r+0x34>
 8006556:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006558:	f000 fd59 	bl	800700e <__retarget_lock_acquire_recursive>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	071b      	lsls	r3, r3, #28
 8006560:	d502      	bpl.n	8006568 <_vfiprintf_r+0x40>
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d11d      	bne.n	80065a4 <_vfiprintf_r+0x7c>
 8006568:	0021      	movs	r1, r4
 800656a:	0030      	movs	r0, r6
 800656c:	f000 fb00 	bl	8006b70 <__swsetup_r>
 8006570:	2800      	cmp	r0, #0
 8006572:	d017      	beq.n	80065a4 <_vfiprintf_r+0x7c>
 8006574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006576:	07db      	lsls	r3, r3, #31
 8006578:	d50d      	bpl.n	8006596 <_vfiprintf_r+0x6e>
 800657a:	2001      	movs	r0, #1
 800657c:	4240      	negs	r0, r0
 800657e:	b021      	add	sp, #132	; 0x84
 8006580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006582:	4b7f      	ldr	r3, [pc, #508]	; (8006780 <_vfiprintf_r+0x258>)
 8006584:	429c      	cmp	r4, r3
 8006586:	d101      	bne.n	800658c <_vfiprintf_r+0x64>
 8006588:	68b4      	ldr	r4, [r6, #8]
 800658a:	e7de      	b.n	800654a <_vfiprintf_r+0x22>
 800658c:	4b7d      	ldr	r3, [pc, #500]	; (8006784 <_vfiprintf_r+0x25c>)
 800658e:	429c      	cmp	r4, r3
 8006590:	d1db      	bne.n	800654a <_vfiprintf_r+0x22>
 8006592:	68f4      	ldr	r4, [r6, #12]
 8006594:	e7d9      	b.n	800654a <_vfiprintf_r+0x22>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	059b      	lsls	r3, r3, #22
 800659a:	d4ee      	bmi.n	800657a <_vfiprintf_r+0x52>
 800659c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659e:	f000 fd37 	bl	8007010 <__retarget_lock_release_recursive>
 80065a2:	e7ea      	b.n	800657a <_vfiprintf_r+0x52>
 80065a4:	2300      	movs	r3, #0
 80065a6:	ad08      	add	r5, sp, #32
 80065a8:	616b      	str	r3, [r5, #20]
 80065aa:	3320      	adds	r3, #32
 80065ac:	766b      	strb	r3, [r5, #25]
 80065ae:	3310      	adds	r3, #16
 80065b0:	76ab      	strb	r3, [r5, #26]
 80065b2:	9707      	str	r7, [sp, #28]
 80065b4:	9f03      	ldr	r7, [sp, #12]
 80065b6:	783b      	ldrb	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <_vfiprintf_r+0x98>
 80065bc:	2b25      	cmp	r3, #37	; 0x25
 80065be:	d14e      	bne.n	800665e <_vfiprintf_r+0x136>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	1afb      	subs	r3, r7, r3
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	429f      	cmp	r7, r3
 80065ca:	d00d      	beq.n	80065e8 <_vfiprintf_r+0xc0>
 80065cc:	9b05      	ldr	r3, [sp, #20]
 80065ce:	0021      	movs	r1, r4
 80065d0:	0030      	movs	r0, r6
 80065d2:	9a03      	ldr	r2, [sp, #12]
 80065d4:	f7ff ff95 	bl	8006502 <__sfputs_r>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d100      	bne.n	80065de <_vfiprintf_r+0xb6>
 80065dc:	e0b5      	b.n	800674a <_vfiprintf_r+0x222>
 80065de:	696a      	ldr	r2, [r5, #20]
 80065e0:	9b05      	ldr	r3, [sp, #20]
 80065e2:	4694      	mov	ip, r2
 80065e4:	4463      	add	r3, ip
 80065e6:	616b      	str	r3, [r5, #20]
 80065e8:	783b      	ldrb	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d100      	bne.n	80065f0 <_vfiprintf_r+0xc8>
 80065ee:	e0ac      	b.n	800674a <_vfiprintf_r+0x222>
 80065f0:	2201      	movs	r2, #1
 80065f2:	1c7b      	adds	r3, r7, #1
 80065f4:	9303      	str	r3, [sp, #12]
 80065f6:	2300      	movs	r3, #0
 80065f8:	4252      	negs	r2, r2
 80065fa:	606a      	str	r2, [r5, #4]
 80065fc:	a904      	add	r1, sp, #16
 80065fe:	3254      	adds	r2, #84	; 0x54
 8006600:	1852      	adds	r2, r2, r1
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	60eb      	str	r3, [r5, #12]
 8006606:	60ab      	str	r3, [r5, #8]
 8006608:	7013      	strb	r3, [r2, #0]
 800660a:	65ab      	str	r3, [r5, #88]	; 0x58
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	2205      	movs	r2, #5
 8006610:	7819      	ldrb	r1, [r3, #0]
 8006612:	485d      	ldr	r0, [pc, #372]	; (8006788 <_vfiprintf_r+0x260>)
 8006614:	f000 fd6a 	bl	80070ec <memchr>
 8006618:	9b03      	ldr	r3, [sp, #12]
 800661a:	1c5f      	adds	r7, r3, #1
 800661c:	2800      	cmp	r0, #0
 800661e:	d120      	bne.n	8006662 <_vfiprintf_r+0x13a>
 8006620:	682a      	ldr	r2, [r5, #0]
 8006622:	06d3      	lsls	r3, r2, #27
 8006624:	d504      	bpl.n	8006630 <_vfiprintf_r+0x108>
 8006626:	2353      	movs	r3, #83	; 0x53
 8006628:	a904      	add	r1, sp, #16
 800662a:	185b      	adds	r3, r3, r1
 800662c:	2120      	movs	r1, #32
 800662e:	7019      	strb	r1, [r3, #0]
 8006630:	0713      	lsls	r3, r2, #28
 8006632:	d504      	bpl.n	800663e <_vfiprintf_r+0x116>
 8006634:	2353      	movs	r3, #83	; 0x53
 8006636:	a904      	add	r1, sp, #16
 8006638:	185b      	adds	r3, r3, r1
 800663a:	212b      	movs	r1, #43	; 0x2b
 800663c:	7019      	strb	r1, [r3, #0]
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b2a      	cmp	r3, #42	; 0x2a
 8006644:	d016      	beq.n	8006674 <_vfiprintf_r+0x14c>
 8006646:	2100      	movs	r1, #0
 8006648:	68eb      	ldr	r3, [r5, #12]
 800664a:	9f03      	ldr	r7, [sp, #12]
 800664c:	783a      	ldrb	r2, [r7, #0]
 800664e:	1c78      	adds	r0, r7, #1
 8006650:	3a30      	subs	r2, #48	; 0x30
 8006652:	4684      	mov	ip, r0
 8006654:	2a09      	cmp	r2, #9
 8006656:	d94f      	bls.n	80066f8 <_vfiprintf_r+0x1d0>
 8006658:	2900      	cmp	r1, #0
 800665a:	d111      	bne.n	8006680 <_vfiprintf_r+0x158>
 800665c:	e017      	b.n	800668e <_vfiprintf_r+0x166>
 800665e:	3701      	adds	r7, #1
 8006660:	e7a9      	b.n	80065b6 <_vfiprintf_r+0x8e>
 8006662:	4b49      	ldr	r3, [pc, #292]	; (8006788 <_vfiprintf_r+0x260>)
 8006664:	682a      	ldr	r2, [r5, #0]
 8006666:	1ac0      	subs	r0, r0, r3
 8006668:	2301      	movs	r3, #1
 800666a:	4083      	lsls	r3, r0
 800666c:	4313      	orrs	r3, r2
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	9703      	str	r7, [sp, #12]
 8006672:	e7cb      	b.n	800660c <_vfiprintf_r+0xe4>
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	1d19      	adds	r1, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	9107      	str	r1, [sp, #28]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db01      	blt.n	8006684 <_vfiprintf_r+0x15c>
 8006680:	930b      	str	r3, [sp, #44]	; 0x2c
 8006682:	e004      	b.n	800668e <_vfiprintf_r+0x166>
 8006684:	425b      	negs	r3, r3
 8006686:	60eb      	str	r3, [r5, #12]
 8006688:	2302      	movs	r3, #2
 800668a:	4313      	orrs	r3, r2
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	783b      	ldrb	r3, [r7, #0]
 8006690:	2b2e      	cmp	r3, #46	; 0x2e
 8006692:	d10a      	bne.n	80066aa <_vfiprintf_r+0x182>
 8006694:	787b      	ldrb	r3, [r7, #1]
 8006696:	2b2a      	cmp	r3, #42	; 0x2a
 8006698:	d137      	bne.n	800670a <_vfiprintf_r+0x1e2>
 800669a:	9b07      	ldr	r3, [sp, #28]
 800669c:	3702      	adds	r7, #2
 800669e:	1d1a      	adds	r2, r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	9207      	str	r2, [sp, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	db2d      	blt.n	8006704 <_vfiprintf_r+0x1dc>
 80066a8:	9309      	str	r3, [sp, #36]	; 0x24
 80066aa:	2203      	movs	r2, #3
 80066ac:	7839      	ldrb	r1, [r7, #0]
 80066ae:	4837      	ldr	r0, [pc, #220]	; (800678c <_vfiprintf_r+0x264>)
 80066b0:	f000 fd1c 	bl	80070ec <memchr>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d007      	beq.n	80066c8 <_vfiprintf_r+0x1a0>
 80066b8:	4b34      	ldr	r3, [pc, #208]	; (800678c <_vfiprintf_r+0x264>)
 80066ba:	682a      	ldr	r2, [r5, #0]
 80066bc:	1ac0      	subs	r0, r0, r3
 80066be:	2340      	movs	r3, #64	; 0x40
 80066c0:	4083      	lsls	r3, r0
 80066c2:	4313      	orrs	r3, r2
 80066c4:	3701      	adds	r7, #1
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	7839      	ldrb	r1, [r7, #0]
 80066ca:	1c7b      	adds	r3, r7, #1
 80066cc:	2206      	movs	r2, #6
 80066ce:	4830      	ldr	r0, [pc, #192]	; (8006790 <_vfiprintf_r+0x268>)
 80066d0:	9303      	str	r3, [sp, #12]
 80066d2:	7629      	strb	r1, [r5, #24]
 80066d4:	f000 fd0a 	bl	80070ec <memchr>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d045      	beq.n	8006768 <_vfiprintf_r+0x240>
 80066dc:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <_vfiprintf_r+0x26c>)
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d127      	bne.n	8006732 <_vfiprintf_r+0x20a>
 80066e2:	2207      	movs	r2, #7
 80066e4:	9b07      	ldr	r3, [sp, #28]
 80066e6:	3307      	adds	r3, #7
 80066e8:	4393      	bics	r3, r2
 80066ea:	3308      	adds	r3, #8
 80066ec:	9307      	str	r3, [sp, #28]
 80066ee:	696b      	ldr	r3, [r5, #20]
 80066f0:	9a04      	ldr	r2, [sp, #16]
 80066f2:	189b      	adds	r3, r3, r2
 80066f4:	616b      	str	r3, [r5, #20]
 80066f6:	e75d      	b.n	80065b4 <_vfiprintf_r+0x8c>
 80066f8:	210a      	movs	r1, #10
 80066fa:	434b      	muls	r3, r1
 80066fc:	4667      	mov	r7, ip
 80066fe:	189b      	adds	r3, r3, r2
 8006700:	3909      	subs	r1, #9
 8006702:	e7a3      	b.n	800664c <_vfiprintf_r+0x124>
 8006704:	2301      	movs	r3, #1
 8006706:	425b      	negs	r3, r3
 8006708:	e7ce      	b.n	80066a8 <_vfiprintf_r+0x180>
 800670a:	2300      	movs	r3, #0
 800670c:	001a      	movs	r2, r3
 800670e:	3701      	adds	r7, #1
 8006710:	606b      	str	r3, [r5, #4]
 8006712:	7839      	ldrb	r1, [r7, #0]
 8006714:	1c78      	adds	r0, r7, #1
 8006716:	3930      	subs	r1, #48	; 0x30
 8006718:	4684      	mov	ip, r0
 800671a:	2909      	cmp	r1, #9
 800671c:	d903      	bls.n	8006726 <_vfiprintf_r+0x1fe>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0c3      	beq.n	80066aa <_vfiprintf_r+0x182>
 8006722:	9209      	str	r2, [sp, #36]	; 0x24
 8006724:	e7c1      	b.n	80066aa <_vfiprintf_r+0x182>
 8006726:	230a      	movs	r3, #10
 8006728:	435a      	muls	r2, r3
 800672a:	4667      	mov	r7, ip
 800672c:	1852      	adds	r2, r2, r1
 800672e:	3b09      	subs	r3, #9
 8006730:	e7ef      	b.n	8006712 <_vfiprintf_r+0x1ea>
 8006732:	ab07      	add	r3, sp, #28
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	0022      	movs	r2, r4
 8006738:	0029      	movs	r1, r5
 800673a:	0030      	movs	r0, r6
 800673c:	4b16      	ldr	r3, [pc, #88]	; (8006798 <_vfiprintf_r+0x270>)
 800673e:	e000      	b.n	8006742 <_vfiprintf_r+0x21a>
 8006740:	bf00      	nop
 8006742:	9004      	str	r0, [sp, #16]
 8006744:	9b04      	ldr	r3, [sp, #16]
 8006746:	3301      	adds	r3, #1
 8006748:	d1d1      	bne.n	80066ee <_vfiprintf_r+0x1c6>
 800674a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800674c:	07db      	lsls	r3, r3, #31
 800674e:	d405      	bmi.n	800675c <_vfiprintf_r+0x234>
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	059b      	lsls	r3, r3, #22
 8006754:	d402      	bmi.n	800675c <_vfiprintf_r+0x234>
 8006756:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006758:	f000 fc5a 	bl	8007010 <__retarget_lock_release_recursive>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	065b      	lsls	r3, r3, #25
 8006760:	d500      	bpl.n	8006764 <_vfiprintf_r+0x23c>
 8006762:	e70a      	b.n	800657a <_vfiprintf_r+0x52>
 8006764:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006766:	e70a      	b.n	800657e <_vfiprintf_r+0x56>
 8006768:	ab07      	add	r3, sp, #28
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	0022      	movs	r2, r4
 800676e:	0029      	movs	r1, r5
 8006770:	0030      	movs	r0, r6
 8006772:	4b09      	ldr	r3, [pc, #36]	; (8006798 <_vfiprintf_r+0x270>)
 8006774:	f000 f882 	bl	800687c <_printf_i>
 8006778:	e7e3      	b.n	8006742 <_vfiprintf_r+0x21a>
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	080076fc 	.word	0x080076fc
 8006780:	0800771c 	.word	0x0800771c
 8006784:	080076dc 	.word	0x080076dc
 8006788:	080076a6 	.word	0x080076a6
 800678c:	080076ac 	.word	0x080076ac
 8006790:	080076b0 	.word	0x080076b0
 8006794:	00000000 	.word	0x00000000
 8006798:	08006503 	.word	0x08006503

0800679c <_printf_common>:
 800679c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800679e:	0015      	movs	r5, r2
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	688a      	ldr	r2, [r1, #8]
 80067a4:	690b      	ldr	r3, [r1, #16]
 80067a6:	000c      	movs	r4, r1
 80067a8:	9000      	str	r0, [sp, #0]
 80067aa:	4293      	cmp	r3, r2
 80067ac:	da00      	bge.n	80067b0 <_printf_common+0x14>
 80067ae:	0013      	movs	r3, r2
 80067b0:	0022      	movs	r2, r4
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	3243      	adds	r2, #67	; 0x43
 80067b6:	7812      	ldrb	r2, [r2, #0]
 80067b8:	2a00      	cmp	r2, #0
 80067ba:	d001      	beq.n	80067c0 <_printf_common+0x24>
 80067bc:	3301      	adds	r3, #1
 80067be:	602b      	str	r3, [r5, #0]
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	069b      	lsls	r3, r3, #26
 80067c4:	d502      	bpl.n	80067cc <_printf_common+0x30>
 80067c6:	682b      	ldr	r3, [r5, #0]
 80067c8:	3302      	adds	r3, #2
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	6822      	ldr	r2, [r4, #0]
 80067ce:	2306      	movs	r3, #6
 80067d0:	0017      	movs	r7, r2
 80067d2:	401f      	ands	r7, r3
 80067d4:	421a      	tst	r2, r3
 80067d6:	d027      	beq.n	8006828 <_printf_common+0x8c>
 80067d8:	0023      	movs	r3, r4
 80067da:	3343      	adds	r3, #67	; 0x43
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	1e5a      	subs	r2, r3, #1
 80067e0:	4193      	sbcs	r3, r2
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	0692      	lsls	r2, r2, #26
 80067e6:	d430      	bmi.n	800684a <_printf_common+0xae>
 80067e8:	0022      	movs	r2, r4
 80067ea:	9901      	ldr	r1, [sp, #4]
 80067ec:	9800      	ldr	r0, [sp, #0]
 80067ee:	9e08      	ldr	r6, [sp, #32]
 80067f0:	3243      	adds	r2, #67	; 0x43
 80067f2:	47b0      	blx	r6
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d025      	beq.n	8006844 <_printf_common+0xa8>
 80067f8:	2306      	movs	r3, #6
 80067fa:	6820      	ldr	r0, [r4, #0]
 80067fc:	682a      	ldr	r2, [r5, #0]
 80067fe:	68e1      	ldr	r1, [r4, #12]
 8006800:	2500      	movs	r5, #0
 8006802:	4003      	ands	r3, r0
 8006804:	2b04      	cmp	r3, #4
 8006806:	d103      	bne.n	8006810 <_printf_common+0x74>
 8006808:	1a8d      	subs	r5, r1, r2
 800680a:	43eb      	mvns	r3, r5
 800680c:	17db      	asrs	r3, r3, #31
 800680e:	401d      	ands	r5, r3
 8006810:	68a3      	ldr	r3, [r4, #8]
 8006812:	6922      	ldr	r2, [r4, #16]
 8006814:	4293      	cmp	r3, r2
 8006816:	dd01      	ble.n	800681c <_printf_common+0x80>
 8006818:	1a9b      	subs	r3, r3, r2
 800681a:	18ed      	adds	r5, r5, r3
 800681c:	2700      	movs	r7, #0
 800681e:	42bd      	cmp	r5, r7
 8006820:	d120      	bne.n	8006864 <_printf_common+0xc8>
 8006822:	2000      	movs	r0, #0
 8006824:	e010      	b.n	8006848 <_printf_common+0xac>
 8006826:	3701      	adds	r7, #1
 8006828:	68e3      	ldr	r3, [r4, #12]
 800682a:	682a      	ldr	r2, [r5, #0]
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	42bb      	cmp	r3, r7
 8006830:	ddd2      	ble.n	80067d8 <_printf_common+0x3c>
 8006832:	0022      	movs	r2, r4
 8006834:	2301      	movs	r3, #1
 8006836:	9901      	ldr	r1, [sp, #4]
 8006838:	9800      	ldr	r0, [sp, #0]
 800683a:	9e08      	ldr	r6, [sp, #32]
 800683c:	3219      	adds	r2, #25
 800683e:	47b0      	blx	r6
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d1f0      	bne.n	8006826 <_printf_common+0x8a>
 8006844:	2001      	movs	r0, #1
 8006846:	4240      	negs	r0, r0
 8006848:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800684a:	2030      	movs	r0, #48	; 0x30
 800684c:	18e1      	adds	r1, r4, r3
 800684e:	3143      	adds	r1, #67	; 0x43
 8006850:	7008      	strb	r0, [r1, #0]
 8006852:	0021      	movs	r1, r4
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	3145      	adds	r1, #69	; 0x45
 8006858:	7809      	ldrb	r1, [r1, #0]
 800685a:	18a2      	adds	r2, r4, r2
 800685c:	3243      	adds	r2, #67	; 0x43
 800685e:	3302      	adds	r3, #2
 8006860:	7011      	strb	r1, [r2, #0]
 8006862:	e7c1      	b.n	80067e8 <_printf_common+0x4c>
 8006864:	0022      	movs	r2, r4
 8006866:	2301      	movs	r3, #1
 8006868:	9901      	ldr	r1, [sp, #4]
 800686a:	9800      	ldr	r0, [sp, #0]
 800686c:	9e08      	ldr	r6, [sp, #32]
 800686e:	321a      	adds	r2, #26
 8006870:	47b0      	blx	r6
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d0e6      	beq.n	8006844 <_printf_common+0xa8>
 8006876:	3701      	adds	r7, #1
 8006878:	e7d1      	b.n	800681e <_printf_common+0x82>
	...

0800687c <_printf_i>:
 800687c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687e:	b08b      	sub	sp, #44	; 0x2c
 8006880:	9206      	str	r2, [sp, #24]
 8006882:	000a      	movs	r2, r1
 8006884:	3243      	adds	r2, #67	; 0x43
 8006886:	9307      	str	r3, [sp, #28]
 8006888:	9005      	str	r0, [sp, #20]
 800688a:	9204      	str	r2, [sp, #16]
 800688c:	7e0a      	ldrb	r2, [r1, #24]
 800688e:	000c      	movs	r4, r1
 8006890:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006892:	2a78      	cmp	r2, #120	; 0x78
 8006894:	d807      	bhi.n	80068a6 <_printf_i+0x2a>
 8006896:	2a62      	cmp	r2, #98	; 0x62
 8006898:	d809      	bhi.n	80068ae <_printf_i+0x32>
 800689a:	2a00      	cmp	r2, #0
 800689c:	d100      	bne.n	80068a0 <_printf_i+0x24>
 800689e:	e0c1      	b.n	8006a24 <_printf_i+0x1a8>
 80068a0:	2a58      	cmp	r2, #88	; 0x58
 80068a2:	d100      	bne.n	80068a6 <_printf_i+0x2a>
 80068a4:	e08c      	b.n	80069c0 <_printf_i+0x144>
 80068a6:	0026      	movs	r6, r4
 80068a8:	3642      	adds	r6, #66	; 0x42
 80068aa:	7032      	strb	r2, [r6, #0]
 80068ac:	e022      	b.n	80068f4 <_printf_i+0x78>
 80068ae:	0010      	movs	r0, r2
 80068b0:	3863      	subs	r0, #99	; 0x63
 80068b2:	2815      	cmp	r0, #21
 80068b4:	d8f7      	bhi.n	80068a6 <_printf_i+0x2a>
 80068b6:	f7f9 fc23 	bl	8000100 <__gnu_thumb1_case_shi>
 80068ba:	0016      	.short	0x0016
 80068bc:	fff6001f 	.word	0xfff6001f
 80068c0:	fff6fff6 	.word	0xfff6fff6
 80068c4:	001ffff6 	.word	0x001ffff6
 80068c8:	fff6fff6 	.word	0xfff6fff6
 80068cc:	fff6fff6 	.word	0xfff6fff6
 80068d0:	003600a8 	.word	0x003600a8
 80068d4:	fff6009a 	.word	0xfff6009a
 80068d8:	00b9fff6 	.word	0x00b9fff6
 80068dc:	0036fff6 	.word	0x0036fff6
 80068e0:	fff6fff6 	.word	0xfff6fff6
 80068e4:	009e      	.short	0x009e
 80068e6:	0026      	movs	r6, r4
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	3642      	adds	r6, #66	; 0x42
 80068ec:	1d11      	adds	r1, r2, #4
 80068ee:	6019      	str	r1, [r3, #0]
 80068f0:	6813      	ldr	r3, [r2, #0]
 80068f2:	7033      	strb	r3, [r6, #0]
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0a7      	b.n	8006a48 <_printf_i+0x1cc>
 80068f8:	6808      	ldr	r0, [r1, #0]
 80068fa:	6819      	ldr	r1, [r3, #0]
 80068fc:	1d0a      	adds	r2, r1, #4
 80068fe:	0605      	lsls	r5, r0, #24
 8006900:	d50b      	bpl.n	800691a <_printf_i+0x9e>
 8006902:	680d      	ldr	r5, [r1, #0]
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	2d00      	cmp	r5, #0
 8006908:	da03      	bge.n	8006912 <_printf_i+0x96>
 800690a:	232d      	movs	r3, #45	; 0x2d
 800690c:	9a04      	ldr	r2, [sp, #16]
 800690e:	426d      	negs	r5, r5
 8006910:	7013      	strb	r3, [r2, #0]
 8006912:	4b61      	ldr	r3, [pc, #388]	; (8006a98 <_printf_i+0x21c>)
 8006914:	270a      	movs	r7, #10
 8006916:	9303      	str	r3, [sp, #12]
 8006918:	e01b      	b.n	8006952 <_printf_i+0xd6>
 800691a:	680d      	ldr	r5, [r1, #0]
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	0641      	lsls	r1, r0, #25
 8006920:	d5f1      	bpl.n	8006906 <_printf_i+0x8a>
 8006922:	b22d      	sxth	r5, r5
 8006924:	e7ef      	b.n	8006906 <_printf_i+0x8a>
 8006926:	680d      	ldr	r5, [r1, #0]
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	1d08      	adds	r0, r1, #4
 800692c:	6018      	str	r0, [r3, #0]
 800692e:	062e      	lsls	r6, r5, #24
 8006930:	d501      	bpl.n	8006936 <_printf_i+0xba>
 8006932:	680d      	ldr	r5, [r1, #0]
 8006934:	e003      	b.n	800693e <_printf_i+0xc2>
 8006936:	066d      	lsls	r5, r5, #25
 8006938:	d5fb      	bpl.n	8006932 <_printf_i+0xb6>
 800693a:	680d      	ldr	r5, [r1, #0]
 800693c:	b2ad      	uxth	r5, r5
 800693e:	4b56      	ldr	r3, [pc, #344]	; (8006a98 <_printf_i+0x21c>)
 8006940:	2708      	movs	r7, #8
 8006942:	9303      	str	r3, [sp, #12]
 8006944:	2a6f      	cmp	r2, #111	; 0x6f
 8006946:	d000      	beq.n	800694a <_printf_i+0xce>
 8006948:	3702      	adds	r7, #2
 800694a:	0023      	movs	r3, r4
 800694c:	2200      	movs	r2, #0
 800694e:	3343      	adds	r3, #67	; 0x43
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	6863      	ldr	r3, [r4, #4]
 8006954:	60a3      	str	r3, [r4, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	db03      	blt.n	8006962 <_printf_i+0xe6>
 800695a:	2204      	movs	r2, #4
 800695c:	6821      	ldr	r1, [r4, #0]
 800695e:	4391      	bics	r1, r2
 8006960:	6021      	str	r1, [r4, #0]
 8006962:	2d00      	cmp	r5, #0
 8006964:	d102      	bne.n	800696c <_printf_i+0xf0>
 8006966:	9e04      	ldr	r6, [sp, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00c      	beq.n	8006986 <_printf_i+0x10a>
 800696c:	9e04      	ldr	r6, [sp, #16]
 800696e:	0028      	movs	r0, r5
 8006970:	0039      	movs	r1, r7
 8006972:	f7f9 fc55 	bl	8000220 <__aeabi_uidivmod>
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	3e01      	subs	r6, #1
 800697a:	5c5b      	ldrb	r3, [r3, r1]
 800697c:	7033      	strb	r3, [r6, #0]
 800697e:	002b      	movs	r3, r5
 8006980:	0005      	movs	r5, r0
 8006982:	429f      	cmp	r7, r3
 8006984:	d9f3      	bls.n	800696e <_printf_i+0xf2>
 8006986:	2f08      	cmp	r7, #8
 8006988:	d109      	bne.n	800699e <_printf_i+0x122>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	07db      	lsls	r3, r3, #31
 800698e:	d506      	bpl.n	800699e <_printf_i+0x122>
 8006990:	6863      	ldr	r3, [r4, #4]
 8006992:	6922      	ldr	r2, [r4, #16]
 8006994:	4293      	cmp	r3, r2
 8006996:	dc02      	bgt.n	800699e <_printf_i+0x122>
 8006998:	2330      	movs	r3, #48	; 0x30
 800699a:	3e01      	subs	r6, #1
 800699c:	7033      	strb	r3, [r6, #0]
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	1b9b      	subs	r3, r3, r6
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	9b07      	ldr	r3, [sp, #28]
 80069a6:	0021      	movs	r1, r4
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	9805      	ldr	r0, [sp, #20]
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	aa09      	add	r2, sp, #36	; 0x24
 80069b0:	f7ff fef4 	bl	800679c <_printf_common>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d14c      	bne.n	8006a52 <_printf_i+0x1d6>
 80069b8:	2001      	movs	r0, #1
 80069ba:	4240      	negs	r0, r0
 80069bc:	b00b      	add	sp, #44	; 0x2c
 80069be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c0:	3145      	adds	r1, #69	; 0x45
 80069c2:	700a      	strb	r2, [r1, #0]
 80069c4:	4a34      	ldr	r2, [pc, #208]	; (8006a98 <_printf_i+0x21c>)
 80069c6:	9203      	str	r2, [sp, #12]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	6821      	ldr	r1, [r4, #0]
 80069cc:	ca20      	ldmia	r2!, {r5}
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	0608      	lsls	r0, r1, #24
 80069d2:	d516      	bpl.n	8006a02 <_printf_i+0x186>
 80069d4:	07cb      	lsls	r3, r1, #31
 80069d6:	d502      	bpl.n	80069de <_printf_i+0x162>
 80069d8:	2320      	movs	r3, #32
 80069da:	4319      	orrs	r1, r3
 80069dc:	6021      	str	r1, [r4, #0]
 80069de:	2710      	movs	r7, #16
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	d1b2      	bne.n	800694a <_printf_i+0xce>
 80069e4:	2320      	movs	r3, #32
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	439a      	bics	r2, r3
 80069ea:	6022      	str	r2, [r4, #0]
 80069ec:	e7ad      	b.n	800694a <_printf_i+0xce>
 80069ee:	2220      	movs	r2, #32
 80069f0:	6809      	ldr	r1, [r1, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	6022      	str	r2, [r4, #0]
 80069f6:	0022      	movs	r2, r4
 80069f8:	2178      	movs	r1, #120	; 0x78
 80069fa:	3245      	adds	r2, #69	; 0x45
 80069fc:	7011      	strb	r1, [r2, #0]
 80069fe:	4a27      	ldr	r2, [pc, #156]	; (8006a9c <_printf_i+0x220>)
 8006a00:	e7e1      	b.n	80069c6 <_printf_i+0x14a>
 8006a02:	0648      	lsls	r0, r1, #25
 8006a04:	d5e6      	bpl.n	80069d4 <_printf_i+0x158>
 8006a06:	b2ad      	uxth	r5, r5
 8006a08:	e7e4      	b.n	80069d4 <_printf_i+0x158>
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	680d      	ldr	r5, [r1, #0]
 8006a0e:	1d10      	adds	r0, r2, #4
 8006a10:	6949      	ldr	r1, [r1, #20]
 8006a12:	6018      	str	r0, [r3, #0]
 8006a14:	6813      	ldr	r3, [r2, #0]
 8006a16:	062e      	lsls	r6, r5, #24
 8006a18:	d501      	bpl.n	8006a1e <_printf_i+0x1a2>
 8006a1a:	6019      	str	r1, [r3, #0]
 8006a1c:	e002      	b.n	8006a24 <_printf_i+0x1a8>
 8006a1e:	066d      	lsls	r5, r5, #25
 8006a20:	d5fb      	bpl.n	8006a1a <_printf_i+0x19e>
 8006a22:	8019      	strh	r1, [r3, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	9e04      	ldr	r6, [sp, #16]
 8006a28:	6123      	str	r3, [r4, #16]
 8006a2a:	e7bb      	b.n	80069a4 <_printf_i+0x128>
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	1d11      	adds	r1, r2, #4
 8006a30:	6019      	str	r1, [r3, #0]
 8006a32:	6816      	ldr	r6, [r2, #0]
 8006a34:	2100      	movs	r1, #0
 8006a36:	0030      	movs	r0, r6
 8006a38:	6862      	ldr	r2, [r4, #4]
 8006a3a:	f000 fb57 	bl	80070ec <memchr>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d001      	beq.n	8006a46 <_printf_i+0x1ca>
 8006a42:	1b80      	subs	r0, r0, r6
 8006a44:	6060      	str	r0, [r4, #4]
 8006a46:	6863      	ldr	r3, [r4, #4]
 8006a48:	6123      	str	r3, [r4, #16]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	9a04      	ldr	r2, [sp, #16]
 8006a4e:	7013      	strb	r3, [r2, #0]
 8006a50:	e7a8      	b.n	80069a4 <_printf_i+0x128>
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	0032      	movs	r2, r6
 8006a56:	9906      	ldr	r1, [sp, #24]
 8006a58:	9805      	ldr	r0, [sp, #20]
 8006a5a:	9d07      	ldr	r5, [sp, #28]
 8006a5c:	47a8      	blx	r5
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	d0aa      	beq.n	80069b8 <_printf_i+0x13c>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	079b      	lsls	r3, r3, #30
 8006a66:	d415      	bmi.n	8006a94 <_printf_i+0x218>
 8006a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6a:	68e0      	ldr	r0, [r4, #12]
 8006a6c:	4298      	cmp	r0, r3
 8006a6e:	daa5      	bge.n	80069bc <_printf_i+0x140>
 8006a70:	0018      	movs	r0, r3
 8006a72:	e7a3      	b.n	80069bc <_printf_i+0x140>
 8006a74:	0022      	movs	r2, r4
 8006a76:	2301      	movs	r3, #1
 8006a78:	9906      	ldr	r1, [sp, #24]
 8006a7a:	9805      	ldr	r0, [sp, #20]
 8006a7c:	9e07      	ldr	r6, [sp, #28]
 8006a7e:	3219      	adds	r2, #25
 8006a80:	47b0      	blx	r6
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d098      	beq.n	80069b8 <_printf_i+0x13c>
 8006a86:	3501      	adds	r5, #1
 8006a88:	68e3      	ldr	r3, [r4, #12]
 8006a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a8c:	1a9b      	subs	r3, r3, r2
 8006a8e:	42ab      	cmp	r3, r5
 8006a90:	dcf0      	bgt.n	8006a74 <_printf_i+0x1f8>
 8006a92:	e7e9      	b.n	8006a68 <_printf_i+0x1ec>
 8006a94:	2500      	movs	r5, #0
 8006a96:	e7f7      	b.n	8006a88 <_printf_i+0x20c>
 8006a98:	080076b7 	.word	0x080076b7
 8006a9c:	080076c8 	.word	0x080076c8

08006aa0 <_sbrk_r>:
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	b570      	push	{r4, r5, r6, lr}
 8006aa4:	4d06      	ldr	r5, [pc, #24]	; (8006ac0 <_sbrk_r+0x20>)
 8006aa6:	0004      	movs	r4, r0
 8006aa8:	0008      	movs	r0, r1
 8006aaa:	602b      	str	r3, [r5, #0]
 8006aac:	f7fd fd50 	bl	8004550 <_sbrk>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d103      	bne.n	8006abc <_sbrk_r+0x1c>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d000      	beq.n	8006abc <_sbrk_r+0x1c>
 8006aba:	6023      	str	r3, [r4, #0]
 8006abc:	bd70      	pop	{r4, r5, r6, pc}
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	200007b8 	.word	0x200007b8

08006ac4 <__swbuf_r>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	0005      	movs	r5, r0
 8006ac8:	000e      	movs	r6, r1
 8006aca:	0014      	movs	r4, r2
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d004      	beq.n	8006ada <__swbuf_r+0x16>
 8006ad0:	6983      	ldr	r3, [r0, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <__swbuf_r+0x16>
 8006ad6:	f000 f9f9 	bl	8006ecc <__sinit>
 8006ada:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <__swbuf_r+0xa0>)
 8006adc:	429c      	cmp	r4, r3
 8006ade:	d12e      	bne.n	8006b3e <__swbuf_r+0x7a>
 8006ae0:	686c      	ldr	r4, [r5, #4]
 8006ae2:	69a3      	ldr	r3, [r4, #24]
 8006ae4:	60a3      	str	r3, [r4, #8]
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	071b      	lsls	r3, r3, #28
 8006aea:	d532      	bpl.n	8006b52 <__swbuf_r+0x8e>
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d02f      	beq.n	8006b52 <__swbuf_r+0x8e>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	6922      	ldr	r2, [r4, #16]
 8006af6:	b2f7      	uxtb	r7, r6
 8006af8:	1a98      	subs	r0, r3, r2
 8006afa:	6963      	ldr	r3, [r4, #20]
 8006afc:	b2f6      	uxtb	r6, r6
 8006afe:	4283      	cmp	r3, r0
 8006b00:	dc05      	bgt.n	8006b0e <__swbuf_r+0x4a>
 8006b02:	0021      	movs	r1, r4
 8006b04:	0028      	movs	r0, r5
 8006b06:	f000 f93f 	bl	8006d88 <_fflush_r>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d127      	bne.n	8006b5e <__swbuf_r+0x9a>
 8006b0e:	68a3      	ldr	r3, [r4, #8]
 8006b10:	3001      	adds	r0, #1
 8006b12:	3b01      	subs	r3, #1
 8006b14:	60a3      	str	r3, [r4, #8]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	6022      	str	r2, [r4, #0]
 8006b1c:	701f      	strb	r7, [r3, #0]
 8006b1e:	6963      	ldr	r3, [r4, #20]
 8006b20:	4283      	cmp	r3, r0
 8006b22:	d004      	beq.n	8006b2e <__swbuf_r+0x6a>
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	07db      	lsls	r3, r3, #31
 8006b28:	d507      	bpl.n	8006b3a <__swbuf_r+0x76>
 8006b2a:	2e0a      	cmp	r6, #10
 8006b2c:	d105      	bne.n	8006b3a <__swbuf_r+0x76>
 8006b2e:	0021      	movs	r1, r4
 8006b30:	0028      	movs	r0, r5
 8006b32:	f000 f929 	bl	8006d88 <_fflush_r>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d111      	bne.n	8006b5e <__swbuf_r+0x9a>
 8006b3a:	0030      	movs	r0, r6
 8006b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <__swbuf_r+0xa4>)
 8006b40:	429c      	cmp	r4, r3
 8006b42:	d101      	bne.n	8006b48 <__swbuf_r+0x84>
 8006b44:	68ac      	ldr	r4, [r5, #8]
 8006b46:	e7cc      	b.n	8006ae2 <__swbuf_r+0x1e>
 8006b48:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <__swbuf_r+0xa8>)
 8006b4a:	429c      	cmp	r4, r3
 8006b4c:	d1c9      	bne.n	8006ae2 <__swbuf_r+0x1e>
 8006b4e:	68ec      	ldr	r4, [r5, #12]
 8006b50:	e7c7      	b.n	8006ae2 <__swbuf_r+0x1e>
 8006b52:	0021      	movs	r1, r4
 8006b54:	0028      	movs	r0, r5
 8006b56:	f000 f80b 	bl	8006b70 <__swsetup_r>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d0c9      	beq.n	8006af2 <__swbuf_r+0x2e>
 8006b5e:	2601      	movs	r6, #1
 8006b60:	4276      	negs	r6, r6
 8006b62:	e7ea      	b.n	8006b3a <__swbuf_r+0x76>
 8006b64:	080076fc 	.word	0x080076fc
 8006b68:	0800771c 	.word	0x0800771c
 8006b6c:	080076dc 	.word	0x080076dc

08006b70 <__swsetup_r>:
 8006b70:	4b37      	ldr	r3, [pc, #220]	; (8006c50 <__swsetup_r+0xe0>)
 8006b72:	b570      	push	{r4, r5, r6, lr}
 8006b74:	681d      	ldr	r5, [r3, #0]
 8006b76:	0006      	movs	r6, r0
 8006b78:	000c      	movs	r4, r1
 8006b7a:	2d00      	cmp	r5, #0
 8006b7c:	d005      	beq.n	8006b8a <__swsetup_r+0x1a>
 8006b7e:	69ab      	ldr	r3, [r5, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <__swsetup_r+0x1a>
 8006b84:	0028      	movs	r0, r5
 8006b86:	f000 f9a1 	bl	8006ecc <__sinit>
 8006b8a:	4b32      	ldr	r3, [pc, #200]	; (8006c54 <__swsetup_r+0xe4>)
 8006b8c:	429c      	cmp	r4, r3
 8006b8e:	d10f      	bne.n	8006bb0 <__swsetup_r+0x40>
 8006b90:	686c      	ldr	r4, [r5, #4]
 8006b92:	230c      	movs	r3, #12
 8006b94:	5ee2      	ldrsh	r2, [r4, r3]
 8006b96:	b293      	uxth	r3, r2
 8006b98:	0711      	lsls	r1, r2, #28
 8006b9a:	d42d      	bmi.n	8006bf8 <__swsetup_r+0x88>
 8006b9c:	06d9      	lsls	r1, r3, #27
 8006b9e:	d411      	bmi.n	8006bc4 <__swsetup_r+0x54>
 8006ba0:	2309      	movs	r3, #9
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	6033      	str	r3, [r6, #0]
 8006ba6:	3337      	adds	r3, #55	; 0x37
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	4240      	negs	r0, r0
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <__swsetup_r+0xe8>)
 8006bb2:	429c      	cmp	r4, r3
 8006bb4:	d101      	bne.n	8006bba <__swsetup_r+0x4a>
 8006bb6:	68ac      	ldr	r4, [r5, #8]
 8006bb8:	e7eb      	b.n	8006b92 <__swsetup_r+0x22>
 8006bba:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <__swsetup_r+0xec>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	d1e8      	bne.n	8006b92 <__swsetup_r+0x22>
 8006bc0:	68ec      	ldr	r4, [r5, #12]
 8006bc2:	e7e6      	b.n	8006b92 <__swsetup_r+0x22>
 8006bc4:	075b      	lsls	r3, r3, #29
 8006bc6:	d513      	bpl.n	8006bf0 <__swsetup_r+0x80>
 8006bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bca:	2900      	cmp	r1, #0
 8006bcc:	d008      	beq.n	8006be0 <__swsetup_r+0x70>
 8006bce:	0023      	movs	r3, r4
 8006bd0:	3344      	adds	r3, #68	; 0x44
 8006bd2:	4299      	cmp	r1, r3
 8006bd4:	d002      	beq.n	8006bdc <__swsetup_r+0x6c>
 8006bd6:	0030      	movs	r0, r6
 8006bd8:	f7ff fa3a 	bl	8006050 <_free_r>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6363      	str	r3, [r4, #52]	; 0x34
 8006be0:	2224      	movs	r2, #36	; 0x24
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	4393      	bics	r3, r2
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	2300      	movs	r3, #0
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	2308      	movs	r3, #8
 8006bf2:	89a2      	ldrh	r2, [r4, #12]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	81a3      	strh	r3, [r4, #12]
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <__swsetup_r+0xa6>
 8006bfe:	21a0      	movs	r1, #160	; 0xa0
 8006c00:	2280      	movs	r2, #128	; 0x80
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	0089      	lsls	r1, r1, #2
 8006c06:	0092      	lsls	r2, r2, #2
 8006c08:	400b      	ands	r3, r1
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <__swsetup_r+0xa6>
 8006c0e:	0021      	movs	r1, r4
 8006c10:	0030      	movs	r0, r6
 8006c12:	f000 fa27 	bl	8007064 <__smakebuf_r>
 8006c16:	220c      	movs	r2, #12
 8006c18:	5ea3      	ldrsh	r3, [r4, r2]
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	001a      	movs	r2, r3
 8006c1e:	b299      	uxth	r1, r3
 8006c20:	4002      	ands	r2, r0
 8006c22:	4203      	tst	r3, r0
 8006c24:	d00f      	beq.n	8006c46 <__swsetup_r+0xd6>
 8006c26:	2200      	movs	r2, #0
 8006c28:	60a2      	str	r2, [r4, #8]
 8006c2a:	6962      	ldr	r2, [r4, #20]
 8006c2c:	4252      	negs	r2, r2
 8006c2e:	61a2      	str	r2, [r4, #24]
 8006c30:	2000      	movs	r0, #0
 8006c32:	6922      	ldr	r2, [r4, #16]
 8006c34:	4282      	cmp	r2, r0
 8006c36:	d1ba      	bne.n	8006bae <__swsetup_r+0x3e>
 8006c38:	060a      	lsls	r2, r1, #24
 8006c3a:	d5b8      	bpl.n	8006bae <__swsetup_r+0x3e>
 8006c3c:	2240      	movs	r2, #64	; 0x40
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	3801      	subs	r0, #1
 8006c44:	e7b3      	b.n	8006bae <__swsetup_r+0x3e>
 8006c46:	0788      	lsls	r0, r1, #30
 8006c48:	d400      	bmi.n	8006c4c <__swsetup_r+0xdc>
 8006c4a:	6962      	ldr	r2, [r4, #20]
 8006c4c:	60a2      	str	r2, [r4, #8]
 8006c4e:	e7ef      	b.n	8006c30 <__swsetup_r+0xc0>
 8006c50:	2000007c 	.word	0x2000007c
 8006c54:	080076fc 	.word	0x080076fc
 8006c58:	0800771c 	.word	0x0800771c
 8006c5c:	080076dc 	.word	0x080076dc

08006c60 <abort>:
 8006c60:	2006      	movs	r0, #6
 8006c62:	b510      	push	{r4, lr}
 8006c64:	f000 faca 	bl	80071fc <raise>
 8006c68:	2001      	movs	r0, #1
 8006c6a:	f7fd fc00 	bl	800446e <_exit>
	...

08006c70 <__sflush_r>:
 8006c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c72:	898b      	ldrh	r3, [r1, #12]
 8006c74:	0005      	movs	r5, r0
 8006c76:	000c      	movs	r4, r1
 8006c78:	071a      	lsls	r2, r3, #28
 8006c7a:	d45f      	bmi.n	8006d3c <__sflush_r+0xcc>
 8006c7c:	684a      	ldr	r2, [r1, #4]
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	dc04      	bgt.n	8006c8c <__sflush_r+0x1c>
 8006c82:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006c84:	2a00      	cmp	r2, #0
 8006c86:	dc01      	bgt.n	8006c8c <__sflush_r+0x1c>
 8006c88:	2000      	movs	r0, #0
 8006c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c8c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006c8e:	2f00      	cmp	r7, #0
 8006c90:	d0fa      	beq.n	8006c88 <__sflush_r+0x18>
 8006c92:	2200      	movs	r2, #0
 8006c94:	2180      	movs	r1, #128	; 0x80
 8006c96:	682e      	ldr	r6, [r5, #0]
 8006c98:	602a      	str	r2, [r5, #0]
 8006c9a:	001a      	movs	r2, r3
 8006c9c:	0149      	lsls	r1, r1, #5
 8006c9e:	400a      	ands	r2, r1
 8006ca0:	420b      	tst	r3, r1
 8006ca2:	d034      	beq.n	8006d0e <__sflush_r+0x9e>
 8006ca4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	075b      	lsls	r3, r3, #29
 8006caa:	d506      	bpl.n	8006cba <__sflush_r+0x4a>
 8006cac:	6863      	ldr	r3, [r4, #4]
 8006cae:	1ac0      	subs	r0, r0, r3
 8006cb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <__sflush_r+0x4a>
 8006cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cb8:	1ac0      	subs	r0, r0, r3
 8006cba:	0002      	movs	r2, r0
 8006cbc:	6a21      	ldr	r1, [r4, #32]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	0028      	movs	r0, r5
 8006cc2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006cc4:	47b8      	blx	r7
 8006cc6:	89a1      	ldrh	r1, [r4, #12]
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d106      	bne.n	8006cda <__sflush_r+0x6a>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	2b1d      	cmp	r3, #29
 8006cd0:	d831      	bhi.n	8006d36 <__sflush_r+0xc6>
 8006cd2:	4a2c      	ldr	r2, [pc, #176]	; (8006d84 <__sflush_r+0x114>)
 8006cd4:	40da      	lsrs	r2, r3
 8006cd6:	07d3      	lsls	r3, r2, #31
 8006cd8:	d52d      	bpl.n	8006d36 <__sflush_r+0xc6>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	6063      	str	r3, [r4, #4]
 8006cde:	6923      	ldr	r3, [r4, #16]
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	04cb      	lsls	r3, r1, #19
 8006ce4:	d505      	bpl.n	8006cf2 <__sflush_r+0x82>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	d102      	bne.n	8006cf0 <__sflush_r+0x80>
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d100      	bne.n	8006cf2 <__sflush_r+0x82>
 8006cf0:	6560      	str	r0, [r4, #84]	; 0x54
 8006cf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cf4:	602e      	str	r6, [r5, #0]
 8006cf6:	2900      	cmp	r1, #0
 8006cf8:	d0c6      	beq.n	8006c88 <__sflush_r+0x18>
 8006cfa:	0023      	movs	r3, r4
 8006cfc:	3344      	adds	r3, #68	; 0x44
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	d002      	beq.n	8006d08 <__sflush_r+0x98>
 8006d02:	0028      	movs	r0, r5
 8006d04:	f7ff f9a4 	bl	8006050 <_free_r>
 8006d08:	2000      	movs	r0, #0
 8006d0a:	6360      	str	r0, [r4, #52]	; 0x34
 8006d0c:	e7bd      	b.n	8006c8a <__sflush_r+0x1a>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	0028      	movs	r0, r5
 8006d12:	6a21      	ldr	r1, [r4, #32]
 8006d14:	47b8      	blx	r7
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	d1c5      	bne.n	8006ca6 <__sflush_r+0x36>
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0c2      	beq.n	8006ca6 <__sflush_r+0x36>
 8006d20:	2b1d      	cmp	r3, #29
 8006d22:	d001      	beq.n	8006d28 <__sflush_r+0xb8>
 8006d24:	2b16      	cmp	r3, #22
 8006d26:	d101      	bne.n	8006d2c <__sflush_r+0xbc>
 8006d28:	602e      	str	r6, [r5, #0]
 8006d2a:	e7ad      	b.n	8006c88 <__sflush_r+0x18>
 8006d2c:	2340      	movs	r3, #64	; 0x40
 8006d2e:	89a2      	ldrh	r2, [r4, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	81a3      	strh	r3, [r4, #12]
 8006d34:	e7a9      	b.n	8006c8a <__sflush_r+0x1a>
 8006d36:	2340      	movs	r3, #64	; 0x40
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	e7fa      	b.n	8006d32 <__sflush_r+0xc2>
 8006d3c:	690f      	ldr	r7, [r1, #16]
 8006d3e:	2f00      	cmp	r7, #0
 8006d40:	d0a2      	beq.n	8006c88 <__sflush_r+0x18>
 8006d42:	680a      	ldr	r2, [r1, #0]
 8006d44:	600f      	str	r7, [r1, #0]
 8006d46:	1bd2      	subs	r2, r2, r7
 8006d48:	9201      	str	r2, [sp, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	079b      	lsls	r3, r3, #30
 8006d4e:	d100      	bne.n	8006d52 <__sflush_r+0xe2>
 8006d50:	694a      	ldr	r2, [r1, #20]
 8006d52:	60a2      	str	r2, [r4, #8]
 8006d54:	9b01      	ldr	r3, [sp, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dc00      	bgt.n	8006d5c <__sflush_r+0xec>
 8006d5a:	e795      	b.n	8006c88 <__sflush_r+0x18>
 8006d5c:	003a      	movs	r2, r7
 8006d5e:	0028      	movs	r0, r5
 8006d60:	9b01      	ldr	r3, [sp, #4]
 8006d62:	6a21      	ldr	r1, [r4, #32]
 8006d64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d66:	47b0      	blx	r6
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	dc06      	bgt.n	8006d7a <__sflush_r+0x10a>
 8006d6c:	2340      	movs	r3, #64	; 0x40
 8006d6e:	2001      	movs	r0, #1
 8006d70:	89a2      	ldrh	r2, [r4, #12]
 8006d72:	4240      	negs	r0, r0
 8006d74:	4313      	orrs	r3, r2
 8006d76:	81a3      	strh	r3, [r4, #12]
 8006d78:	e787      	b.n	8006c8a <__sflush_r+0x1a>
 8006d7a:	9b01      	ldr	r3, [sp, #4]
 8006d7c:	183f      	adds	r7, r7, r0
 8006d7e:	1a1b      	subs	r3, r3, r0
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	e7e7      	b.n	8006d54 <__sflush_r+0xe4>
 8006d84:	20400001 	.word	0x20400001

08006d88 <_fflush_r>:
 8006d88:	690b      	ldr	r3, [r1, #16]
 8006d8a:	b570      	push	{r4, r5, r6, lr}
 8006d8c:	0005      	movs	r5, r0
 8006d8e:	000c      	movs	r4, r1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d102      	bne.n	8006d9a <_fflush_r+0x12>
 8006d94:	2500      	movs	r5, #0
 8006d96:	0028      	movs	r0, r5
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d004      	beq.n	8006da8 <_fflush_r+0x20>
 8006d9e:	6983      	ldr	r3, [r0, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <_fflush_r+0x20>
 8006da4:	f000 f892 	bl	8006ecc <__sinit>
 8006da8:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <_fflush_r+0x74>)
 8006daa:	429c      	cmp	r4, r3
 8006dac:	d11b      	bne.n	8006de6 <_fflush_r+0x5e>
 8006dae:	686c      	ldr	r4, [r5, #4]
 8006db0:	220c      	movs	r2, #12
 8006db2:	5ea3      	ldrsh	r3, [r4, r2]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0ed      	beq.n	8006d94 <_fflush_r+0xc>
 8006db8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dba:	07d2      	lsls	r2, r2, #31
 8006dbc:	d404      	bmi.n	8006dc8 <_fflush_r+0x40>
 8006dbe:	059b      	lsls	r3, r3, #22
 8006dc0:	d402      	bmi.n	8006dc8 <_fflush_r+0x40>
 8006dc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc4:	f000 f923 	bl	800700e <__retarget_lock_acquire_recursive>
 8006dc8:	0028      	movs	r0, r5
 8006dca:	0021      	movs	r1, r4
 8006dcc:	f7ff ff50 	bl	8006c70 <__sflush_r>
 8006dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dd2:	0005      	movs	r5, r0
 8006dd4:	07db      	lsls	r3, r3, #31
 8006dd6:	d4de      	bmi.n	8006d96 <_fflush_r+0xe>
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	059b      	lsls	r3, r3, #22
 8006ddc:	d4db      	bmi.n	8006d96 <_fflush_r+0xe>
 8006dde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006de0:	f000 f916 	bl	8007010 <__retarget_lock_release_recursive>
 8006de4:	e7d7      	b.n	8006d96 <_fflush_r+0xe>
 8006de6:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <_fflush_r+0x78>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	d101      	bne.n	8006df0 <_fflush_r+0x68>
 8006dec:	68ac      	ldr	r4, [r5, #8]
 8006dee:	e7df      	b.n	8006db0 <_fflush_r+0x28>
 8006df0:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <_fflush_r+0x7c>)
 8006df2:	429c      	cmp	r4, r3
 8006df4:	d1dc      	bne.n	8006db0 <_fflush_r+0x28>
 8006df6:	68ec      	ldr	r4, [r5, #12]
 8006df8:	e7da      	b.n	8006db0 <_fflush_r+0x28>
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	080076fc 	.word	0x080076fc
 8006e00:	0800771c 	.word	0x0800771c
 8006e04:	080076dc 	.word	0x080076dc

08006e08 <std>:
 8006e08:	2300      	movs	r3, #0
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	0004      	movs	r4, r0
 8006e0e:	6003      	str	r3, [r0, #0]
 8006e10:	6043      	str	r3, [r0, #4]
 8006e12:	6083      	str	r3, [r0, #8]
 8006e14:	8181      	strh	r1, [r0, #12]
 8006e16:	6643      	str	r3, [r0, #100]	; 0x64
 8006e18:	0019      	movs	r1, r3
 8006e1a:	81c2      	strh	r2, [r0, #14]
 8006e1c:	6103      	str	r3, [r0, #16]
 8006e1e:	6143      	str	r3, [r0, #20]
 8006e20:	6183      	str	r3, [r0, #24]
 8006e22:	2208      	movs	r2, #8
 8006e24:	305c      	adds	r0, #92	; 0x5c
 8006e26:	f7ff f874 	bl	8005f12 <memset>
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <std+0x38>)
 8006e2c:	6224      	str	r4, [r4, #32]
 8006e2e:	6263      	str	r3, [r4, #36]	; 0x24
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <std+0x3c>)
 8006e32:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e34:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <std+0x40>)
 8006e36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <std+0x44>)
 8006e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	0800723d 	.word	0x0800723d
 8006e44:	08007265 	.word	0x08007265
 8006e48:	0800729d 	.word	0x0800729d
 8006e4c:	080072c9 	.word	0x080072c9

08006e50 <_cleanup_r>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4902      	ldr	r1, [pc, #8]	; (8006e5c <_cleanup_r+0xc>)
 8006e54:	f000 f8ba 	bl	8006fcc <_fwalk_reent>
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	08006d89 	.word	0x08006d89

08006e60 <__sfmoreglue>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	2568      	movs	r5, #104	; 0x68
 8006e64:	1e4a      	subs	r2, r1, #1
 8006e66:	4355      	muls	r5, r2
 8006e68:	000e      	movs	r6, r1
 8006e6a:	0029      	movs	r1, r5
 8006e6c:	3174      	adds	r1, #116	; 0x74
 8006e6e:	f7ff f95b 	bl	8006128 <_malloc_r>
 8006e72:	1e04      	subs	r4, r0, #0
 8006e74:	d008      	beq.n	8006e88 <__sfmoreglue+0x28>
 8006e76:	2100      	movs	r1, #0
 8006e78:	002a      	movs	r2, r5
 8006e7a:	6001      	str	r1, [r0, #0]
 8006e7c:	6046      	str	r6, [r0, #4]
 8006e7e:	300c      	adds	r0, #12
 8006e80:	60a0      	str	r0, [r4, #8]
 8006e82:	3268      	adds	r2, #104	; 0x68
 8006e84:	f7ff f845 	bl	8005f12 <memset>
 8006e88:	0020      	movs	r0, r4
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}

08006e8c <__sfp_lock_acquire>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	4802      	ldr	r0, [pc, #8]	; (8006e98 <__sfp_lock_acquire+0xc>)
 8006e90:	f000 f8bd 	bl	800700e <__retarget_lock_acquire_recursive>
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	200007b5 	.word	0x200007b5

08006e9c <__sfp_lock_release>:
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	4802      	ldr	r0, [pc, #8]	; (8006ea8 <__sfp_lock_release+0xc>)
 8006ea0:	f000 f8b6 	bl	8007010 <__retarget_lock_release_recursive>
 8006ea4:	bd10      	pop	{r4, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	200007b5 	.word	0x200007b5

08006eac <__sinit_lock_acquire>:
 8006eac:	b510      	push	{r4, lr}
 8006eae:	4802      	ldr	r0, [pc, #8]	; (8006eb8 <__sinit_lock_acquire+0xc>)
 8006eb0:	f000 f8ad 	bl	800700e <__retarget_lock_acquire_recursive>
 8006eb4:	bd10      	pop	{r4, pc}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	200007b6 	.word	0x200007b6

08006ebc <__sinit_lock_release>:
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	4802      	ldr	r0, [pc, #8]	; (8006ec8 <__sinit_lock_release+0xc>)
 8006ec0:	f000 f8a6 	bl	8007010 <__retarget_lock_release_recursive>
 8006ec4:	bd10      	pop	{r4, pc}
 8006ec6:	46c0      	nop			; (mov r8, r8)
 8006ec8:	200007b6 	.word	0x200007b6

08006ecc <__sinit>:
 8006ecc:	b513      	push	{r0, r1, r4, lr}
 8006ece:	0004      	movs	r4, r0
 8006ed0:	f7ff ffec 	bl	8006eac <__sinit_lock_acquire>
 8006ed4:	69a3      	ldr	r3, [r4, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <__sinit+0x14>
 8006eda:	f7ff ffef 	bl	8006ebc <__sinit_lock_release>
 8006ede:	bd13      	pop	{r0, r1, r4, pc}
 8006ee0:	64a3      	str	r3, [r4, #72]	; 0x48
 8006ee2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006ee4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ee6:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <__sinit+0x68>)
 8006ee8:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <__sinit+0x6c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	62a2      	str	r2, [r4, #40]	; 0x28
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d101      	bne.n	8006ef8 <__sinit+0x2c>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	61a3      	str	r3, [r4, #24]
 8006ef8:	0020      	movs	r0, r4
 8006efa:	f000 f81f 	bl	8006f3c <__sfp>
 8006efe:	6060      	str	r0, [r4, #4]
 8006f00:	0020      	movs	r0, r4
 8006f02:	f000 f81b 	bl	8006f3c <__sfp>
 8006f06:	60a0      	str	r0, [r4, #8]
 8006f08:	0020      	movs	r0, r4
 8006f0a:	f000 f817 	bl	8006f3c <__sfp>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2104      	movs	r1, #4
 8006f12:	60e0      	str	r0, [r4, #12]
 8006f14:	6860      	ldr	r0, [r4, #4]
 8006f16:	f7ff ff77 	bl	8006e08 <std>
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	2109      	movs	r1, #9
 8006f1e:	68a0      	ldr	r0, [r4, #8]
 8006f20:	f7ff ff72 	bl	8006e08 <std>
 8006f24:	2202      	movs	r2, #2
 8006f26:	2112      	movs	r1, #18
 8006f28:	68e0      	ldr	r0, [r4, #12]
 8006f2a:	f7ff ff6d 	bl	8006e08 <std>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	61a3      	str	r3, [r4, #24]
 8006f32:	e7d2      	b.n	8006eda <__sinit+0xe>
 8006f34:	080075f4 	.word	0x080075f4
 8006f38:	08006e51 	.word	0x08006e51

08006f3c <__sfp>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	0007      	movs	r7, r0
 8006f40:	f7ff ffa4 	bl	8006e8c <__sfp_lock_acquire>
 8006f44:	4b1f      	ldr	r3, [pc, #124]	; (8006fc4 <__sfp+0x88>)
 8006f46:	681e      	ldr	r6, [r3, #0]
 8006f48:	69b3      	ldr	r3, [r6, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d102      	bne.n	8006f54 <__sfp+0x18>
 8006f4e:	0030      	movs	r0, r6
 8006f50:	f7ff ffbc 	bl	8006ecc <__sinit>
 8006f54:	3648      	adds	r6, #72	; 0x48
 8006f56:	68b4      	ldr	r4, [r6, #8]
 8006f58:	6873      	ldr	r3, [r6, #4]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	d504      	bpl.n	8006f68 <__sfp+0x2c>
 8006f5e:	6833      	ldr	r3, [r6, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d022      	beq.n	8006faa <__sfp+0x6e>
 8006f64:	6836      	ldr	r6, [r6, #0]
 8006f66:	e7f6      	b.n	8006f56 <__sfp+0x1a>
 8006f68:	220c      	movs	r2, #12
 8006f6a:	5ea5      	ldrsh	r5, [r4, r2]
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	d11a      	bne.n	8006fa6 <__sfp+0x6a>
 8006f70:	0020      	movs	r0, r4
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <__sfp+0x8c>)
 8006f74:	3058      	adds	r0, #88	; 0x58
 8006f76:	60e3      	str	r3, [r4, #12]
 8006f78:	6665      	str	r5, [r4, #100]	; 0x64
 8006f7a:	f000 f847 	bl	800700c <__retarget_lock_init_recursive>
 8006f7e:	f7ff ff8d 	bl	8006e9c <__sfp_lock_release>
 8006f82:	0020      	movs	r0, r4
 8006f84:	2208      	movs	r2, #8
 8006f86:	0029      	movs	r1, r5
 8006f88:	6025      	str	r5, [r4, #0]
 8006f8a:	60a5      	str	r5, [r4, #8]
 8006f8c:	6065      	str	r5, [r4, #4]
 8006f8e:	6125      	str	r5, [r4, #16]
 8006f90:	6165      	str	r5, [r4, #20]
 8006f92:	61a5      	str	r5, [r4, #24]
 8006f94:	305c      	adds	r0, #92	; 0x5c
 8006f96:	f7fe ffbc 	bl	8005f12 <memset>
 8006f9a:	6365      	str	r5, [r4, #52]	; 0x34
 8006f9c:	63a5      	str	r5, [r4, #56]	; 0x38
 8006f9e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006fa0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006fa2:	0020      	movs	r0, r4
 8006fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa6:	3468      	adds	r4, #104	; 0x68
 8006fa8:	e7d7      	b.n	8006f5a <__sfp+0x1e>
 8006faa:	2104      	movs	r1, #4
 8006fac:	0038      	movs	r0, r7
 8006fae:	f7ff ff57 	bl	8006e60 <__sfmoreglue>
 8006fb2:	1e04      	subs	r4, r0, #0
 8006fb4:	6030      	str	r0, [r6, #0]
 8006fb6:	d1d5      	bne.n	8006f64 <__sfp+0x28>
 8006fb8:	f7ff ff70 	bl	8006e9c <__sfp_lock_release>
 8006fbc:	230c      	movs	r3, #12
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	e7ef      	b.n	8006fa2 <__sfp+0x66>
 8006fc2:	46c0      	nop			; (mov r8, r8)
 8006fc4:	080075f4 	.word	0x080075f4
 8006fc8:	ffff0001 	.word	0xffff0001

08006fcc <_fwalk_reent>:
 8006fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fce:	0004      	movs	r4, r0
 8006fd0:	0006      	movs	r6, r0
 8006fd2:	2700      	movs	r7, #0
 8006fd4:	9101      	str	r1, [sp, #4]
 8006fd6:	3448      	adds	r4, #72	; 0x48
 8006fd8:	6863      	ldr	r3, [r4, #4]
 8006fda:	68a5      	ldr	r5, [r4, #8]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	9b00      	ldr	r3, [sp, #0]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	d504      	bpl.n	8006ff0 <_fwalk_reent+0x24>
 8006fe6:	6824      	ldr	r4, [r4, #0]
 8006fe8:	2c00      	cmp	r4, #0
 8006fea:	d1f5      	bne.n	8006fd8 <_fwalk_reent+0xc>
 8006fec:	0038      	movs	r0, r7
 8006fee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ff0:	89ab      	ldrh	r3, [r5, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d908      	bls.n	8007008 <_fwalk_reent+0x3c>
 8006ff6:	220e      	movs	r2, #14
 8006ff8:	5eab      	ldrsh	r3, [r5, r2]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	d004      	beq.n	8007008 <_fwalk_reent+0x3c>
 8006ffe:	0029      	movs	r1, r5
 8007000:	0030      	movs	r0, r6
 8007002:	9b01      	ldr	r3, [sp, #4]
 8007004:	4798      	blx	r3
 8007006:	4307      	orrs	r7, r0
 8007008:	3568      	adds	r5, #104	; 0x68
 800700a:	e7e8      	b.n	8006fde <_fwalk_reent+0x12>

0800700c <__retarget_lock_init_recursive>:
 800700c:	4770      	bx	lr

0800700e <__retarget_lock_acquire_recursive>:
 800700e:	4770      	bx	lr

08007010 <__retarget_lock_release_recursive>:
 8007010:	4770      	bx	lr
	...

08007014 <__swhatbuf_r>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	000e      	movs	r6, r1
 8007018:	001d      	movs	r5, r3
 800701a:	230e      	movs	r3, #14
 800701c:	5ec9      	ldrsh	r1, [r1, r3]
 800701e:	0014      	movs	r4, r2
 8007020:	b096      	sub	sp, #88	; 0x58
 8007022:	2900      	cmp	r1, #0
 8007024:	da08      	bge.n	8007038 <__swhatbuf_r+0x24>
 8007026:	220c      	movs	r2, #12
 8007028:	5eb3      	ldrsh	r3, [r6, r2]
 800702a:	2200      	movs	r2, #0
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	061b      	lsls	r3, r3, #24
 8007030:	d411      	bmi.n	8007056 <__swhatbuf_r+0x42>
 8007032:	2380      	movs	r3, #128	; 0x80
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	e00f      	b.n	8007058 <__swhatbuf_r+0x44>
 8007038:	466a      	mov	r2, sp
 800703a:	f000 f971 	bl	8007320 <_fstat_r>
 800703e:	2800      	cmp	r0, #0
 8007040:	dbf1      	blt.n	8007026 <__swhatbuf_r+0x12>
 8007042:	23f0      	movs	r3, #240	; 0xf0
 8007044:	9901      	ldr	r1, [sp, #4]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	4019      	ands	r1, r3
 800704a:	4b05      	ldr	r3, [pc, #20]	; (8007060 <__swhatbuf_r+0x4c>)
 800704c:	18c9      	adds	r1, r1, r3
 800704e:	424b      	negs	r3, r1
 8007050:	4159      	adcs	r1, r3
 8007052:	6029      	str	r1, [r5, #0]
 8007054:	e7ed      	b.n	8007032 <__swhatbuf_r+0x1e>
 8007056:	2340      	movs	r3, #64	; 0x40
 8007058:	2000      	movs	r0, #0
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	b016      	add	sp, #88	; 0x58
 800705e:	bd70      	pop	{r4, r5, r6, pc}
 8007060:	ffffe000 	.word	0xffffe000

08007064 <__smakebuf_r>:
 8007064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007066:	2602      	movs	r6, #2
 8007068:	898b      	ldrh	r3, [r1, #12]
 800706a:	0005      	movs	r5, r0
 800706c:	000c      	movs	r4, r1
 800706e:	4233      	tst	r3, r6
 8007070:	d006      	beq.n	8007080 <__smakebuf_r+0x1c>
 8007072:	0023      	movs	r3, r4
 8007074:	3347      	adds	r3, #71	; 0x47
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	2301      	movs	r3, #1
 800707c:	6163      	str	r3, [r4, #20]
 800707e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007080:	466a      	mov	r2, sp
 8007082:	ab01      	add	r3, sp, #4
 8007084:	f7ff ffc6 	bl	8007014 <__swhatbuf_r>
 8007088:	9900      	ldr	r1, [sp, #0]
 800708a:	0007      	movs	r7, r0
 800708c:	0028      	movs	r0, r5
 800708e:	f7ff f84b 	bl	8006128 <_malloc_r>
 8007092:	2800      	cmp	r0, #0
 8007094:	d108      	bne.n	80070a8 <__smakebuf_r+0x44>
 8007096:	220c      	movs	r2, #12
 8007098:	5ea3      	ldrsh	r3, [r4, r2]
 800709a:	059a      	lsls	r2, r3, #22
 800709c:	d4ef      	bmi.n	800707e <__smakebuf_r+0x1a>
 800709e:	2203      	movs	r2, #3
 80070a0:	4393      	bics	r3, r2
 80070a2:	431e      	orrs	r6, r3
 80070a4:	81a6      	strh	r6, [r4, #12]
 80070a6:	e7e4      	b.n	8007072 <__smakebuf_r+0xe>
 80070a8:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <__smakebuf_r+0x84>)
 80070aa:	62ab      	str	r3, [r5, #40]	; 0x28
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	89a2      	ldrh	r2, [r4, #12]
 80070b0:	6020      	str	r0, [r4, #0]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	9b00      	ldr	r3, [sp, #0]
 80070b8:	6120      	str	r0, [r4, #16]
 80070ba:	6163      	str	r3, [r4, #20]
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00d      	beq.n	80070de <__smakebuf_r+0x7a>
 80070c2:	0028      	movs	r0, r5
 80070c4:	230e      	movs	r3, #14
 80070c6:	5ee1      	ldrsh	r1, [r4, r3]
 80070c8:	f000 f93c 	bl	8007344 <_isatty_r>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d006      	beq.n	80070de <__smakebuf_r+0x7a>
 80070d0:	2203      	movs	r2, #3
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	4393      	bics	r3, r2
 80070d6:	001a      	movs	r2, r3
 80070d8:	2301      	movs	r3, #1
 80070da:	4313      	orrs	r3, r2
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	89a0      	ldrh	r0, [r4, #12]
 80070e0:	4307      	orrs	r7, r0
 80070e2:	81a7      	strh	r7, [r4, #12]
 80070e4:	e7cb      	b.n	800707e <__smakebuf_r+0x1a>
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	08006e51 	.word	0x08006e51

080070ec <memchr>:
 80070ec:	b2c9      	uxtb	r1, r1
 80070ee:	1882      	adds	r2, r0, r2
 80070f0:	4290      	cmp	r0, r2
 80070f2:	d101      	bne.n	80070f8 <memchr+0xc>
 80070f4:	2000      	movs	r0, #0
 80070f6:	4770      	bx	lr
 80070f8:	7803      	ldrb	r3, [r0, #0]
 80070fa:	428b      	cmp	r3, r1
 80070fc:	d0fb      	beq.n	80070f6 <memchr+0xa>
 80070fe:	3001      	adds	r0, #1
 8007100:	e7f6      	b.n	80070f0 <memchr+0x4>

08007102 <memmove>:
 8007102:	b510      	push	{r4, lr}
 8007104:	4288      	cmp	r0, r1
 8007106:	d902      	bls.n	800710e <memmove+0xc>
 8007108:	188b      	adds	r3, r1, r2
 800710a:	4298      	cmp	r0, r3
 800710c:	d303      	bcc.n	8007116 <memmove+0x14>
 800710e:	2300      	movs	r3, #0
 8007110:	e007      	b.n	8007122 <memmove+0x20>
 8007112:	5c8b      	ldrb	r3, [r1, r2]
 8007114:	5483      	strb	r3, [r0, r2]
 8007116:	3a01      	subs	r2, #1
 8007118:	d2fb      	bcs.n	8007112 <memmove+0x10>
 800711a:	bd10      	pop	{r4, pc}
 800711c:	5ccc      	ldrb	r4, [r1, r3]
 800711e:	54c4      	strb	r4, [r0, r3]
 8007120:	3301      	adds	r3, #1
 8007122:	429a      	cmp	r2, r3
 8007124:	d1fa      	bne.n	800711c <memmove+0x1a>
 8007126:	e7f8      	b.n	800711a <memmove+0x18>

08007128 <__malloc_lock>:
 8007128:	b510      	push	{r4, lr}
 800712a:	4802      	ldr	r0, [pc, #8]	; (8007134 <__malloc_lock+0xc>)
 800712c:	f7ff ff6f 	bl	800700e <__retarget_lock_acquire_recursive>
 8007130:	bd10      	pop	{r4, pc}
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	200007b4 	.word	0x200007b4

08007138 <__malloc_unlock>:
 8007138:	b510      	push	{r4, lr}
 800713a:	4802      	ldr	r0, [pc, #8]	; (8007144 <__malloc_unlock+0xc>)
 800713c:	f7ff ff68 	bl	8007010 <__retarget_lock_release_recursive>
 8007140:	bd10      	pop	{r4, pc}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	200007b4 	.word	0x200007b4

08007148 <_realloc_r>:
 8007148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800714a:	0007      	movs	r7, r0
 800714c:	000e      	movs	r6, r1
 800714e:	0014      	movs	r4, r2
 8007150:	2900      	cmp	r1, #0
 8007152:	d105      	bne.n	8007160 <_realloc_r+0x18>
 8007154:	0011      	movs	r1, r2
 8007156:	f7fe ffe7 	bl	8006128 <_malloc_r>
 800715a:	0005      	movs	r5, r0
 800715c:	0028      	movs	r0, r5
 800715e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007160:	2a00      	cmp	r2, #0
 8007162:	d103      	bne.n	800716c <_realloc_r+0x24>
 8007164:	f7fe ff74 	bl	8006050 <_free_r>
 8007168:	0025      	movs	r5, r4
 800716a:	e7f7      	b.n	800715c <_realloc_r+0x14>
 800716c:	f000 f910 	bl	8007390 <_malloc_usable_size_r>
 8007170:	9001      	str	r0, [sp, #4]
 8007172:	4284      	cmp	r4, r0
 8007174:	d803      	bhi.n	800717e <_realloc_r+0x36>
 8007176:	0035      	movs	r5, r6
 8007178:	0843      	lsrs	r3, r0, #1
 800717a:	42a3      	cmp	r3, r4
 800717c:	d3ee      	bcc.n	800715c <_realloc_r+0x14>
 800717e:	0021      	movs	r1, r4
 8007180:	0038      	movs	r0, r7
 8007182:	f7fe ffd1 	bl	8006128 <_malloc_r>
 8007186:	1e05      	subs	r5, r0, #0
 8007188:	d0e8      	beq.n	800715c <_realloc_r+0x14>
 800718a:	9b01      	ldr	r3, [sp, #4]
 800718c:	0022      	movs	r2, r4
 800718e:	429c      	cmp	r4, r3
 8007190:	d900      	bls.n	8007194 <_realloc_r+0x4c>
 8007192:	001a      	movs	r2, r3
 8007194:	0031      	movs	r1, r6
 8007196:	0028      	movs	r0, r5
 8007198:	f7fe feb2 	bl	8005f00 <memcpy>
 800719c:	0031      	movs	r1, r6
 800719e:	0038      	movs	r0, r7
 80071a0:	f7fe ff56 	bl	8006050 <_free_r>
 80071a4:	e7da      	b.n	800715c <_realloc_r+0x14>

080071a6 <_raise_r>:
 80071a6:	b570      	push	{r4, r5, r6, lr}
 80071a8:	0004      	movs	r4, r0
 80071aa:	000d      	movs	r5, r1
 80071ac:	291f      	cmp	r1, #31
 80071ae:	d904      	bls.n	80071ba <_raise_r+0x14>
 80071b0:	2316      	movs	r3, #22
 80071b2:	6003      	str	r3, [r0, #0]
 80071b4:	2001      	movs	r0, #1
 80071b6:	4240      	negs	r0, r0
 80071b8:	bd70      	pop	{r4, r5, r6, pc}
 80071ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <_raise_r+0x24>
 80071c0:	008a      	lsls	r2, r1, #2
 80071c2:	189b      	adds	r3, r3, r2
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	d108      	bne.n	80071dc <_raise_r+0x36>
 80071ca:	0020      	movs	r0, r4
 80071cc:	f000 f832 	bl	8007234 <_getpid_r>
 80071d0:	002a      	movs	r2, r5
 80071d2:	0001      	movs	r1, r0
 80071d4:	0020      	movs	r0, r4
 80071d6:	f000 f81b 	bl	8007210 <_kill_r>
 80071da:	e7ed      	b.n	80071b8 <_raise_r+0x12>
 80071dc:	2000      	movs	r0, #0
 80071de:	2a01      	cmp	r2, #1
 80071e0:	d0ea      	beq.n	80071b8 <_raise_r+0x12>
 80071e2:	1c51      	adds	r1, r2, #1
 80071e4:	d103      	bne.n	80071ee <_raise_r+0x48>
 80071e6:	2316      	movs	r3, #22
 80071e8:	3001      	adds	r0, #1
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	e7e4      	b.n	80071b8 <_raise_r+0x12>
 80071ee:	2400      	movs	r4, #0
 80071f0:	0028      	movs	r0, r5
 80071f2:	601c      	str	r4, [r3, #0]
 80071f4:	4790      	blx	r2
 80071f6:	0020      	movs	r0, r4
 80071f8:	e7de      	b.n	80071b8 <_raise_r+0x12>
	...

080071fc <raise>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	4b03      	ldr	r3, [pc, #12]	; (800720c <raise+0x10>)
 8007200:	0001      	movs	r1, r0
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	f7ff ffcf 	bl	80071a6 <_raise_r>
 8007208:	bd10      	pop	{r4, pc}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	2000007c 	.word	0x2000007c

08007210 <_kill_r>:
 8007210:	2300      	movs	r3, #0
 8007212:	b570      	push	{r4, r5, r6, lr}
 8007214:	4d06      	ldr	r5, [pc, #24]	; (8007230 <_kill_r+0x20>)
 8007216:	0004      	movs	r4, r0
 8007218:	0008      	movs	r0, r1
 800721a:	0011      	movs	r1, r2
 800721c:	602b      	str	r3, [r5, #0]
 800721e:	f7fd f916 	bl	800444e <_kill>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	d103      	bne.n	800722e <_kill_r+0x1e>
 8007226:	682b      	ldr	r3, [r5, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d000      	beq.n	800722e <_kill_r+0x1e>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd70      	pop	{r4, r5, r6, pc}
 8007230:	200007b8 	.word	0x200007b8

08007234 <_getpid_r>:
 8007234:	b510      	push	{r4, lr}
 8007236:	f7fd f904 	bl	8004442 <_getpid>
 800723a:	bd10      	pop	{r4, pc}

0800723c <__sread>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	000c      	movs	r4, r1
 8007240:	250e      	movs	r5, #14
 8007242:	5f49      	ldrsh	r1, [r1, r5]
 8007244:	f000 f8ac 	bl	80073a0 <_read_r>
 8007248:	2800      	cmp	r0, #0
 800724a:	db03      	blt.n	8007254 <__sread+0x18>
 800724c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800724e:	181b      	adds	r3, r3, r0
 8007250:	6563      	str	r3, [r4, #84]	; 0x54
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	4a02      	ldr	r2, [pc, #8]	; (8007260 <__sread+0x24>)
 8007258:	4013      	ands	r3, r2
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	e7f9      	b.n	8007252 <__sread+0x16>
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	ffffefff 	.word	0xffffefff

08007264 <__swrite>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	001f      	movs	r7, r3
 8007268:	898b      	ldrh	r3, [r1, #12]
 800726a:	0005      	movs	r5, r0
 800726c:	000c      	movs	r4, r1
 800726e:	0016      	movs	r6, r2
 8007270:	05db      	lsls	r3, r3, #23
 8007272:	d505      	bpl.n	8007280 <__swrite+0x1c>
 8007274:	230e      	movs	r3, #14
 8007276:	5ec9      	ldrsh	r1, [r1, r3]
 8007278:	2200      	movs	r2, #0
 800727a:	2302      	movs	r3, #2
 800727c:	f000 f874 	bl	8007368 <_lseek_r>
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	4a05      	ldr	r2, [pc, #20]	; (8007298 <__swrite+0x34>)
 8007284:	0028      	movs	r0, r5
 8007286:	4013      	ands	r3, r2
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	0032      	movs	r2, r6
 800728c:	230e      	movs	r3, #14
 800728e:	5ee1      	ldrsh	r1, [r4, r3]
 8007290:	003b      	movs	r3, r7
 8007292:	f000 f81f 	bl	80072d4 <_write_r>
 8007296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007298:	ffffefff 	.word	0xffffefff

0800729c <__sseek>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	000c      	movs	r4, r1
 80072a0:	250e      	movs	r5, #14
 80072a2:	5f49      	ldrsh	r1, [r1, r5]
 80072a4:	f000 f860 	bl	8007368 <_lseek_r>
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	1c42      	adds	r2, r0, #1
 80072ac:	d103      	bne.n	80072b6 <__sseek+0x1a>
 80072ae:	4a05      	ldr	r2, [pc, #20]	; (80072c4 <__sseek+0x28>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	81a3      	strh	r3, [r4, #12]
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
 80072b6:	2280      	movs	r2, #128	; 0x80
 80072b8:	0152      	lsls	r2, r2, #5
 80072ba:	4313      	orrs	r3, r2
 80072bc:	81a3      	strh	r3, [r4, #12]
 80072be:	6560      	str	r0, [r4, #84]	; 0x54
 80072c0:	e7f8      	b.n	80072b4 <__sseek+0x18>
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	ffffefff 	.word	0xffffefff

080072c8 <__sclose>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	230e      	movs	r3, #14
 80072cc:	5ec9      	ldrsh	r1, [r1, r3]
 80072ce:	f000 f815 	bl	80072fc <_close_r>
 80072d2:	bd10      	pop	{r4, pc}

080072d4 <_write_r>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	0004      	movs	r4, r0
 80072d8:	0008      	movs	r0, r1
 80072da:	0011      	movs	r1, r2
 80072dc:	001a      	movs	r2, r3
 80072de:	2300      	movs	r3, #0
 80072e0:	4d05      	ldr	r5, [pc, #20]	; (80072f8 <_write_r+0x24>)
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	f7fd f8ec 	bl	80044c0 <_write>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d103      	bne.n	80072f4 <_write_r+0x20>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d000      	beq.n	80072f4 <_write_r+0x20>
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	bd70      	pop	{r4, r5, r6, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	200007b8 	.word	0x200007b8

080072fc <_close_r>:
 80072fc:	2300      	movs	r3, #0
 80072fe:	b570      	push	{r4, r5, r6, lr}
 8007300:	4d06      	ldr	r5, [pc, #24]	; (800731c <_close_r+0x20>)
 8007302:	0004      	movs	r4, r0
 8007304:	0008      	movs	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7fd f8f6 	bl	80044f8 <_close>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d103      	bne.n	8007318 <_close_r+0x1c>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d000      	beq.n	8007318 <_close_r+0x1c>
 8007316:	6023      	str	r3, [r4, #0]
 8007318:	bd70      	pop	{r4, r5, r6, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	200007b8 	.word	0x200007b8

08007320 <_fstat_r>:
 8007320:	2300      	movs	r3, #0
 8007322:	b570      	push	{r4, r5, r6, lr}
 8007324:	4d06      	ldr	r5, [pc, #24]	; (8007340 <_fstat_r+0x20>)
 8007326:	0004      	movs	r4, r0
 8007328:	0008      	movs	r0, r1
 800732a:	0011      	movs	r1, r2
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	f7fd f8ed 	bl	800450c <_fstat>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d103      	bne.n	800733e <_fstat_r+0x1e>
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d000      	beq.n	800733e <_fstat_r+0x1e>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	200007b8 	.word	0x200007b8

08007344 <_isatty_r>:
 8007344:	2300      	movs	r3, #0
 8007346:	b570      	push	{r4, r5, r6, lr}
 8007348:	4d06      	ldr	r5, [pc, #24]	; (8007364 <_isatty_r+0x20>)
 800734a:	0004      	movs	r4, r0
 800734c:	0008      	movs	r0, r1
 800734e:	602b      	str	r3, [r5, #0]
 8007350:	f7fd f8ea 	bl	8004528 <_isatty>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	d103      	bne.n	8007360 <_isatty_r+0x1c>
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d000      	beq.n	8007360 <_isatty_r+0x1c>
 800735e:	6023      	str	r3, [r4, #0]
 8007360:	bd70      	pop	{r4, r5, r6, pc}
 8007362:	46c0      	nop			; (mov r8, r8)
 8007364:	200007b8 	.word	0x200007b8

08007368 <_lseek_r>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	0004      	movs	r4, r0
 800736c:	0008      	movs	r0, r1
 800736e:	0011      	movs	r1, r2
 8007370:	001a      	movs	r2, r3
 8007372:	2300      	movs	r3, #0
 8007374:	4d05      	ldr	r5, [pc, #20]	; (800738c <_lseek_r+0x24>)
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	f7fd f8df 	bl	800453a <_lseek>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d103      	bne.n	8007388 <_lseek_r+0x20>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d000      	beq.n	8007388 <_lseek_r+0x20>
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	bd70      	pop	{r4, r5, r6, pc}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	200007b8 	.word	0x200007b8

08007390 <_malloc_usable_size_r>:
 8007390:	1f0b      	subs	r3, r1, #4
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	1f18      	subs	r0, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	da01      	bge.n	800739e <_malloc_usable_size_r+0xe>
 800739a:	580b      	ldr	r3, [r1, r0]
 800739c:	18c0      	adds	r0, r0, r3
 800739e:	4770      	bx	lr

080073a0 <_read_r>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	0004      	movs	r4, r0
 80073a4:	0008      	movs	r0, r1
 80073a6:	0011      	movs	r1, r2
 80073a8:	001a      	movs	r2, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	4d05      	ldr	r5, [pc, #20]	; (80073c4 <_read_r+0x24>)
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7fd f869 	bl	8004486 <_read>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d103      	bne.n	80073c0 <_read_r+0x20>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d000      	beq.n	80073c0 <_read_r+0x20>
 80073be:	6023      	str	r3, [r4, #0]
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	200007b8 	.word	0x200007b8

080073c8 <_init>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ce:	bc08      	pop	{r3}
 80073d0:	469e      	mov	lr, r3
 80073d2:	4770      	bx	lr

080073d4 <_fini>:
 80073d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073da:	bc08      	pop	{r3}
 80073dc:	469e      	mov	lr, r3
 80073de:	4770      	bx	lr
